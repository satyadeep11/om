{"version":3,"sources":["webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/accordion/accordion-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/accordion/accordion.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/accordion/accordion.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/alert/alert-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/alert/alert.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/alert/alert.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/buttons/buttons.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/buttons/checkbox.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/buttons/label.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/buttons/radio.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/carousel/carousel-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/carousel/carousel.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/carousel/carousel.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/collapse/collapse.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/collapse/collapse.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/adapters/ngb-date-adapter.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/adapters/ngb-date-native-adapter.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-day-view.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-i18n.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-input.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-keymap-service.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-month-view.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-navigation-select.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-navigation.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-service.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-tools.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-view-model.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/hijri/ngb-calendar-hijri.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/hijri/ngb-calendar-islamic-civil.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/hijri/ngb-calendar-islamic-umalqura.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/ngb-calendar.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/ngb-date-parser-formatter.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/ngb-date.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/dropdown/dropdown-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/dropdown/dropdown.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/dropdown/dropdown.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/index.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/modal/modal-backdrop.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/modal/modal-dismiss-reasons.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/modal/modal-ref.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/modal/modal-stack.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/modal/modal-window.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/modal/modal.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/modal/modal.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/pagination/pagination-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/pagination/pagination.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/pagination/pagination.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/popover/popover-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/popover/popover.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/popover/popover.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/progressbar/progressbar-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/progressbar/progressbar.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/progressbar/progressbar.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/rating/rating-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/rating/rating.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/rating/rating.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/tabset/tabset-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/tabset/tabset.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/tabset/tabset.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/timepicker/ngb-time-adapter.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/timepicker/ngb-time.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/timepicker/timepicker-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/timepicker/timepicker.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/timepicker/timepicker.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/tooltip/tooltip-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/tooltip/tooltip.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/tooltip/tooltip.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/typeahead/highlight.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/typeahead/typeahead-config.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/typeahead/typeahead-window.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/typeahead/typeahead.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/typeahead/typeahead.module.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/util/accessibility/live.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/util/focus-trap.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/util/key.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/util/popup.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/util/positioning.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/util/scrollbar.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/util/triggers.js","webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/util/util.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,4C;;;;;;;;;;;;;;;;;;;;AChBqG;AAClF;AACU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,yCAAyC,IAAI;AAChF;AACA;AACA,gDAAgD;AAChD,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,2CAA2C,IAAI;AAClF;AACA;AACA,kDAAkD;AAClD,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,mBAAmB;AAC9E,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,wBAAwB,IAAI;AAC/D;AACA;AACA;AACA,sBAAsB,4DAAc;AACpC,gBAAgB,4DAAc;AAC9B,mBAAmB,4DAAc;AACjC,kBAAkB,4DAAc;AAChC,uBAAuB,6FAA+C,qBAAqB,IAAI;AAC/F,yBAAyB,+FAAiD,qBAAqB,IAAI;AACnG;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,yBAAyB,EAAE;AAC9E;AACA;AACA,mCAAmC,0EAA0E,2BAA2B,EAAE,EAAE;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,iFAAiF,EAAE;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,8DAA8D,wCAAwC,EAAE,wBAAwB,iBAAiB,EAAE;AACnJ;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,8FAA8F;AACzH,sJAAsJ,UAAU,oXAAoX,aAAa,4JAA4J,UAAU;AACvsB,iBAAiB,IAAI;AACrB;AACA;AACA,+CAA+C;AAC/C,SAAS,8EAA4B;AACrC,MAAM;AACN;AACA,oBAAoB,yFAA2C;AAC/D,uBAAuB,4DAAc;AACrC,8BAA8B,oFAAsC;AACpE,2BAA2B,4DAAc;AACzC,kBAAkB,4DAAc;AAChC,yBAAyB,6DAAe;AACxC;AACA;AACA,CAAC;AACO;AACR,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7KmB;AACI;AAC0C;AACpC;AACoC;AACpC;AAC7B;AACA;AACA;AACA;AACA,8CAA8C,SAAS,mHAAiE;AACxH;AACA,SAAS,uEAAyB,qJAAqG,IAAI;AAC3I;AACA;AACA,CAAC;AACO;AACR,4C;;;;;;;;;;;;;;;ACjBqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,wC;;;;;;;;;;;;;;;;ACjB2E;AAClD;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,uBAAuB;AAC1E;AACA,SAAS;AACT;AACA;AACA,wVAAwV;AACxV,iBAAiB,IAAI;AACrB;AACA;AACA,2CAA2C;AAC3C,SAAS,sEAAwB;AACjC,MAAM;AACN;AACA,yBAAyB,4DAAc;AACvC,kBAAkB,4DAAc;AAChC,mBAAmB,6DAAe;AAClC;AACA;AACA,CAAC;AACO;AACR,iC;;;;;;;;;;;;;;;;;;;;;;AClCmB;AACI;AACJ;AACM;AACN;AACM;AACzB;AACA;AACA;AACA,0CAA0C,SAAS,uGAAyD;AAC5G;AACA,SAAS,uEAAyB,2QAAsG,IAAI;AAC5I;AACA;AACA,CAAC;AACO;AACR,wC;;;;;;;;;;;;;;;;;;;;;;;;;;AChBmB;AACM;AACH;AACY;AACT;AACH;AACY;AAClC;AACA;AACA;AACA;AACA,4CAA4C,SAAS,6CAA6C;AAClG;AACA,SAAS,uEAAyB,sEAAsE,IAAI;AAC5G;AACA;AACA,CAAC;AACO;AACR,0C;;;;;;;;;;;;;;;;;AClBuC;AACX;AACH;AACzB;AACA;AACA,+FAAyC,oBAAoB,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,oBAAoB;AAChF,6DAA6D,qBAAqB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8CAA8C;AAC9C,SAAS,+DAAwB;AACjC,MAAM;AACN;AACA,sBAAsB,4DAAc;AACpC,0BAA0B,4DAAc;AACxC,4BAA4B,4DAAc;AAC1C;AACA;AACA,CAAC;AACO;AACR,oC;;;;;;;;;;;;;;;AClFoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B;AAC3B,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACO;AACR,iC;;;;;;;;;;;;;;;;;;ACb8D;AAClC;AACH;AACzB;AACA;AACA,+FAAyC,sBAAsB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA,0BAA0B,uBAAuB,EAAE;AACnD,oCAAoC,mCAAmC,EAAE;AACzE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,8DAA8D,2BAA2B;AACzF,yDAAyD,yBAAyB;AAClF,8DAA8D,oBAAoB;AAClF,+DAA+D,qBAAqB;AACpF;AACA;AACA;AACA;AACA,2DAA2D,4BAA4B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wCAAwC,EAAE;AACzF;AACA,iEAAiE,wCAAwC,+BAA+B,EAAE,EAAE;AAC5I;AACA,SAAS,wEAA0B,qCAAqC,kBAAkB,yCAAyC,IAAI;AACvI;AACA;AACA;AACA,kBAAkB,4DAAc;AAChC;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,0BAA0B,+CAA+C,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,0BAA0B,sBAAsB,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA,0BAA0B,sCAAsC,EAAE;AAClE;AACA;AACA,KAAK;AACL,kDAAkD,8BAA8B;AAChF,+CAA+C,iCAAiC;AAChF;AACA;AACA;AACA;AACA,qDAAqD,sCAAsC;AAC3F;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,2CAA2C;AAC3C,SAAS,uBAAuB;AAChC,SAAS,+DAAwB;AACjC,SAAS,iEAAmB;AAC5B,SAAS,kEAAoB;AAC7B,MAAM;AACN;AACA,kBAAkB,4DAAc;AAChC,mBAAmB,8EAAgC;AACnD,sBAAsB,iFAAmC;AACzD;AACA;AACA,CAAC;AACO;AACR,iC;;;;;;;;;;;;;;;AC9JqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,2C;;;;;;;;;;;;;;;;;;;ACrBqG;AACzE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,oCAAoC,IAAI;AAC3E;AACA;AACA,2CAA2C;AAC3C,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,gBAAgB,4DAAc;AAC9B;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA,qDAAqD,0CAA0C;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,qDAAqD,sFAAsF;AAC3I,qDAAqD,uFAAuF;AAC5I;AACA;AACA;AACA;AACA,iCAAiC,uEAAuE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,qBAAqB,EAAE;AACxF;AACA;AACA,oDAAoD,0CAA0C;AAC9F;AACA,+DAA+D,6BAA6B,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8CAA8C;AAC9C,SAAS,4EAA2B;AACpC,MAAM;AACN;AACA,oBAAoB,yFAA2C;AAC/D,sBAAsB,4DAAc;AACpC,sBAAsB,4DAAc;AACpC,kBAAkB,4DAAc;AAChC,sBAAsB,4DAAc;AACpC,0BAA0B,4DAAc;AACxC,kCAAkC,4DAAc;AAChD,sCAAsC,4DAAc;AACpD,mBAAmB,6DAAe;AAClC;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD;AACzD;AACA,oC;;;;;;;;;;;;;;;;;;;;;;;;ACxOmB;AACI;AACW;AACN;AACI;AACJ;AAC5B;AACA;AACA;AACA,6CAA6C,SAAS,gHAA+D;AACrH;AACA,SAAS,uEAAyB,uOAAmG,IAAI;AACzI;AACA;AACA,CAAC;AACO;AACR,2C;;;;;;;;;;;;;;;AChB2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,iBAAiB,IAAI;AACrB;AACA;AACA;AACA,uBAAuB,oFAAsC;AAC7D;AACA;AACA,CAAC;AACO;AACR,oC;;;;;;;;;;;;;;;;;;ACzBmB;AACG;AACA;AACtB;AACA;AACA;AACA,6CAA6C,SAAS,8CAA8C;AACpG;AACA,SAAS,uEAAyB,0IAAsD,IAAI;AAC5F;AACA;AACA,CAAC;AACO;AACR,2C;;;;;;;;;;;;;;;ACbA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACoB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,kBAAkB;AAClB;AACA;AACA,gEAAgE,oDAAoD;AACpH;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,kBAAkB;AAClB;AACA;AACA,gEAAgE,oDAAoD;AACpH;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,4C;;;;;;;;;;;;;;;ACzEA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACoB;AACI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4EAA4E;AACzH;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,mD;;;;;;;;;;;;;;;AC9BqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,6C;;;;;;;;;;;;;;;ACrBoD;AACpD;AACA;AACA;AACA,0DAA0D,mFAAmF;AAC7I;AACA,SAAS;AACT;AACA;AACA,2CAA2C,2BAA2B,oBAAoB,qBAAqB,0BAA0B,+BAA+B,gCAAgC,OAAO,qBAAqB,qBAAqB,OAAO;AAChQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iCAAiC,YAAY;AAC7C,iBAAiB,IAAI;AACrB;AACA;AACA;AACA,0BAA0B,4DAAc;AACxC,kBAAkB,4DAAc;AAChC,sBAAsB,4DAAc;AACpC,qBAAqB,4DAAc;AACnC,sBAAsB,4DAAc;AACpC;AACA;AACA,CAAC;AACO;AACR,+C;;;;;;;;;;;;;;;;AChCA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACuC;AACsC;AAC3D;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,kDAAkD,EAAE;AACvI;AACA;AACA;AACA;AACA,iFAAiF,yCAAyC;AAC1H,6EAA6E,qCAAqC;AAClH,4EAA4E,oCAAoC;AAChH;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,2DAA2D;AAC3D,SAAS,gCAAgC,+HAAmC,IAAI;AAChF,SAAS,kEAAkB;AAC3B,MAAM;AACN;AACA,CAAC;AACO;AACR,2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1D6J;AAClH;AACxB;AACD;AACM;AACS;AACN;AACJ;AACT;AACW;AACH;AACS;AACF;AACD;AAC5B;AACA;AACA,+FAAyC,2BAA2B,EAAE;AACtE;AACA;AACA;AACA;AACA,+FAAyC,2BAA2B,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,uCAAuC;AACvC,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,mEAAmE,qBAAqB;AACxF,oEAAoE,sBAAsB;AAC1F,4EAA4E,4BAA4B;AACxG;AACA,2EAA2E,4BAA4B;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa,mBAAmB;AACpD;AACA;AACA,oBAAoB,aAAa,+BAA+B;AAChE;AACA;AACA,oBAAoB,aAAa,8BAA8B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,qBAAqB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qLAAqE,yEAA+B,EAAE;AACtG,wCAAwC,sBAAsB,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mBAAmB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,kCAAkC,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,qDAAqD;AACrD,SAAS,2FAAgC;AACzC,SAAS,kEAAoB;AAC7B,SAAS,wEAA0B;AACnC,SAAS,iEAAmB;AAC5B,SAAS,gFAAkC;AAC3C,SAAS,8DAAgB;AACzB,SAAS,mFAA8B;AACvC,SAAS,oEAAqB;AAC9B,SAAS,mFAAwB;AACjC,SAAS,gCAAgC,gIAAkC,IAAI;AAC/E,MAAM;AACN;AACA,uBAAuB,4DAAc;AACrC,yBAAyB,4DAAc;AACvC,2BAA2B,4DAAc;AACzC,4BAA4B,4DAAc;AAC1C,0BAA0B,4DAAc;AACxC,qBAAqB,4DAAc;AACnC,qBAAqB,4DAAc;AACnC,wBAAwB,4DAAc;AACtC,yBAAyB,4DAAc;AACvC,uBAAuB,4DAAc;AACrC,0BAA0B,4DAAc;AACxC,6BAA6B,4DAAc;AAC3C,uBAAuB,4DAAc;AACrC,uBAAuB,4DAAc;AACrC,wBAAwB,6DAAe;AACvC,sBAAsB,6DAAe;AACrC,sBAAsB,4DAAc;AACpC;AACA;AACA,CAAC;AACO;AACR,4C;;;;;;;;;;;;;;;;;;;AC1TqB;AACU;AACT;AACH;AACL;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,6DAA6D;AAC7D,SAAS,kFAA8B;AACvC,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR,qD;;;;;;;;;;;;;;;;;AClE8D;AAC5C;AACU;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B,iBAAiB;AAC5C,2CAA2C,uBAAuB,OAAO,4CAA4C,0BAA0B,2BAA2B,2BAA2B,OAAO,uBAAuB,uBAAuB,2BAA2B,OAAO,oBAAoB,+BAA+B,6BAA6B,sBAAsB,OAAO,wBAAwB,sDAAsD,yBAAyB,OAAO,yDAAyD,oBAAoB,qBAAqB,OAAO,mBAAmB,wBAAwB,OAAO,gDAAgD,wBAAwB,OAAO;AACjuB,iSAAiS,+BAA+B,yPAAyP,eAAe;AACxkB,iBAAiB,IAAI;AACrB;AACA;AACA,yDAAyD;AACzD,SAAS,4EAA2B;AACpC,MAAM;AACN;AACA,yBAAyB,4DAAc;AACvC,mBAAmB,4DAAc;AACjC,0BAA0B,4DAAc;AACxC,6BAA6B,4DAAc;AAC3C,oBAAoB,6DAAe;AACnC;AACA;AACA,CAAC;AACO;AACR,iD;;;;;;;;;;;;;;;;;;ACnC0E;AACxD;AACE;AACQ;AAC5B;AACA;AACA;AACA;AACA;AACA,4EAA4E,iKAAoE;AAChJ,0EAA0E,iKAAoE;AAC9I;AACA,SAAS;AACT;AACA;AACA,kDAAkD,sBAAsB,6BAA6B,2BAA2B,oBAAoB,0BAA0B,4BAA4B,wBAAwB,OAAO;AACzO,2SAA2S,6BAA6B,4OAA4O,KAAK;AACzjB,iBAAiB,IAAI;AACrB;AACA;AACA,gEAAgE;AAChE,SAAS,4EAA2B;AACpC,MAAM;AACN;AACA,kBAAkB,4DAAc;AAChC,sBAAsB,4DAAc;AACpC,oBAAoB,4DAAc;AAClC,mBAAmB,4DAAc;AACjC,oBAAoB,6DAAe;AACnC;AACA;AACA,CAAC;AACO;AACR,wD;;;;;;;;;;;;;;;;;;ACjC0E;AAChD;AACR;AACU;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2CAA2C,6BAA6B,sBAAsB,4BAA4B,OAAO,kCAAkC,4BAA4B,sCAAsC,8BAA8B,sBAAsB,uBAAuB,4BAA4B,6BAA6B,mCAAmC,uCAAuC,OAAO,yCAAyC,qCAAqC,iCAAiC,4BAA4B,6BAA6B,OAAO,qBAAqB,6BAA6B,sBAAsB,2BAA2B,qBAAqB,yBAAyB,wBAAwB,kBAAkB,oBAAoB,qBAAqB,OAAO,2BAA2B,2BAA2B,kCAAkC,OAAO,yBAAyB,2BAA2B,yBAAyB,qBAAqB,sCAAsC,mBAAmB,OAAO,+BAA+B,0BAA0B,OAAO,0BAA0B,0BAA0B,qBAAqB,0BAA0B,2BAA2B,OAAO,iCAAiC,6BAA6B,sBAAsB,2BAA2B,qBAAqB,yBAAyB,OAAO;AAC97C,s+BAAs+B,uCAAuC,GAAG,cAAc;AAC9hC,iBAAiB,IAAI;AACrB;AACA;AACA,0DAA0D;AAC1D,SAAS,4EAA2B;AACpC,MAAM;AACN;AACA,kBAAkB,4DAAc;AAChC,sBAAsB,4DAAc;AACpC,oBAAoB,4DAAc;AAClC,wBAAwB,4DAAc;AACtC,0BAA0B,4DAAc;AACxC,0BAA0B,4DAAc;AACxC,yBAAyB,4DAAc;AACvC,sBAAsB,6DAAe;AACrC,oBAAoB,6DAAe;AACnC;AACA;AACA,CAAC;AACO;AACR,iD;;;;;;;;;;;;;;;;;;;;;;ACvCsB;AACJ;AACG;AACU;AACb;AACiK;AAClK;AACW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA,0BAA0B,0GAAmD,gCAAgC,EAAE,GAAG,EAAE;AACpH;AACA;AACA,KAAK;AACL;AACA,0BAA0B,0GAAmD,sBAAsB,EAAE,GAAG,EAAE;AAC1G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,+BAA+B;AAChE;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,iCAAiC;AAClE;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC,yBAAyB;AAC1D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC,2BAA2B;AAC5D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,kBAAkB;AAClE;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,uDAAuD;AACvD,SAAS,mEAAqB;AAC9B,SAAS,4EAA2B;AACpC,MAAM;AACN;AACA,CAAC;AACO;AACR,8C;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/RkB;AACE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qCAAqC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,gCAAgC,EAAE;AACzF;AACA;AACA;AACA,uDAAuD,gCAAgC,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B,mBAAmB,kBAAkB,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,wBAAwB;AACzD;AACA;AACA;AACA,wEAAwE,0CAA0C,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gGAAgG;AAChG;AACA,KAAK;AACL;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oCAAoC;AAC1D;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,yBAAyB,iCAAiC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,wCAAwC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE,uBAAuB,6DAA6D;AACpF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4EAA4E,yEAA+B,EAAE;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;;;;;;;;;;;;;AC3JA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C,iD;;;;;;;;;;;;;;;;;;;;;;;;;;ACRe;AAC2H;AAC9G;AACN;AACJ;AACa;AACM;AACX;AACI;AACL;AACG;AACJ;AACxB;AACA;AACA,+FAAyC,sBAAsB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA,uCAAuC,qCAAqC,EAAE;AAC9E,+EAA+E,oCAAoC,EAAE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2CAA2C;AACnF,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kFAAwC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6IAA6I,6CAA6C,EAAE;AAC5L;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB,EAAE;AACjE,uCAAuC,6CAA6C,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA,0DAA0D,uCAAuC;AACjG,oEAAoE,0BAA0B;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,oBAAoB;AAClF,+DAA+D,qBAAqB;AACpF,sEAAsE,qCAAqC;AAC3G,iEAAiE,2CAA2C;AAC5G,2DAA2D,qHAA2E;AACtI;AACA,SAAS;AACT;AACA;AACA;AACA,2CAA2C,kCAAkC,+BAA+B,8BAA8B,OAAO,qBAAqB,6BAA6B,OAAO,sBAAsB,yBAAyB,2CAA2C,6BAA6B,OAAO,iCAAiC,6BAA6B,OAAO,0BAA0B,0BAA0B,qBAAqB,0BAA0B,2BAA2B,OAAO,uFAAuF,2BAA2B,OAAO,iEAAiE,2BAA2B,OAAO,oDAAoD,8BAA8B,OAAO,qDAAqD,6BAA6B,OAAO,kFAAkF,+BAA+B,OAAO,sBAAsB,6BAA6B,sBAAsB,OAAO;AACxmC,o3CAAo3C,uCAAuC,GAAG,cAAc;AAC56C;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,+FAAoC;AAC7C,SAAS,kFAA8B;AACvC,SAAS,mEAAqB;AAC9B,SAAS,6EAA2B;AACpC,SAAS,gFAA6B;AACtC,SAAS,yEAA2B;AACpC,SAAS,kEAAoB;AAC7B,SAAS,mFAAwB;AACjC,SAAS,8DAAgB;AACzB,MAAM;AACN;AACA,yBAAyB,4DAAc;AACvC,2BAA2B,4DAAc;AACzC,4BAA4B,4DAAc;AAC1C,0BAA0B,4DAAc;AACxC,qBAAqB,4DAAc;AACnC,qBAAqB,4DAAc;AACnC,wBAAwB,4DAAc;AACtC,yBAAyB,4DAAc;AACvC,0BAA0B,4DAAc;AACxC,6BAA6B,4DAAc;AAC3C,uBAAuB,4DAAc;AACrC,sBAAsB,6DAAe;AACrC,oBAAoB,6DAAe;AACnC;AACA;AACA,CAAC;AACO;AACR,sC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChMmB;AACc;AACX;AACE;AACS;AACC;AACL;AACE;AACuB;AACV;AACgB;AACb;AACP;AACV;AACN;AACK;AACP;AACY;AACG;AACJ;AACF;AACG;AACM;AACV;AACF;AACH;AACM;AACE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mJAAuD;AACxE,iBAAiB,mKAAiE;AAClF,iBAAiB,+LAAuE;AACxF,iBAAiB,kLAA0D;AAC3E;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACO;AACR,6C;;;;;;;;;;;;;;;;ACxDA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACqB;AACD;AACF;AACnB;AACA;AACA;AACA;AACA;AACA,6DAA6D,UAAU;AACvE,wDAAwD,gDAAgD;AACxG,+DAA+D,UAAU;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,mCAAmC;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAA8D;AACnF;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,8C;;;;;;;;;;;;;;;;AC7FA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AAC0B;AACT;AACG;AACrgCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA,+GAAqE;AACrE;AACA;AACA,8DAA8D,uCAAuC;AACrG;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,sD;;;;;;;;;;;;;;;;;AC3KA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACiC;AACP;AACT;AACG;AACryBAAyB;AACpD,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA,+GAAqE;AACrE;AACA;AACA,iEAAiE,uCAAuC;AACxG;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,yD;;;;;;;;;;;;;;;;;ACnPA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACiB;AACG;AACD;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA,iEAAiE,UAAU;AAC3E,4DAA4D,gDAAgD;AAC5G,mEAAmE,UAAU;AAC7E;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2DAA2D,+BAA+B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,wC;;;;;;;;;;;;;;;ACnGA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACwC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR,qD;;;;;;;;;;;;;AC5DA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,SAAS,qDAAqD;AAC5G,8CAA8C,sDAAsD;AACpG;AACA,CAAC;AACO;AACR,oC;;;;;;;;;;;;;;;ACjDqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,2C;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACoI;AAClH;AACO;AACE;AACA;AACD;AACb;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,+DAA+D;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B;AAC3B,iBAAiB,IAAI;AACrB;AACA;AACA,kDAAkD;AAClD,SAAS,gCAAgC,kJAA8C,oBAAoB,EAAE,KAAK,IAAI;AACtH,SAAS,kEAAoB;AAC7B,SAAS,iEAAmB;AAC5B,MAAM;AACN;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,+DAA+D;AAChI;AACA,SAAS;AACT;AACA,2BAA2B;AAC3B,iBAAiB,IAAI;AACrB;AACA;AACA,oDAAoD;AACpD,SAAS,gCAAgC,kJAA8C,oBAAoB,EAAE,KAAK,IAAI;AACtH,SAAS,kEAAoB;AAC7B,MAAM;AACN;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,wBAAwB;AAClF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iCAAiC,wHAAkE,0BAA0B,EAAE,GAAG;AAClI,iBAAiB,IAAI;AACrB;AACA;AACA,oDAAoD;AACpD,SAAS,gCAAgC,kJAA8C,oBAAoB,EAAE,KAAK,IAAI;AACtH,SAAS,kEAAoB;AAC7B,MAAM;AACN;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,uBAAuB,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kMAAoF,gBAAgB,EAAE,qFAA8B,6EAAmC,EAAE;AACzK;AACA,kMAAoF,gBAAgB,EAAE,qFAA8B,2CAA2C,EAAE;AACjL,8GAAiE,uCAAuC,sBAAsB,EAAE,EAAE,EAAE;AACpI,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,sCAAsC;AAC3F,kEAAkE,yCAAyC;AAC3G,gEAAgE,4DAA4D;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,4DAA4D,6BAA6B,EAAE,IAAI;AAClI;AACA;AACA,8CAA8C;AAC9C,SAAS,yEAA2B;AACpC,SAAS,4EAA2B;AACpC,SAAS,gCAAgC,gIAAkC,IAAI;AAC/E,SAAS,8DAAgB;AACzB,MAAM;AACN;AACA,mBAAmB,6FAA+C;AAClE,qBAAqB,+FAAiD;AACtE,uBAAuB,4DAAc;AACrC,mBAAmB,6EAA+B;AAClD,uBAAuB,4DAAc;AACrC,wBAAwB,6DAAe;AACvC;AACA;AACA,CAAC;AACO;AACR,oC;;;;;;;;;;;;;;;;;;;;;;;;;ACzQmB;AAC0D;AACjD;AAC8B;AAC9B;AAC5B;AACA;AACA;AACA;AACA,6CAA6C,SAAS,gHAA+D;AACrH;AACA,SAAS,uEAAyB,0EAA0E,IAAI;AAChH;AACA;AACA,CAAC;AACO;AACR,2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBmB;AACU;AACJ;AACE;AACC;AACA;AACE;AACF;AACH;AACK;AACH;AACI;AACL;AACA;AACI;AACH;AACE;AAC4E;AACtD;AACI;AACe;AAC7B;AACgM;AAC7K;AACyB;AACnB;AACT;AACY;AACf;AACoC;AACR;AACzB;AACoB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA,qCAAqC,SAAS,2BAA2B;AACzE;AACA,SAAS,uEAAyB,6CAA6C,IAAI;AACnF;AACA;AACA,CAAC;AACO;AACR,iC;;;;;;;;;;;;;;;AClE2B;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,iBAAiB,IAAI;AACrB;AACA;AACA;AACA,2BAA2B,4DAAc;AACzC;AACA;AACA,CAAC;AACO;AACR,0C;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA,CAAC,kDAAkD;AACnD,iD;;;;;;;;;;;;;;ACLA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,CAAC;AACD;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,uBAAuB,EAAE;AACnG;AACA;AACA;AACA,SAAS;AACT,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACQ;AACR,qC;;;;;;;;;;;;;;;;;;;;;;ACtJmB;AAC2E;AACzE;AACS;AACV;AACO;AACF;AACa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,2BAA2B;AAC1E,iDAAiD,6BAA6B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAqD,wFAA6C;AAClG;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,gDAAgD;AAChD,SAAS,sEAAwB;AACjC,SAAS,gEAAkB;AAC3B,SAAS,gFAAkC;AAC3C,SAAS,gCAAgC,gIAAkC,IAAI;AAC/E,SAAS,mEAAmB;AAC5B,MAAM;AACN;AACA,CAAC;AACO;AACR,uC;;;;;;;;;;;;;;;;;;AC9GmB;AAC6D;AAClD;AACP;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gCAAgC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,iDAAiD;AACjD,SAAS,gCAAgC,gIAAkC,IAAI;AAC/E,SAAS,kEAAoB;AAC7B,SAAS,iEAAmB;AAC5B,MAAM;AACN;AACA,4BAA4B,4DAAc;AAC1C,sBAAsB,4DAAc;AACpC,sBAAsB,4DAAc;AACpC,sBAAsB,4DAAc;AACpC,kBAAkB,4DAAc;AAChC,yBAAyB,4DAAc;AACvC,0BAA0B,iFAAmC;AAC7D;AACA;AACA,CAAC;AACO;AACR,wC;;;;;;;;;;;;;;;;AChFyD;AACjC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,2CAA2C;AAC3C,SAAS,gFAAkC;AAC3C,SAAS,gEAAkB;AAC3B,SAAS,oEAAuB;AAChC,MAAM;AACN;AACA,CAAC;AACO;AACR,iC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CmB;AACQ;AACF;AACD;AACL;AACC;AACD;AACmB;AACR;AAC9B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACO;AACR,wC;;;;;;;;;;;;;;;ACzBqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,6C;;;;;;;;;;;;;;;;;ACtB0E;AACtC;AACN;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,sBAAsB;AAC7E,mDAAmD,mCAAmC;AACtF,gEAAgE,+BAA+B;AAC/F,8DAA8D,8BAA8B;AAC5F,gEAAguBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,uBAAuB;AAClD,2eAA2e,OAAO,sbAAsb,iZAAiZ,YAAY,keAAke,2ZAA2Z,OAAO;AACzsE,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,gFAA6B;AACtC,MAAM;AACN;AACA,sBAAsB,4DAAc;AACpC,2BAA2B,4DAAc;AACzC,4BAA4B,4DAAc;AAC1C,sBAAsB,4DAAc;AACpC,oBAAoB,4DAAc;AAClC,4BAA4B,4DAAc;AAC1C,qBAAqB,4DAAc;AACnC,kBAAkB,4DAAc;AAChC,sBAAsB,4DAAc;AACpC,wBAAwB,6DAAe;AACvC,kBAAkB,4DAAc;AAChC;AACA;AACA,CAAC;AACO;AACR,sC;;;;;;;;;;;;;;;;;;;;;;ACvLmB;AACI;AACC;AACM;AACN;AACM;AAC9B;AACA;AACA;AACA,+CAA+C,SAAS,sHAAmE;AAC3H;AACA,SAAS,uEAAyB,2NAAmF,IAAI;AACzH;AACA;AACA,CAAC;AACO;AACR,6C;;;;;;;;;;;;;;;AChBqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,0C;;;;;;;;;;;;;;;;;;;;AClB0K;AAC/I;AACA;AACJ;AACI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qGAAqG,OAAO;AAC5G,iGAAiG,kBAAkB,0BAA0B,OAAO,+EAA+E,kBAAkB,OAAO,iFAAiF,mBAAmB,mBAAmB,OAAO,qEAAqE,iBAAiB,yBAAyB,OAAO,6EAA6E,mBAAmB,OAAO,mFAAmF,kBAAkB,sBAAsB,OAAO;AACztB,iBAAiB,IAAI;AACrB;AACA;AACA,mDAAmD;AACnD,SAAS,kEAAoB;AAC7B,SAAS,iEAAmB;AAC5B,MAAM;AACN;AACA,uBAAuB,4DAAc;AACrC,mBAAmB,4DAAc;AACjC,gBAAgB,4DAAc;AAC9B,0BAA0B,4DAAc;AACxiBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,mDAAmD,IAAI;AAC1F;AACA;AACA,6CAA6C;AAC7C,SAAS,kEAAoB;AAC7B,SAAS,iEAAmB;AAC5B,SAAS,gEAAkB;AAC3B,SAAS,gFAAkC;AAC3C,SAAS,wEAA0B;AACnC,SAAS,0EAA0B;AACnC,SAAS,8DAAgB;AACzB,MAAM;AACN;AACA,wBAAwB,4DAAc;AACtC,0BAA0B,4DAAc;AACxC,uBAAuB,4DAAc;AACrC,sBAAsB,4DAAc;AACpC,uBAAuB,4DAAc;AACrC,4BAA4B,4DAAc;AAC1C,0BAA0B,4DAAc;AACxC,mBAAmB,6DAAe;AAClC,oBAAoB,6DAAe;AACnC;AACA;AACA,CAAC;AACO;AACR,mC;;;;;;;;;;;;;;;;;;;;;AC1MmB;AACoB;AACZ;AACN;AACM;AAC3B;AACA;AACA;AACA,4CAA4C,SAAS,6GAA6D;AAClH;AACA,SAAS,uEAAyB,+QAA2G,IAAI;AACjJ;AACA;AACA,CAAC;AACO;AACR,0C;;;;;;;;;;;;;;;ACfqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,8C;;;;;;;;;;;;;;;;;ACnBoD;AAC1B;AACK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iGAA8C;AACnG,4DAA4D,yCAAyC;AACrG;AACA,SAAS;AACT;AACA;AACA,0HAA0H,6BAA6B,4CAA4C,6CAA6C,+NAA+N,mBAAmB;AACle,iBAAiB,IAAI;AACrB;AACA;AACA,iDAAiD;AACjD,SAAS,kFAA8B;AACvC,MAAM;AACN;AACA,iBAAiB,4DAAc;AAC/B,sBAAsB,4DAAc;AACpC,qBAAqB,4DAAc;AACnC,uBAAuB,4DAAc;AACrC,kBAAkB,4DAAc;AAChC,mBAAmB,4DAAc;AACjC,oBAAoB,4DAAc;AAClC;AACA;AACA,CAAC;AACO;AACR,uC;;;;;;;;;;;;;;;;;;;;;;AC5CmB;AACI;AACE;AACM;AACN;AACM;AAC/B;AACA;AACA;AACA,gDAAgD,SAAS,yHAAqE;AAC9H;AACA,SAAS,uEAAyB,+NAAqF,IAAI;AAC3H;AACA;AACA,CAAC;AACO;AACR,8C;;;;;;;;;;;;;;;AChBqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,yC;;;;;;;;;;;;;;;;;;;AClBoI;AAC1G;AACU;AACtB;AACc;AAC5B;AACA;AACA,+FAAyC,kBAAkB,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA;AACA,qDAAqD,8CAA8C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE,wDAAwD,iEAAiE;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB,mBAAmB,UAAU,oBAAoB,EAAE,EAAE;AAC5G;AACA;AACA,0DAA0D,oBAAoB;AAC9E,2DAA2D,qBAAqB;AAChF;AACA;AACA;AACA;AACA,kEAAkE,4BAA4B;AAC9F;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kDAAkD,EAAE;AAC7G;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,yEAAyE,wBAAwB,YAAY,IAAI,qHAAqH,gCAAgC;AACtQ;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,4CAA4C;AAC5C,SAAS,wEAAyB;AAClC,SAAS,yEAA2B;AACpC,MAAM;AACN;AACA,iBAAiB,4DAAc;AAC/B,kBAAkB,4DAAc;AAChC,sBAAsB,4DAAc;AACpC,wBAAwB,4DAAc;AACtC,0BAA0B,4DAAc,GAAG,uIAA2C;AACtF,mBAAmB,6DAAe;AAClC,mBAAmB,6DAAe;AAClC,wBAAwB,6DAAe;AACvC;AACA;AACA,CAAC;AACO;AACR,kC;;;;;;;;;;;;;;;;;;;;;;AC3JmB;AACI;AACG;AACN;AACA;AACM;AAC1B;AACA;AACA;AACA,2CAA2C,SAAS,0GAA2D;AAC/G;AACA,SAAS,uEAAyB,2MAA2E,IAAI;AACjH;AACA;AACA,CAAC;AACO;AACR,yC;;;;;;;;;;;;;;;AChBqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,yC;;;;;;;;;;;;;;;;;;;AClBqG;AAC3E;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,uCAAuC,IAAI;AAC9E;AACA;AACA,8CAA8C;AAC9C,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,yCAAyC,IAAI;AAChF;AACA;AACA,gDAAgD;AAChD,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,mBAAmB;AAC9E,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,sBAAsB,IAAI;AAC7D;AACA;AACA;AACA,gBAAgB,4DAAc;AAC9B,mBAAmB,4DAAc;AACjC,sBAAsB,4DAAc;AACpC,uBAAuB,2FAA6C,qBAAqB,IAAI;AAC7F,yBAAyB,6FAA+C,qBAAqB,IAAI;AACjG;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+EAA+E,2BAA2B,EAAE,EAAE;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,sBAAsB,EAAE;AAClF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mpBAAmpB,WAAW,sPAAsP,uCAAuC,+IAA+I,QAAQ;AACllC,iBAAiB,IAAI;AACrB;AACA;AACA,4CAA4C;AAC5C,SAAS,wEAAyB;AAClC,MAAM;AACN;AACA,kBAAkB,uFAAyC;AAC3D,sBAAsB,4DAAc;AACpC,2BAA2B,4DAAc;AACzC,qBAAqB,4DAAc;AACnC,yBAAyB,4DAAc;AACvC,kBAAkB,4DAAc;AAChC,uBAAuB,6DAAe;AACtC;AACA;AACA,CAAC;AACO;AACR,kC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjKmB;AACI;AACiC;AAC9B;AAC8B;AAC9B;AAC1B;AACA;AACA;AACA;AACA,2CAA2C,SAAS,0GAA2D;AAC/G;AACA,SAAS,uEAAyB,+IAA+F,IAAI;AACrI;AACA;AACA,CAAC;AACO;AACR,yC;;;;;;;;;;;;;;;;ACjBA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACoB;AACD;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,kBAAkB;AAClB;AACA;AACA;AACA,aAAa,+IAA4F;AACzG;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,kBAAkB;AAClB;AACA;AACA;AACA,aAAa,+IAA4F;AACzG;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,4C;;;;;;;;;;;;;;;AChF8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA,8CAA8C,+EAA+E;AAC7H;AACA,CAAC;AACO;AACR,oC;;;;;;;;;;;;;;;ACrDqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,6C;;;;;;;;;;;;;;;;;;;;ACxBuC;AACX;AACa;AACvB;AACY;AACL;AACzB;AACA;AACA,+FAAyC,sBAAsB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,oBAAoB;AAClF,+DAA+D,qBAAqB;AACpF,sEAAsE,4BAA4B;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,4EAAyB;AACtF,8DAA8D,SAAS,sFAAsF;AAC7J,yDAAyD,SAAS,oEAAoE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA;AACA;AACA,wDAAwD,8EAA8E;AACtI;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6CAA6C,wBAAwB,OAAO,iBAAiB,6BAA6B,sBAAsB,+BAA+B,4BAA4B,OAAO,iCAAiC,mBAAmB,OAAO,wEAAwE,6BAA6B,sBAAsB,mCAAmC,+BAA+B,+BAA+B,4BAA4B,kCAAkC,sCAAsC,OAAO,wBAAwB,mBAAmB,2BAA2B,OAAO,0BAA0B,4BAA4B,wCAAwC,oBAAoB,8BAA8B,uBAAuB,qBAAqB,2BAA2B,oBAAoB,kCAAkC,0CAA0C,sCAAsC,+BAA+B,sBAAsB,OAAO,gCAAgC,mBAAmB,0CAA0C,sCAAsC,kCAAkC,OAAO,eAAe,2BAA2B,OAAO;AACvxC,g1IAAg1I;AACh1I;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,gFAA6B;AACtC,SAAS,0EAAwB;AACjC,MAAM;AACN;AACA,sBAAsB,4DAAc;AACpC,sBAAsB,4DAAc;AACpC,qBAAqB,4DAAc;AACnC,sBAAsB,4DAAc;AACpC,wBAAwB,4DAAc;AACtC,wBAAwB,4DAAc;AACtC,4BAA4B,4DAAc;AAC1C,kBAAkB,4DAAc;AAChC;AACA;AACA,CAAC;AACO;AACR,sC;;;;;;;;;;;;;;;;;;;;;;;;;ACvImB;AACI;AACC;AACM;AACiB;AACvB;AACM;AACL;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iGAA8C,8JAA0D;AACxG;AACA;AACA;AACA,SAAS,uEAAyB,2NAAmF,IAAI;AACzH;AACA;AACA,CAAC;AACO;AACR,6C;;;;;;;;;;;;;;;ACvBqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,0C;;;;;;;;;;;;;;;;;;;;AClB0K;AAC/I;AACA;AACJ;AACI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iGAAiG,iCAAiC,OAAO,+EAA+E,kBAAkB,OAAO,iFAAiF,mBAAmB,sBAAsB,OAAO,qEAAqE,gCAAgC,OAAO,6EAA6E,oBAAoB,OAAO,mFAAmF,kBAAkB,uBAAuB,OAAO;AACzsB,iBAAiB,IAAI;AACrB;AACA;AACA,mDAAmD;AACnD,SAAS,kEAAoB;AAC7B,SAAS,iEAAmB;AAC5B,MAAM;AACN;AACA,uBAAuB,4DAAc;AACrC,gBAAgB,4DAAc;AAC9B;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0BAA0B,yBAAyB,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,mDAAmD,IAAI;AAC1F;AACA;AACA,6CAA6C;AAC7C,SAAS,kEAAoB;AAC7B,SAAS,iEAAmB;AAC5B,SAAS,gEAAkB;AAC3B,SAAS,gFAAkC;AAC3C,SAAS,wEAA0B;AACnC,SAAS,0EAA0B;AACnC,SAAS,8DAAgB;AACzB,MAAM;AACN;AACA,uBAAuB,4DAAc;AACrC,sBAAsB,4DAAc;AACpC,uBAAuB,4DAAc;AACrC,4BAA4B,4DAAc;AAC1C,mBAAmB,6DAAe;AAClC,oBAAoB,6DAAe;AACnC,wBAAwB,4DAAc;AACtC;AACA;AACA,CAAC;AACO;AACR,mC;;;;;;;;;;;;;;;;;;;;;ACvMmB;AACoB;AACZ;AACA;AACN;AACrB;AACA;AACA;AACA,4CAA4C,SAAS,6GAA6D;AAClH;AACA,SAAS,uEAAyB,+QAA2G,IAAI;AACjJ;AACA;AACA,CAAC;AACO;AACR,0C;;;;;;;;;;;;;;;;ACfoD;AACnB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yDAAyD,gBAAgB,KAAK,MAAM,wCAAwC,MAAM;AAClI;AACA;AACA,oDAAoD,0BAA0B,OAAO;AACrF,iBAAiB,IAAI;AACrB;AACA;AACA;AACA,4BAA4B,4DAAc;AAC1C,oBAAoB,4DAAc;AAClC,kBAAkB,4DAAc;AAChC;AACA;AACA,CAAC;AACO;AACR,qC;;;;;;;;;;;;;;;AC1CqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,CAAC;AACO;AACR,4C;;;;;;;;;;;;;;;;ACnB8D;AAC3C;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,oEAAoE;AAC9H,0DAA0D,qCAAqC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,6BAA6B;AACxF,yDAAyD,oBAAoB;AAC7E;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,iEAAiE;AAC5F,koBAAkoB,iDAAiD;AACnrB,iBAAiB,IAAI;AACrB;AACA;AACA;AACA,gBAAgB,4DAAc;AAC9B,wBAAwB,4DAAc;AACtC,qBAAqB,4DAAc;AACnC,kBAAkB,4DAAc;AAChC,uBAAuB,4DAAc;AACrC,4BAA4B,4DAAc;AAC1C,yBAAyB,gFAAkC;AAC3D,+BAA+B,sFAAwC;AACvE;AACA;AACA,CAAC;AACO;AACR,4C;;;;;;;;;;;;;;;;;;;;;;;;;AC9E+J;AACnI;AACS;AACV;AACE;AACN;AACO;AAChB;AACC;AACc;AACC;AAC9B;AACA;AACA,+FAAyC,qBAAqB,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,iGAAyC,4BAA4B,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wIAAgF,0BAA0B,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,qBAAqB;AAClF,8DAA8D,sBAAsB;AACpF,0DAA0D,wDAAwD;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,8CAA8C,EAAE;AAC9H,sFAAsF,0CAA0C,EAAE;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAA4C,yBAAyB,EAAE,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,+CAA+C;AAC/C,SAAS,kEAAoB;AAC7B,SAAS,wEAA0B;AACnC,SAAS,iEAAmB;AAC5B,SAAS,gEAAkB;AAC3B,SAAS,gFAAkC;AAC3C,SAAS,8EAA4B;AACrC,SAAS,8DAAgB;AACzB,SAAS,uEAAc;AACvB,MAAM;AACN;AACA,0BAA0B,4DAAc;AACxC,uBAAuB,4DAAc;AACrC,sBAAsB,4DAAc;AACpC,wBAAwB,4DAAc;AACtC,4BAA4B,4DAAc;AAC1C,0BAA0B,4DAAc;AACxC,6BAA6B,4DAAc;AAC3C,4BAA4B,4DAAc;AAC1C,sBAAsB,4DAAc;AACpC,uBAAuB,4DAAc;AACrC,wBAAwB,6DAAe;AACvC;AACA;AACA,CAAC;AACO;AACR,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzSmB;AACI;AACA;AACM;AACN;AACM;AAC4B;AAClC;AACM;AACA;AACN;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,8JAAmD,gLAA8D;AACjH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACO;AACR,4C;;;;;;;;;;;;;;;;;;AC/B6C;AAC1B;AACnB;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sCAAsC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,uCAAuC;AACvC,SAAS,gCAAgC,gIAAkC,IAAI;AAC/E,SAAS,gCAAgC,uFAAyC,IAAI;AACtF,MAAM;AACN;AACA,CAAC;AACO;AACR,gC;;;;;;;;;;;;;;;;;ACnDoB;AAC6B;AACnC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yQAA8G,iBAAiB,EAAE;AACjI;AACA;AACA,4KAA8D,sEAA4B,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uQAAkG,eAAe,EAAE;AACnH,kDAAkD,mCAAmC,EAAE;AACvF;AACA,sC;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kBAAkB;AACnB,+B;;;;;;;;;;;;;;;;ACfsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR,iC;;;;;;;;;;;;;;AClDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,yCAAyC;AACtG,+DAA+D,yCAAyC;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAcuBAAuB,EAAE;AACnF;AACA;AACA;AACA;AACA,mDAAmD,qCAAqC,EAAE;AAC1F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qBAAqB,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU,2BAA2B,EAAE,EAAE;AAClF;AACA,uC;;;;;;;;;;;;;;;;;ACtS6B;AACV;AACnB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uEAAuE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAqD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAmB;AAC5B;AACA;AACA,4CAA4C;AAC5C,SAAS,gCAAgC,gIAAkC,IAAI;AAC/E,MAAM;AACN;AACA,CAAC;AACO;AACA;AACR,qC;;;;;;;;;;;;;;;;AChHA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,0DAA0D;AACxG;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA,6BAA6B,2BAA2B;AACxD;AACA;AACA;AACA;AACA,8EAA8E,2BAA2B,EAAE;AAC3G;AACA;AACA,KAAK;AACL,uEAAuE,+BAA+B,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,6CAA6C,wBAAwB,EAAE,EAAE;AACjG;AACQ;AACR,oC;;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,gC","file":"bs-component-bs-component-module~customer-layout-customer-layout-module~dashboard-dashboard-module~h~153f1f5c.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbAccordion component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the accordions used in the application.\r\n */\r\nvar NgbAccordionConfig = /** @class */ (function () {\r\n    function NgbAccordionConfig() {\r\n        this.closeOthers = false;\r\n    }\r\n    NgbAccordionConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbAccordionConfig;\r\n}());\r\nexport { NgbAccordionConfig };\r\n//# sourceMappingURL=accordion-config.js.map","import { Component, ContentChildren, Directive, EventEmitter, Input, Output, QueryList, TemplateRef } from '@angular/core';\r\nimport { isString } from '../util/util';\r\nimport { NgbAccordionConfig } from './accordion-config';\r\nvar nextId = 0;\r\n/**\r\n * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.\r\n */\r\nvar NgbPanelTitle = /** @class */ (function () {\r\n    function NgbPanelTitle(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n    NgbPanelTitle.decorators = [\r\n        { type: Directive, args: [{ selector: 'ng-template[ngbPanelTitle]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbPanelTitle.ctorParameters = function () { return [\r\n        { type: TemplateRef, },\r\n    ]; };\r\n    return NgbPanelTitle;\r\n}());\r\nexport { NgbPanelTitle };\r\n/**\r\n * This directive must be used to wrap accordion panel content.\r\n */\r\nvar NgbPanelContent = /** @class */ (function () {\r\n    function NgbPanelContent(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n    NgbPanelContent.decorators = [\r\n        { type: Directive, args: [{ selector: 'ng-template[ngbPanelContent]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbPanelContent.ctorParameters = function () { return [\r\n        { type: TemplateRef, },\r\n    ]; };\r\n    return NgbPanelContent;\r\n}());\r\nexport { NgbPanelContent };\r\n/**\r\n * The NgbPanel directive represents an individual panel with the title and collapsible\r\n * content\r\n */\r\nvar NgbPanel = /** @class */ (function () {\r\n    function NgbPanel() {\r\n        /**\r\n           *  A flag determining whether the panel is disabled or not.\r\n           *  When disabled, the panel cannot be toggled.\r\n           */\r\n        this.disabled = false;\r\n        /**\r\n           *  An optional id for the panel. The id should be unique.\r\n           *  If not provided, it will be auto-generated.\r\n           */\r\n        this.id = \"ngb-panel-\" + nextId++;\r\n        /**\r\n           * A flag telling if the panel is currently open\r\n           */\r\n        this.isOpen = false;\r\n    }\r\n    NgbPanel.prototype.ngAfterContentChecked = function () {\r\n        // We are using @ContentChildren instead of @ContantChild as in the Angular version being used\r\n        // only @ContentChildren allows us to specify the {descendants: false} option.\r\n        // Without {descendants: false} we are hitting bugs described in:\r\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\r\n        this.titleTpl = this.titleTpls.first;\r\n        this.contentTpl = this.contentTpls.first;\r\n    };\r\n    NgbPanel.decorators = [\r\n        { type: Directive, args: [{ selector: 'ngb-panel' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbPanel.propDecorators = {\r\n        \"disabled\": [{ type: Input },],\r\n        \"id\": [{ type: Input },],\r\n        \"title\": [{ type: Input },],\r\n        \"type\": [{ type: Input },],\r\n        \"titleTpls\": [{ type: ContentChildren, args: [NgbPanelTitle, { descendants: false },] },],\r\n        \"contentTpls\": [{ type: ContentChildren, args: [NgbPanelContent, { descendants: false },] },],\r\n    };\r\n    return NgbPanel;\r\n}());\r\nexport { NgbPanel };\r\n/**\r\n * The NgbAccordion directive is a collection of panels.\r\n * It can assure that only one panel can be opened at a time.\r\n */\r\nvar NgbAccordion = /** @class */ (function () {\r\n    function NgbAccordion(config) {\r\n        /**\r\n           * An array or comma separated strings of panel identifiers that should be opened\r\n           */\r\n        this.activeIds = [];\r\n        /**\r\n           * Whether the closed panels should be hidden without destroying them\r\n           */\r\n        this.destroyOnHide = true;\r\n        /**\r\n           * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details\r\n           */\r\n        this.panelChange = new EventEmitter();\r\n        this.type = config.type;\r\n        this.closeOtherPanels = config.closeOthers;\r\n    }\r\n    /**\r\n     * Programmatically toggle a panel with a given id.\r\n     */\r\n    /**\r\n       * Programmatically toggle a panel with a given id.\r\n       */\r\n    NgbAccordion.prototype.toggle = /**\r\n       * Programmatically toggle a panel with a given id.\r\n       */\r\n    function (panelId) {\r\n        var panel = this.panels.find(function (p) { return p.id === panelId; });\r\n        if (panel && !panel.disabled) {\r\n            var defaultPrevented_1 = false;\r\n            this.panelChange.emit({ panelId: panelId, nextState: !panel.isOpen, preventDefault: function () { defaultPrevented_1 = true; } });\r\n            if (!defaultPrevented_1) {\r\n                panel.isOpen = !panel.isOpen;\r\n                if (this.closeOtherPanels) {\r\n                    this._closeOthers(panelId);\r\n                }\r\n                this._updateActiveIds();\r\n            }\r\n        }\r\n    };\r\n    NgbAccordion.prototype.ngAfterContentChecked = function () {\r\n        var _this = this;\r\n        // active id updates\r\n        if (isString(this.activeIds)) {\r\n            this.activeIds = this.activeIds.split(/\\s*,\\s*/);\r\n        }\r\n        // update panels open states\r\n        this.panels.forEach(function (panel) { return panel.isOpen = !panel.disabled && _this.activeIds.indexOf(panel.id) > -1; });\r\n        // closeOthers updates\r\n        if (this.activeIds.length > 1 && this.closeOtherPanels) {\r\n            this._closeOthers(this.activeIds[0]);\r\n            this._updateActiveIds();\r\n        }\r\n    };\r\n    NgbAccordion.prototype._closeOthers = function (panelId) {\r\n        this.panels.forEach(function (panel) {\r\n            if (panel.id !== panelId) {\r\n                panel.isOpen = false;\r\n            }\r\n        });\r\n    };\r\n    NgbAccordion.prototype._updateActiveIds = function () {\r\n        this.activeIds = this.panels.filter(function (panel) { return panel.isOpen && !panel.disabled; }).map(function (panel) { return panel.id; });\r\n    };\r\n    NgbAccordion.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-accordion',\r\n                    exportAs: 'ngbAccordion',\r\n                    host: { 'class': 'accordion', 'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels' },\r\n                    template: \"\\n    <ng-template ngFor let-panel [ngForOf]=\\\"panels\\\">\\n      <div class=\\\"card\\\">\\n        <div role=\\\"tab\\\" id=\\\"{{panel.id}}-header\\\" [class]=\\\"'card-header ' + (panel.type ? 'bg-'+panel.type: type ? 'bg-'+type : '')\\\">\\n          <h5 class=\\\"mb-0\\\">\\n            <button class=\\\"btn btn-link\\\" (click)=\\\"!!toggle(panel.id)\\\" [disabled]=\\\"panel.disabled\\\" [class.collapsed]=\\\"panel.isOpen\\\"\\n              [attr.aria-expanded]=\\\"panel.isOpen\\\" [attr.aria-controls]=\\\"panel.id\\\">\\n              {{panel.title}}<ng-template [ngTemplateOutlet]=\\\"panel.titleTpl?.templateRef\\\"></ng-template>\\n            </button>\\n          </h5>\\n        </div>\\n        <div id=\\\"{{panel.id}}\\\" role=\\\"tabpanel\\\" [attr.aria-labelledby]=\\\"panel.id + '-header'\\\"\\n             class=\\\"card-body collapse\\\" [class.show]=\\\"panel.isOpen\\\" *ngIf=\\\"!destroyOnHide || panel.isOpen\\\">\\n             <ng-template [ngTemplateOutlet]=\\\"panel.contentTpl?.templateRef\\\"></ng-template>\\n        </div>\\n      </div>\\n    </ng-template>\\n  \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbAccordion.ctorParameters = function () { return [\r\n        { type: NgbAccordionConfig, },\r\n    ]; };\r\n    NgbAccordion.propDecorators = {\r\n        \"panels\": [{ type: ContentChildren, args: [NgbPanel,] },],\r\n        \"activeIds\": [{ type: Input },],\r\n        \"closeOtherPanels\": [{ type: Input, args: ['closeOthers',] },],\r\n        \"destroyOnHide\": [{ type: Input },],\r\n        \"type\": [{ type: Input },],\r\n        \"panelChange\": [{ type: Output },],\r\n    };\r\n    return NgbAccordion;\r\n}());\r\nexport { NgbAccordion };\r\n//# sourceMappingURL=accordion.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent } from './accordion';\r\nimport { NgbAccordionConfig } from './accordion-config';\r\nexport { NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent } from './accordion';\r\nexport { NgbAccordionConfig } from './accordion-config';\r\nvar NGB_ACCORDION_DIRECTIVES = [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent];\r\nvar NgbAccordionModule = /** @class */ (function () {\r\n    function NgbAccordionModule() {\r\n    }\r\n    NgbAccordionModule.forRoot = function () { return { ngModule: NgbAccordionModule, providers: [NgbAccordionConfig] }; };\r\n    NgbAccordionModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: NGB_ACCORDION_DIRECTIVES, exports: NGB_ACCORDION_DIRECTIVES, imports: [CommonModule] },] },\r\n    ];\r\n    return NgbAccordionModule;\r\n}());\r\nexport { NgbAccordionModule };\r\n//# sourceMappingURL=accordion.module.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbAlert component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the alerts used in the application.\r\n */\r\nvar NgbAlertConfig = /** @class */ (function () {\r\n    function NgbAlertConfig() {\r\n        this.dismissible = true;\r\n        this.type = 'warning';\r\n    }\r\n    NgbAlertConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbAlertConfig;\r\n}());\r\nexport { NgbAlertConfig };\r\n//# sourceMappingURL=alert-config.js.map","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, } from '@angular/core';\r\nimport { NgbAlertConfig } from './alert-config';\r\n/**\r\n * Alerts can be used to provide feedback messages.\r\n */\r\nvar NgbAlert = /** @class */ (function () {\r\n    function NgbAlert(config) {\r\n        /**\r\n           * An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts.\r\n           */\r\n        this.close = new EventEmitter();\r\n        this.dismissible = config.dismissible;\r\n        this.type = config.type;\r\n    }\r\n    NgbAlert.prototype.closeHandler = function () { this.close.emit(null); };\r\n    NgbAlert.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-alert',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    template: \"\\n    <div [class]=\\\"'alert alert-' + type + (dismissible ? ' alert-dismissible' : '')\\\" role=\\\"alert\\\">\\n      <button *ngIf=\\\"dismissible\\\" type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" i18n-aria-label=\\\"@@ngb.alert.close\\\"\\n        (click)=\\\"closeHandler()\\\">\\n        <span aria-hidden=\\\"true\\\">&times;</span>\\n      </button>\\n      <ng-content></ng-content>\\n    </div>\\n    \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbAlert.ctorParameters = function () { return [\r\n        { type: NgbAlertConfig, },\r\n    ]; };\r\n    NgbAlert.propDecorators = {\r\n        \"dismissible\": [{ type: Input },],\r\n        \"type\": [{ type: Input },],\r\n        \"close\": [{ type: Output },],\r\n    };\r\n    return NgbAlert;\r\n}());\r\nexport { NgbAlert };\r\n//# sourceMappingURL=alert.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbAlert } from './alert';\r\nimport { NgbAlertConfig } from './alert-config';\r\nexport { NgbAlert } from './alert';\r\nexport { NgbAlertConfig } from './alert-config';\r\nvar NgbAlertModule = /** @class */ (function () {\r\n    function NgbAlertModule() {\r\n    }\r\n    NgbAlertModule.forRoot = function () { return { ngModule: NgbAlertModule, providers: [NgbAlertConfig] }; };\r\n    NgbAlertModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: [NgbAlert], exports: [NgbAlert], imports: [CommonModule], entryComponents: [NgbAlert] },] },\r\n    ];\r\n    return NgbAlertModule;\r\n}());\r\nexport { NgbAlertModule };\r\n//# sourceMappingURL=alert.module.js.map","import { NgModule } from '@angular/core';\r\nimport { NgbButtonLabel } from './label';\r\nimport { NgbCheckBox } from './checkbox';\r\nimport { NgbRadio, NgbRadioGroup } from './radio';\r\nexport { NgbButtonLabel } from './label';\r\nexport { NgbCheckBox } from './checkbox';\r\nexport { NgbRadio, NgbRadioGroup } from './radio';\r\nvar NGB_BUTTON_DIRECTIVES = [NgbButtonLabel, NgbCheckBox, NgbRadioGroup, NgbRadio];\r\nvar NgbButtonsModule = /** @class */ (function () {\r\n    function NgbButtonsModule() {\r\n    }\r\n    NgbButtonsModule.forRoot = function () { return { ngModule: NgbButtonsModule, providers: [] }; };\r\n    NgbButtonsModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: NGB_BUTTON_DIRECTIVES, exports: NGB_BUTTON_DIRECTIVES },] },\r\n    ];\r\n    return NgbButtonsModule;\r\n}());\r\nexport { NgbButtonsModule };\r\n//# sourceMappingURL=buttons.module.js.map","import { Directive, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NgbButtonLabel } from './label';\r\nvar NGB_CHECKBOX_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(function () { return NgbCheckBox; }),\r\n    multi: true\r\n};\r\n/**\r\n * Easily create Bootstrap-style checkbox buttons. A value of a checked button is bound to a variable\r\n * specified via ngModel.\r\n */\r\nvar NgbCheckBox = /** @class */ (function () {\r\n    function NgbCheckBox(_label) {\r\n        this._label = _label;\r\n        /**\r\n           * A flag indicating if a given checkbox button is disabled.\r\n           */\r\n        this.disabled = false;\r\n        /**\r\n           * Value to be propagated as model when the checkbox is checked.\r\n           */\r\n        this.valueChecked = true;\r\n        /**\r\n           * Value to be propagated as model when the checkbox is unchecked.\r\n           */\r\n        this.valueUnChecked = false;\r\n        this.onChange = function (_) { };\r\n        this.onTouched = function () { };\r\n    }\r\n    Object.defineProperty(NgbCheckBox.prototype, \"focused\", {\r\n        set: function (isFocused) {\r\n            this._label.focused = isFocused;\r\n            if (!isFocused) {\r\n                this.onTouched();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NgbCheckBox.prototype.onInputChange = function ($event) {\r\n        var modelToPropagate = $event.target.checked ? this.valueChecked : this.valueUnChecked;\r\n        this.onChange(modelToPropagate);\r\n        this.onTouched();\r\n        this.writeValue(modelToPropagate);\r\n    };\r\n    NgbCheckBox.prototype.registerOnChange = function (fn) { this.onChange = fn; };\r\n    NgbCheckBox.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\r\n    NgbCheckBox.prototype.setDisabledState = function (isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this._label.disabled = isDisabled;\r\n    };\r\n    NgbCheckBox.prototype.writeValue = function (value) {\r\n        this.checked = value === this.valueChecked;\r\n        this._label.active = this.checked;\r\n    };\r\n    NgbCheckBox.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngbButton][type=checkbox]',\r\n                    host: {\r\n                        'autocomplete': 'off',\r\n                        '[checked]': 'checked',\r\n                        '[disabled]': 'disabled',\r\n                        '(change)': 'onInputChange($event)',\r\n                        '(focus)': 'focused = true',\r\n                        '(blur)': 'focused = false'\r\n                    },\r\n                    providers: [NGB_CHECKBOX_VALUE_ACCESSOR]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbCheckBox.ctorParameters = function () { return [\r\n        { type: NgbButtonLabel, },\r\n    ]; };\r\n    NgbCheckBox.propDecorators = {\r\n        \"disabled\": [{ type: Input },],\r\n        \"valueChecked\": [{ type: Input },],\r\n        \"valueUnChecked\": [{ type: Input },],\r\n    };\r\n    return NgbCheckBox;\r\n}());\r\nexport { NgbCheckBox };\r\n//# sourceMappingURL=checkbox.js.map","import { Directive } from '@angular/core';\r\nvar NgbButtonLabel = /** @class */ (function () {\r\n    function NgbButtonLabel() {\r\n    }\r\n    NgbButtonLabel.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngbButtonLabel]',\r\n                    host: { '[class.btn]': 'true', '[class.active]': 'active', '[class.disabled]': 'disabled', '[class.focus]': 'focused' }\r\n                },] },\r\n    ];\r\n    return NgbButtonLabel;\r\n}());\r\nexport { NgbButtonLabel };\r\n//# sourceMappingURL=label.js.map","import { Directive, forwardRef, Input, Renderer2, ElementRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NgbButtonLabel } from './label';\r\nvar NGB_RADIO_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(function () { return NgbRadioGroup; }),\r\n    multi: true\r\n};\r\nvar nextId = 0;\r\n/**\r\n * Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable\r\n * specified via ngModel.\r\n */\r\nvar NgbRadioGroup = /** @class */ (function () {\r\n    function NgbRadioGroup() {\r\n        this._radios = new Set();\r\n        this._value = null;\r\n        /**\r\n           * The name of the group. Unless enclosed inputs specify a name, this name is used as the name of the\r\n           * enclosed inputs. If not specified, a name is generated automatically.\r\n           */\r\n        this.name = \"ngb-radio-\" + nextId++;\r\n        this.onChange = function (_) { };\r\n        this.onTouched = function () { };\r\n    }\r\n    Object.defineProperty(NgbRadioGroup.prototype, \"disabled\", {\r\n        get: function () { return this._disabled; },\r\n        set: function (isDisabled) { this.setDisabledState(isDisabled); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NgbRadioGroup.prototype.onRadioChange = function (radio) {\r\n        this.writeValue(radio.value);\r\n        this.onChange(radio.value);\r\n    };\r\n    NgbRadioGroup.prototype.onRadioValueUpdate = function () { this._updateRadiosValue(); };\r\n    NgbRadioGroup.prototype.register = function (radio) { this._radios.add(radio); };\r\n    NgbRadioGroup.prototype.registerOnChange = function (fn) { this.onChange = fn; };\r\n    NgbRadioGroup.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\r\n    NgbRadioGroup.prototype.setDisabledState = function (isDisabled) {\r\n        this._disabled = isDisabled;\r\n        this._updateRadiosDisabled();\r\n    };\r\n    NgbRadioGroup.prototype.unregister = function (radio) { this._radios.delete(radio); };\r\n    NgbRadioGroup.prototype.writeValue = function (value) {\r\n        this._value = value;\r\n        this._updateRadiosValue();\r\n    };\r\n    NgbRadioGroup.prototype._updateRadiosValue = function () {\r\n        var _this = this;\r\n        this._radios.forEach(function (radio) { return radio.updateValue(_this._value); });\r\n    };\r\n    NgbRadioGroup.prototype._updateRadiosDisabled = function () { this._radios.forEach(function (radio) { return radio.updateDisabled(); }); };\r\n    NgbRadioGroup.decorators = [\r\n        { type: Directive, args: [{ selector: '[ngbRadioGroup]', host: { 'role': 'group' }, providers: [NGB_RADIO_VALUE_ACCESSOR] },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbRadioGroup.propDecorators = {\r\n        \"name\": [{ type: Input },],\r\n    };\r\n    return NgbRadioGroup;\r\n}());\r\nexport { NgbRadioGroup };\r\n/**\r\n * Marks an input of type \"radio\" as part of the NgbRadioGroup.\r\n */\r\nvar NgbRadio = /** @class */ (function () {\r\n    function NgbRadio(_group, _label, _renderer, _element) {\r\n        this._group = _group;\r\n        this._label = _label;\r\n        this._renderer = _renderer;\r\n        this._element = _element;\r\n        this._value = null;\r\n        this._group.register(this);\r\n    }\r\n    Object.defineProperty(NgbRadio.prototype, \"value\", {\r\n        get: function () { return this._value; },\r\n        set: /**\r\n           * You can specify model value of a given radio by binding to the value property.\r\n           */\r\n        function (value) {\r\n            this._value = value;\r\n            var stringValue = value ? value.toString() : '';\r\n            this._renderer.setProperty(this._element.nativeElement, 'value', stringValue);\r\n            this._group.onRadioValueUpdate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbRadio.prototype, \"disabled\", {\r\n        get: function () { return this._group.disabled || this._disabled; },\r\n        set: /**\r\n           * A flag indicating if a given radio button is disabled.\r\n           */\r\n        function (isDisabled) {\r\n            this._disabled = isDisabled !== false;\r\n            this.updateDisabled();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbRadio.prototype, \"focused\", {\r\n        set: function (isFocused) {\r\n            if (this._label) {\r\n                this._label.focused = isFocused;\r\n            }\r\n            if (!isFocused) {\r\n                this._group.onTouched();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbRadio.prototype, \"checked\", {\r\n        get: function () { return this._checked; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbRadio.prototype, \"nameAttr\", {\r\n        get: function () { return this.name || this._group.name; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NgbRadio.prototype.ngOnDestroy = function () { this._group.unregister(this); };\r\n    NgbRadio.prototype.onChange = function () { this._group.onRadioChange(this); };\r\n    NgbRadio.prototype.updateValue = function (value) {\r\n        this._checked = this.value === value;\r\n        this._label.active = this._checked;\r\n    };\r\n    NgbRadio.prototype.updateDisabled = function () { this._label.disabled = this.disabled; };\r\n    NgbRadio.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngbButton][type=radio]',\r\n                    host: {\r\n                        '[checked]': 'checked',\r\n                        '[disabled]': 'disabled',\r\n                        '[name]': 'nameAttr',\r\n                        '(change)': 'onChange()',\r\n                        '(focus)': 'focused = true',\r\n                        '(blur)': 'focused = false'\r\n                    }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbRadio.ctorParameters = function () { return [\r\n        { type: NgbRadioGroup, },\r\n        { type: NgbButtonLabel, },\r\n        { type: Renderer2, },\r\n        { type: ElementRef, },\r\n    ]; };\r\n    NgbRadio.propDecorators = {\r\n        \"name\": [{ type: Input },],\r\n        \"value\": [{ type: Input, args: ['value',] },],\r\n        \"disabled\": [{ type: Input, args: ['disabled',] },],\r\n    };\r\n    return NgbRadio;\r\n}());\r\nexport { NgbRadio };\r\n//# sourceMappingURL=radio.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbCarousel component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the carousels used in the application.\r\n */\r\nvar NgbCarouselConfig = /** @class */ (function () {\r\n    function NgbCarouselConfig() {\r\n        this.interval = 5000;\r\n        this.wrap = true;\r\n        this.keyboard = true;\r\n        this.pauseOnHover = true;\r\n        this.showNavigationArrows = true;\r\n        this.showNavigationIndicators = true;\r\n    }\r\n    NgbCarouselConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbCarouselConfig;\r\n}());\r\nexport { NgbCarouselConfig };\r\n//# sourceMappingURL=carousel-config.js.map","import { Component, Directive, TemplateRef, ContentChildren, QueryList, Input, Output, EventEmitter } from '@angular/core';\r\nimport { NgbCarouselConfig } from './carousel-config';\r\nvar nextId = 0;\r\n/**\r\n * Represents an individual slide to be used within a carousel.\r\n */\r\nvar NgbSlide = /** @class */ (function () {\r\n    function NgbSlide(tplRef) {\r\n        this.tplRef = tplRef;\r\n        /**\r\n           * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\r\n           * Will be auto-generated if not provided.\r\n           */\r\n        this.id = \"ngb-slide-\" + nextId++;\r\n    }\r\n    NgbSlide.decorators = [\r\n        { type: Directive, args: [{ selector: 'ng-template[ngbSlide]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbSlide.ctorParameters = function () { return [\r\n        { type: TemplateRef, },\r\n    ]; };\r\n    NgbSlide.propDecorators = {\r\n        \"id\": [{ type: Input },],\r\n    };\r\n    return NgbSlide;\r\n}());\r\nexport { NgbSlide };\r\n/**\r\n * Directive to easily create carousels based on Bootstrap's markup.\r\n */\r\nvar NgbCarousel = /** @class */ (function () {\r\n    function NgbCarousel(config) {\r\n        /**\r\n           * A carousel slide event fired when the slide transition is completed.\r\n           * See NgbSlideEvent for payload details\r\n           */\r\n        this.slide = new EventEmitter();\r\n        this.interval = config.interval;\r\n        this.wrap = config.wrap;\r\n        this.keyboard = config.keyboard;\r\n        this.pauseOnHover = config.pauseOnHover;\r\n        this.showNavigationArrows = config.showNavigationArrows;\r\n        this.showNavigationIndicators = config.showNavigationIndicators;\r\n    }\r\n    NgbCarousel.prototype.ngAfterContentChecked = function () {\r\n        var activeSlide = this._getSlideById(this.activeId);\r\n        this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);\r\n    };\r\n    NgbCarousel.prototype.ngOnInit = function () { this._startTimer(); };\r\n    NgbCarousel.prototype.ngOnChanges = function (changes) {\r\n        if ('interval' in changes && !changes['interval'].isFirstChange()) {\r\n            this._restartTimer();\r\n        }\r\n    };\r\n    NgbCarousel.prototype.ngOnDestroy = function () { clearInterval(this._slideChangeInterval); };\r\n    /**\r\n     * Navigate to a slide with the specified identifier.\r\n     */\r\n    /**\r\n       * Navigate to a slide with the specified identifier.\r\n       */\r\n    NgbCarousel.prototype.select = /**\r\n       * Navigate to a slide with the specified identifier.\r\n       */\r\n    function (slideId) {\r\n        this.cycleToSelected(slideId, this.getSlideEventDirection(this.activeId, slideId));\r\n        this._restartTimer();\r\n    };\r\n    /**\r\n     * Navigate to the next slide.\r\n     */\r\n    /**\r\n       * Navigate to the next slide.\r\n       */\r\n    NgbCarousel.prototype.prev = /**\r\n       * Navigate to the next slide.\r\n       */\r\n    function () {\r\n        this.cycleToPrev();\r\n        this._restartTimer();\r\n    };\r\n    /**\r\n     * Navigate to the next slide.\r\n     */\r\n    /**\r\n       * Navigate to the next slide.\r\n       */\r\n    NgbCarousel.prototype.next = /**\r\n       * Navigate to the next slide.\r\n       */\r\n    function () {\r\n        this.cycleToNext();\r\n        this._restartTimer();\r\n    };\r\n    /**\r\n     * Stops the carousel from cycling through items.\r\n     */\r\n    /**\r\n       * Stops the carousel from cycling through items.\r\n       */\r\n    NgbCarousel.prototype.pause = /**\r\n       * Stops the carousel from cycling through items.\r\n       */\r\n    function () { this._stopTimer(); };\r\n    /**\r\n     * Restarts cycling through the carousel slides from left to right.\r\n     */\r\n    /**\r\n       * Restarts cycling through the carousel slides from left to right.\r\n       */\r\n    NgbCarousel.prototype.cycle = /**\r\n       * Restarts cycling through the carousel slides from left to right.\r\n       */\r\n    function () { this._startTimer(); };\r\n    NgbCarousel.prototype.cycleToNext = function () { this.cycleToSelected(this._getNextSlide(this.activeId), NgbSlideEventDirection.LEFT); };\r\n    NgbCarousel.prototype.cycleToPrev = function () { this.cycleToSelected(this._getPrevSlide(this.activeId), NgbSlideEventDirection.RIGHT); };\r\n    NgbCarousel.prototype.cycleToSelected = function (slideIdx, direction) {\r\n        var selectedSlide = this._getSlideById(slideIdx);\r\n        if (selectedSlide) {\r\n            if (selectedSlide.id !== this.activeId) {\r\n                this.slide.emit({ prev: this.activeId, current: selectedSlide.id, direction: direction });\r\n            }\r\n            this.activeId = selectedSlide.id;\r\n        }\r\n    };\r\n    NgbCarousel.prototype.getSlideEventDirection = function (currentActiveSlideId, nextActiveSlideId) {\r\n        var currentActiveSlideIdx = this._getSlideIdxById(currentActiveSlideId);\r\n        var nextActiveSlideIdx = this._getSlideIdxById(nextActiveSlideId);\r\n        return currentActiveSlideIdx > nextActiveSlideIdx ? NgbSlideEventDirection.RIGHT : NgbSlideEventDirection.LEFT;\r\n    };\r\n    NgbCarousel.prototype.keyPrev = function () {\r\n        if (this.keyboard) {\r\n            this.prev();\r\n        }\r\n    };\r\n    NgbCarousel.prototype.keyNext = function () {\r\n        if (this.keyboard) {\r\n            this.next();\r\n        }\r\n    };\r\n    NgbCarousel.prototype.onMouseEnter = function () {\r\n        if (this.pauseOnHover) {\r\n            this.pause();\r\n        }\r\n    };\r\n    NgbCarousel.prototype.onMouseLeave = function () {\r\n        if (this.pauseOnHover) {\r\n            this.cycle();\r\n        }\r\n    };\r\n    NgbCarousel.prototype._restartTimer = function () {\r\n        this._stopTimer();\r\n        this._startTimer();\r\n    };\r\n    NgbCarousel.prototype._startTimer = function () {\r\n        var _this = this;\r\n        if (this.interval > 0) {\r\n            this._slideChangeInterval = setInterval(function () { _this.cycleToNext(); }, this.interval);\r\n        }\r\n    };\r\n    NgbCarousel.prototype._stopTimer = function () { clearInterval(this._slideChangeInterval); };\r\n    NgbCarousel.prototype._getSlideById = function (slideId) {\r\n        var slideWithId = this.slides.filter(function (slide) { return slide.id === slideId; });\r\n        return slideWithId.length ? slideWithId[0] : null;\r\n    };\r\n    NgbCarousel.prototype._getSlideIdxById = function (slideId) {\r\n        return this.slides.toArray().indexOf(this._getSlideById(slideId));\r\n    };\r\n    NgbCarousel.prototype._getNextSlide = function (currentSlideId) {\r\n        var slideArr = this.slides.toArray();\r\n        var currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n        var isLastSlide = currentSlideIdx === slideArr.length - 1;\r\n        return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :\r\n            slideArr[currentSlideIdx + 1].id;\r\n    };\r\n    NgbCarousel.prototype._getPrevSlide = function (currentSlideId) {\r\n        var slideArr = this.slides.toArray();\r\n        var currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n        var isFirstSlide = currentSlideIdx === 0;\r\n        return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :\r\n            slideArr[currentSlideIdx - 1].id;\r\n    };\r\n    NgbCarousel.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-carousel',\r\n                    exportAs: 'ngbCarousel',\r\n                    host: {\r\n                        'class': 'carousel slide',\r\n                        '[style.display]': '\"block\"',\r\n                        'tabIndex': '0',\r\n                        '(mouseenter)': 'onMouseEnter()',\r\n                        '(mouseleave)': 'onMouseLeave()',\r\n                        '(keydown.arrowLeft)': 'keyPrev()',\r\n                        '(keydown.arrowRight)': 'keyNext()'\r\n                    },\r\n                    template: \"\\n    <ol class=\\\"carousel-indicators\\\" *ngIf=\\\"showNavigationIndicators\\\">\\n      <li *ngFor=\\\"let slide of slides\\\" [id]=\\\"slide.id\\\" [class.active]=\\\"slide.id === activeId\\\"\\n          (click)=\\\"cycleToSelected(slide.id, getSlideEventDirection(activeId, slide.id))\\\"></li>\\n    </ol>\\n    <div class=\\\"carousel-inner\\\">\\n      <div *ngFor=\\\"let slide of slides\\\" class=\\\"carousel-item\\\" [class.active]=\\\"slide.id === activeId\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"slide.tplRef\\\"></ng-template>\\n      </div>\\n    </div>\\n    <a class=\\\"carousel-control-prev\\\" role=\\\"button\\\" (click)=\\\"cycleToPrev()\\\" *ngIf=\\\"showNavigationArrows\\\">\\n      <span class=\\\"carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.carousel.previous\\\">Previous</span>\\n    </a>\\n    <a class=\\\"carousel-control-next\\\" role=\\\"button\\\" (click)=\\\"cycleToNext()\\\" *ngIf=\\\"showNavigationArrows\\\">\\n      <span class=\\\"carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.carousel.next\\\">Next</span>\\n    </a>\\n    \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbCarousel.ctorParameters = function () { return [\r\n        { type: NgbCarouselConfig, },\r\n    ]; };\r\n    NgbCarousel.propDecorators = {\r\n        \"slides\": [{ type: ContentChildren, args: [NgbSlide,] },],\r\n        \"activeId\": [{ type: Input },],\r\n        \"interval\": [{ type: Input },],\r\n        \"wrap\": [{ type: Input },],\r\n        \"keyboard\": [{ type: Input },],\r\n        \"pauseOnHover\": [{ type: Input },],\r\n        \"showNavigationArrows\": [{ type: Input },],\r\n        \"showNavigationIndicators\": [{ type: Input },],\r\n        \"slide\": [{ type: Output },],\r\n    };\r\n    return NgbCarousel;\r\n}());\r\nexport { NgbCarousel };\r\n/**\r\n * Enum to define the carousel slide event direction\r\n */\r\n/**\r\n * Enum to define the carousel slide event direction\r\n */\r\nexport var NgbSlideEventDirection;\r\n/**\r\n * Enum to define the carousel slide event direction\r\n */\r\n(function (NgbSlideEventDirection) {\r\n    NgbSlideEventDirection[NgbSlideEventDirection[\"LEFT\"] = 'left'] = \"LEFT\";\r\n    NgbSlideEventDirection[NgbSlideEventDirection[\"RIGHT\"] = 'right'] = \"RIGHT\";\r\n})(NgbSlideEventDirection || (NgbSlideEventDirection = {}));\r\nexport var NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\r\n//# sourceMappingURL=carousel.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NGB_CAROUSEL_DIRECTIVES } from './carousel';\r\nimport { NgbCarouselConfig } from './carousel-config';\r\nexport { NgbCarousel, NgbSlide } from './carousel';\r\nexport { NgbCarouselConfig } from './carousel-config';\r\nvar NgbCarouselModule = /** @class */ (function () {\r\n    function NgbCarouselModule() {\r\n    }\r\n    NgbCarouselModule.forRoot = function () { return { ngModule: NgbCarouselModule, providers: [NgbCarouselConfig] }; };\r\n    NgbCarouselModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: NGB_CAROUSEL_DIRECTIVES, exports: NGB_CAROUSEL_DIRECTIVES, imports: [CommonModule] },] },\r\n    ];\r\n    return NgbCarouselModule;\r\n}());\r\nexport { NgbCarouselModule };\r\n//# sourceMappingURL=carousel.module.js.map","import { Directive, Input } from '@angular/core';\r\n/**\r\n * The NgbCollapse directive provides a simple way to hide and show an element with animations.\r\n */\r\nvar NgbCollapse = /** @class */ (function () {\r\n    function NgbCollapse() {\r\n        /**\r\n           * A flag indicating collapsed (true) or open (false) state.\r\n           */\r\n        this.collapsed = false;\r\n    }\r\n    NgbCollapse.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngbCollapse]',\r\n                    exportAs: 'ngbCollapse',\r\n                    host: { '[class.collapse]': 'true', '[class.show]': '!collapsed' }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbCollapse.propDecorators = {\r\n        \"collapsed\": [{ type: Input, args: ['ngbCollapse',] },],\r\n    };\r\n    return NgbCollapse;\r\n}());\r\nexport { NgbCollapse };\r\n//# sourceMappingURL=collapse.js.map","import { NgModule } from '@angular/core';\r\nimport { NgbCollapse } from './collapse';\r\nexport { NgbCollapse } from './collapse';\r\nvar NgbCollapseModule = /** @class */ (function () {\r\n    function NgbCollapseModule() {\r\n    }\r\n    NgbCollapseModule.forRoot = function () { return { ngModule: NgbCollapseModule, providers: [] }; };\r\n    NgbCollapseModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: [NgbCollapse], exports: [NgbCollapse] },] },\r\n    ];\r\n    return NgbCollapseModule;\r\n}());\r\nexport { NgbCollapseModule };\r\n//# sourceMappingURL=collapse.module.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Injectable } from '@angular/core';\r\n/**\r\n * Abstract type serving as a DI token for the service converting from your application Date model to internal\r\n * NgbDateStruct model.\r\n * A default implementation converting from and to NgbDateStruct is provided for retro-compatibility,\r\n * but you can provide another implementation to use an alternative format, ie for using with native Date Object.\r\n */\r\nvar NgbDateAdapter = /** @class */ (function () {\r\n    function NgbDateAdapter() {\r\n    }\r\n    NgbDateAdapter.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbDateAdapter;\r\n}());\r\nexport { NgbDateAdapter };\r\nvar NgbDateStructAdapter = /** @class */ (function (_super) {\r\n    __extends(NgbDateStructAdapter, _super);\r\n    function NgbDateStructAdapter() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Converts a NgbDateStruct value into NgbDateStruct value\r\n     * @param  {NgbDateStruct} value\r\n     * @return {NgbDateStruct}\r\n     */\r\n    /**\r\n       * Converts a NgbDateStruct value into NgbDateStruct value\r\n       * @param  {NgbDateStruct} value\r\n       * @return {NgbDateStruct}\r\n       */\r\n    NgbDateStructAdapter.prototype.fromModel = /**\r\n       * Converts a NgbDateStruct value into NgbDateStruct value\r\n       * @param  {NgbDateStruct} value\r\n       * @return {NgbDateStruct}\r\n       */\r\n    function (date) {\r\n        return (date && date.year && date.month && date.day) ? { year: date.year, month: date.month, day: date.day } : null;\r\n    };\r\n    /**\r\n     * Converts a NgbDateStruct value into NgbDateStruct value\r\n     * @param  {NgbDateStruct} value\r\n     * @return {NgbDateStruct}\r\n     */\r\n    /**\r\n       * Converts a NgbDateStruct value into NgbDateStruct value\r\n       * @param  {NgbDateStruct} value\r\n       * @return {NgbDateStruct}\r\n       */\r\n    NgbDateStructAdapter.prototype.toModel = /**\r\n       * Converts a NgbDateStruct value into NgbDateStruct value\r\n       * @param  {NgbDateStruct} value\r\n       * @return {NgbDateStruct}\r\n       */\r\n    function (date) {\r\n        return (date && date.year && date.month && date.day) ? { year: date.year, month: date.month, day: date.day } : null;\r\n    };\r\n    NgbDateStructAdapter.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbDateStructAdapter;\r\n}(NgbDateAdapter));\r\nexport { NgbDateStructAdapter };\r\n//# sourceMappingURL=ngb-date-adapter.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Injectable } from '@angular/core';\r\nimport { NgbDateAdapter } from './ngb-date-adapter';\r\nvar NgbDateNativeAdapter = /** @class */ (function (_super) {\r\n    __extends(NgbDateNativeAdapter, _super);\r\n    function NgbDateNativeAdapter() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NgbDateNativeAdapter.prototype.fromModel = function (date) {\r\n        return (date && date.getFullYear) ? { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() } :\r\n            null;\r\n    };\r\n    NgbDateNativeAdapter.prototype.toModel = function (date) {\r\n        return date && date.year && date.month ? new Date(date.year, date.month - 1, date.day) : null;\r\n    };\r\n    NgbDateNativeAdapter.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbDateNativeAdapter;\r\n}(NgbDateAdapter));\r\nexport { NgbDateNativeAdapter };\r\n//# sourceMappingURL=ngb-date-native-adapter.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbDatepicker component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the datepickers used in the application.\r\n */\r\nvar NgbDatepickerConfig = /** @class */ (function () {\r\n    function NgbDatepickerConfig() {\r\n        this.displayMonths = 1;\r\n        this.firstDayOfWeek = 1;\r\n        this.navigation = 'select';\r\n        this.outsideDays = 'visible';\r\n        this.showWeekdays = true;\r\n        this.showWeekNumbers = false;\r\n    }\r\n    NgbDatepickerConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbDatepickerConfig;\r\n}());\r\nexport { NgbDatepickerConfig };\r\n//# sourceMappingURL=datepicker-config.js.map","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nvar NgbDatepickerDayView = /** @class */ (function () {\r\n    function NgbDatepickerDayView() {\r\n    }\r\n    NgbDatepickerDayView.prototype.isMuted = function () { return !this.selected && (this.date.month !== this.currentMonth || this.disabled); };\r\n    NgbDatepickerDayView.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: '[ngbDatepickerDayView]',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    styles: [\"\\n    :host {\\n      text-align: center;\\n      width: 2rem;\\n      height: 2rem;\\n      line-height: 2rem;\\n      border-radius: 0.25rem;\\n      background: transparent;\\n    }\\n    :host.outside {\\n      opacity: 0.5;\\n    }\\n  \"],\r\n                    host: {\r\n                        'class': 'btn-light',\r\n                        '[class.bg-primary]': 'selected',\r\n                        '[class.text-white]': 'selected',\r\n                        '[class.text-muted]': 'isMuted()',\r\n                        '[class.outside]': 'isMuted()',\r\n                        '[class.active]': 'focused'\r\n                    },\r\n                    template: \"{{ date.day }}\"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDatepickerDayView.propDecorators = {\r\n        \"currentMonth\": [{ type: Input },],\r\n        \"date\": [{ type: Input },],\r\n        \"disabled\": [{ type: Input },],\r\n        \"focused\": [{ type: Input },],\r\n        \"selected\": [{ type: Input },],\r\n    };\r\n    return NgbDatepickerDayView;\r\n}());\r\nexport { NgbDatepickerDayView };\r\n//# sourceMappingURL=datepicker-day-view.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Inject, Injectable, LOCALE_ID } from '@angular/core';\r\nimport { FormStyle, getLocaleDayNames, getLocaleMonthNames, TranslationWidth } from '@angular/common';\r\nimport { DatePipe } from '@angular/common';\r\n/**\r\n * Type of the service supplying month and weekday names to to NgbDatepicker component.\r\n * The default implementation of this service honors the Angular locale, and uses the registered locale data,\r\n * as explained in the Angular i18n guide.\r\n * See the i18n demo for how to extend this class and define a custom provider for i18n.\r\n */\r\nvar NgbDatepickerI18n = /** @class */ (function () {\r\n    function NgbDatepickerI18n() {\r\n    }\r\n    NgbDatepickerI18n.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbDatepickerI18n;\r\n}());\r\nexport { NgbDatepickerI18n };\r\nvar NgbDatepickerI18nDefault = /** @class */ (function (_super) {\r\n    __extends(NgbDatepickerI18nDefault, _super);\r\n    function NgbDatepickerI18nDefault(_locale, _datePipe) {\r\n        var _this = _super.call(this) || this;\r\n        _this._locale = _locale;\r\n        _this._datePipe = _datePipe;\r\n        var weekdaysStartingOnSunday = getLocaleDayNames(_locale, FormStyle.Standalone, TranslationWidth.Short);\r\n        _this._weekdaysShort = weekdaysStartingOnSunday.map(function (day, index) { return weekdaysStartingOnSunday[(index + 1) % 7]; });\r\n        _this._monthsShort = getLocaleMonthNames(_locale, FormStyle.Standalone, TranslationWidth.Abbreviated);\r\n        _this._monthsFull = getLocaleMonthNames(_locale, FormStyle.Standalone, TranslationWidth.Wide);\r\n        return _this;\r\n    }\r\n    NgbDatepickerI18nDefault.prototype.getWeekdayShortName = function (weekday) { return this._weekdaysShort[weekday - 1]; };\r\n    NgbDatepickerI18nDefault.prototype.getMonthShortName = function (month) { return this._monthsShort[month - 1]; };\r\n    NgbDatepickerI18nDefault.prototype.getMonthFullName = function (month) { return this._monthsFull[month - 1]; };\r\n    NgbDatepickerI18nDefault.prototype.getDayAriaLabel = function (date) {\r\n        var jsDate = new Date(date.year, date.month - 1, date.day);\r\n        return this._datePipe.transform(jsDate, 'fullDate', null, this._locale);\r\n    };\r\n    NgbDatepickerI18nDefault.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDatepickerI18nDefault.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n        { type: DatePipe, },\r\n    ]; };\r\n    return NgbDatepickerI18nDefault;\r\n}(NgbDatepickerI18n));\r\nexport { NgbDatepickerI18nDefault };\r\n//# sourceMappingURL=datepicker-i18n.js.map","import { Directive, Input, ElementRef, ViewContainerRef, Renderer2, ComponentFactoryResolver, NgZone, TemplateRef, forwardRef, EventEmitter, Output, Inject } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { NgbDate } from './ngb-date';\r\nimport { NgbDatepicker } from './datepicker';\r\nimport { NgbDateParserFormatter } from './ngb-date-parser-formatter';\r\nimport { positionElements } from '../util/positioning';\r\nimport { ngbFocusTrap } from '../util/focus-trap';\r\nimport { Key } from '../util/key';\r\nimport { NgbDateAdapter } from './adapters/ngb-date-adapter';\r\nimport { NgbCalendar } from './ngb-calendar';\r\nimport { NgbDatepickerService } from './datepicker-service';\r\nimport { Subject, fromEvent } from 'rxjs';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nvar NGB_DATEPICKER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(function () { return NgbInputDatepicker; }),\r\n    multi: true\r\n};\r\nvar NGB_DATEPICKER_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(function () { return NgbInputDatepicker; }),\r\n    multi: true\r\n};\r\n/**\r\n * A directive that makes it possible to have datepickers on input fields.\r\n * Manages integration with the input field itself (data entry) and ngModel (validation etc.).\r\n */\r\nvar NgbInputDatepicker = /** @class */ (function () {\r\n    function NgbInputDatepicker(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, ngZone, _service, _calendar, _ngbDateAdapter, _document) {\r\n        var _this = this;\r\n        this._parserFormatter = _parserFormatter;\r\n        this._elRef = _elRef;\r\n        this._vcRef = _vcRef;\r\n        this._renderer = _renderer;\r\n        this._cfr = _cfr;\r\n        this._service = _service;\r\n        this._calendar = _calendar;\r\n        this._ngbDateAdapter = _ngbDateAdapter;\r\n        this._document = _document;\r\n        this._closed$ = new Subject();\r\n        this._cRef = null;\r\n        this._disabled = false;\r\n        /**\r\n           * Indicates whether the datepicker popup should be closed automatically after date selection or not.\r\n           * If the value is 'false', the popup can be closed via 'close()' or 'toggle()' methods.\r\n           *\r\n           * @since 1.1.0\r\n           */\r\n        this.autoClose = true;\r\n        /**\r\n           * Placement of a datepicker popup accepts:\r\n           *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\r\n           *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\r\n           * and array of above values.\r\n           */\r\n        this.placement = 'bottom-left';\r\n        /**\r\n           * An event fired when user selects a date using keyboard or mouse.\r\n           * The payload of the event is currently selected NgbDateStruct.\r\n           *\r\n           * @since 1.1.1\r\n           */\r\n        this.dateSelect = new EventEmitter();\r\n        /**\r\n           * An event fired when navigation happens and currently displayed month changes.\r\n           * See NgbDatepickerNavigateEvent for the payload info.\r\n           */\r\n        this.navigate = new EventEmitter();\r\n        this._onChange = function (_) { };\r\n        this._onTouched = function () { };\r\n        this._validatorChange = function () { };\r\n        this._zoneSubscription = ngZone.onStable.subscribe(function () {\r\n            if (_this._cRef) {\r\n                positionElements(_this._elRef.nativeElement, _this._cRef.location.nativeElement, _this.placement, _this.container === 'body');\r\n            }\r\n        });\r\n    }\r\n    Object.defineProperty(NgbInputDatepicker.prototype, \"disabled\", {\r\n        get: function () {\r\n            return this._disabled;\r\n        },\r\n        set: function (value) {\r\n            this._disabled = value === '' || (value && value !== 'false');\r\n            if (this.isOpen()) {\r\n                this._cRef.instance.setDisabledState(this._disabled);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NgbInputDatepicker.prototype.registerOnChange = function (fn) { this._onChange = fn; };\r\n    NgbInputDatepicker.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };\r\n    NgbInputDatepicker.prototype.registerOnValidatorChange = function (fn) { this._validatorChange = fn; };\r\n    ;\r\n    NgbInputDatepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };\r\n    NgbInputDatepicker.prototype.validate = function (c) {\r\n        var value = c.value;\r\n        if (value === null || value === undefined) {\r\n            return null;\r\n        }\r\n        var ngbDate = this._fromDateStruct(this._ngbDateAdapter.fromModel(value));\r\n        if (!this._calendar.isValid(ngbDate)) {\r\n            return { 'ngbDate': { invalid: c.value } };\r\n        }\r\n        if (this.minDate && ngbDate.before(NgbDate.from(this.minDate))) {\r\n            return { 'ngbDate': { requiredBefore: this.minDate } };\r\n        }\r\n        if (this.maxDate && ngbDate.after(NgbDate.from(this.maxDate))) {\r\n            return { 'ngbDate': { requiredAfter: this.maxDate } };\r\n        }\r\n    };\r\n    NgbInputDatepicker.prototype.writeValue = function (value) {\r\n        this._model = this._fromDateStruct(this._ngbDateAdapter.fromModel(value));\r\n        this._writeModelValue(this._model);\r\n    };\r\n    NgbInputDatepicker.prototype.manualDateChange = function (value, updateView) {\r\n        if (updateView === void 0) { updateView = false; }\r\n        this._model = this._fromDateStruct(this._parserFormatter.parse(value));\r\n        this._onChange(this._model ? this._ngbDateAdapter.toModel(this._model) : (value === '' ? null : value));\r\n        if (updateView && this._model) {\r\n            this._writeModelValue(this._model);\r\n        }\r\n    };\r\n    NgbInputDatepicker.prototype.isOpen = function () { return !!this._cRef; };\r\n    /**\r\n     * Opens the datepicker with the selected date indicated by the ngModel value.\r\n     */\r\n    /**\r\n       * Opens the datepicker with the selected date indicated by the ngModel value.\r\n       */\r\n    NgbInputDatepicker.prototype.open = /**\r\n       * Opens the datepicker with the selected date indicated by the ngModel value.\r\n       */\r\n    function () {\r\n        var _this = this;\r\n        if (!this.isOpen()) {\r\n            var cf = this._cfr.resolveComponentFactory(NgbDatepicker);\r\n            this._cRef = this._vcRef.createComponent(cf);\r\n            this._applyPopupStyling(this._cRef.location.nativeElement);\r\n            this._applyDatepickerInputs(this._cRef.instance);\r\n            this._subscribeForDatepickerOutputs(this._cRef.instance);\r\n            this._cRef.instance.ngOnInit();\r\n            this._cRef.instance.writeValue(this._ngbDateAdapter.toModel(this._model));\r\n            // date selection event handling\r\n            this._cRef.instance.registerOnChange(function (selectedDate) {\r\n                _this.writeValue(selectedDate);\r\n                _this._onChange(selectedDate);\r\n            });\r\n            this._cRef.changeDetectorRef.detectChanges();\r\n            this._cRef.instance.setDisabledState(this.disabled);\r\n            if (this.container === 'body') {\r\n                window.document.querySelector(this.container).appendChild(this._cRef.location.nativeElement);\r\n            }\r\n            // focus handling\r\n            ngbFocusTrap(this._cRef.location.nativeElement, this._closed$);\r\n            this._cRef.instance.focus();\r\n            // closing on ESC\r\n            fromEvent(this._document, 'keyup')\r\n                .pipe(takeUntil(this._closed$), filter(function (e) { return e.which === Key.Escape; }))\r\n                .subscribe(function () { return _this.close(); });\r\n        }\r\n    };\r\n    /**\r\n     * Closes the datepicker popup.\r\n     */\r\n    /**\r\n       * Closes the datepicker popup.\r\n       */\r\n    NgbInputDatepicker.prototype.close = /**\r\n       * Closes the datepicker popup.\r\n       */\r\n    function () {\r\n        if (this.isOpen()) {\r\n            this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\r\n            this._cRef = null;\r\n            this._closed$.next();\r\n        }\r\n    };\r\n    /**\r\n     * Toggles the datepicker popup (opens when closed and closes when opened).\r\n     */\r\n    /**\r\n       * Toggles the datepicker popup (opens when closed and closes when opened).\r\n       */\r\n    NgbInputDatepicker.prototype.toggle = /**\r\n       * Toggles the datepicker popup (opens when closed and closes when opened).\r\n       */\r\n    function () {\r\n        if (this.isOpen()) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    };\r\n    /**\r\n     * Navigates current view to provided date.\r\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n     * If nothing or invalid date provided calendar will open current month.\r\n     * Use 'startDate' input as an alternative\r\n     */\r\n    /**\r\n       * Navigates current view to provided date.\r\n       * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n       * If nothing or invalid date provided calendar will open current month.\r\n       * Use 'startDate' input as an alternative\r\n       */\r\n    NgbInputDatepicker.prototype.navigateTo = /**\r\n       * Navigates current view to provided date.\r\n       * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n       * If nothing or invalid date provided calendar will open current month.\r\n       * Use 'startDate' input as an alternative\r\n       */\r\n    function (date) {\r\n        if (this.isOpen()) {\r\n            this._cRef.instance.navigateTo(date);\r\n        }\r\n    };\r\n    NgbInputDatepicker.prototype.onBlur = function () { this._onTouched(); };\r\n    NgbInputDatepicker.prototype.ngOnChanges = function (changes) {\r\n        if (changes['minDate'] || changes['maxDate']) {\r\n            this._validatorChange();\r\n        }\r\n    };\r\n    NgbInputDatepicker.prototype.ngOnDestroy = function () {\r\n        this.close();\r\n        this._zoneSubscription.unsubscribe();\r\n    };\r\n    NgbInputDatepicker.prototype._applyDatepickerInputs = function (datepickerInstance) {\r\n        var _this = this;\r\n        ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',\r\n            'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\r\n            .forEach(function (optionName) {\r\n            if (_this[optionName] !== undefined) {\r\n                datepickerInstance[optionName] = _this[optionName];\r\n            }\r\n        });\r\n        datepickerInstance.startDate = this.startDate || this._model;\r\n    };\r\n    NgbInputDatepicker.prototype._applyPopupStyling = function (nativeElement) {\r\n        this._renderer.addClass(nativeElement, 'dropdown-menu');\r\n        this._renderer.setStyle(nativeElement, 'padding', '0');\r\n        this._renderer.addClass(nativeElement, 'show');\r\n    };\r\n    NgbInputDatepicker.prototype._subscribeForDatepickerOutputs = function (datepickerInstance) {\r\n        var _this = this;\r\n        datepickerInstance.navigate.subscribe(function (date) { return _this.navigate.emit(date); });\r\n        datepickerInstance.select.subscribe(function (date) {\r\n            _this.dateSelect.emit(date);\r\n            if (_this.autoClose) {\r\n                _this.close();\r\n            }\r\n        });\r\n    };\r\n    NgbInputDatepicker.prototype._writeModelValue = function (model) {\r\n        this._renderer.setProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));\r\n        if (this.isOpen()) {\r\n            this._cRef.instance.writeValue(this._ngbDateAdapter.toModel(model));\r\n            this._onTouched();\r\n        }\r\n    };\r\n    NgbInputDatepicker.prototype._fromDateStruct = function (date) {\r\n        var ngbDate = date ? new NgbDate(date.year, date.month, date.day) : null;\r\n        return this._calendar.isValid(ngbDate) ? ngbDate : null;\r\n    };\r\n    NgbInputDatepicker.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'input[ngbDatepicker]',\r\n                    exportAs: 'ngbDatepicker',\r\n                    host: {\r\n                        '(input)': 'manualDateChange($event.target.value)',\r\n                        '(change)': 'manualDateChange($event.target.value, true)',\r\n                        '(blur)': 'onBlur()',\r\n                        '[disabled]': 'disabled'\r\n                    },\r\n                    providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NGB_DATEPICKER_VALIDATOR, NgbDatepickerService]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbInputDatepicker.ctorParameters = function () { return [\r\n        { type: NgbDateParserFormatter, },\r\n        { type: ElementRef, },\r\n        { type: ViewContainerRef, },\r\n        { type: Renderer2, },\r\n        { type: ComponentFactoryResolver, },\r\n        { type: NgZone, },\r\n        { type: NgbDatepickerService, },\r\n        { type: NgbCalendar, },\r\n        { type: NgbDateAdapter, },\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n    ]; };\r\n    NgbInputDatepicker.propDecorators = {\r\n        \"autoClose\": [{ type: Input },],\r\n        \"dayTemplate\": [{ type: Input },],\r\n        \"displayMonths\": [{ type: Input },],\r\n        \"firstDayOfWeek\": [{ type: Input },],\r\n        \"markDisabled\": [{ type: Input },],\r\n        \"minDate\": [{ type: Input },],\r\n        \"maxDate\": [{ type: Input },],\r\n        \"navigation\": [{ type: Input },],\r\n        \"outsideDays\": [{ type: Input },],\r\n        \"placement\": [{ type: Input },],\r\n        \"showWeekdays\": [{ type: Input },],\r\n        \"showWeekNumbers\": [{ type: Input },],\r\n        \"startDate\": [{ type: Input },],\r\n        \"container\": [{ type: Input },],\r\n        \"dateSelect\": [{ type: Output },],\r\n        \"navigate\": [{ type: Output },],\r\n        \"disabled\": [{ type: Input },],\r\n    };\r\n    return NgbInputDatepicker;\r\n}());\r\nexport { NgbInputDatepicker };\r\n//# sourceMappingURL=datepicker-input.js.map","import { Injectable } from '@angular/core';\r\nimport { NgbDatepickerService } from './datepicker-service';\r\nimport { NgbCalendar } from './ngb-calendar';\r\nimport { toString } from '../util/util';\r\nimport { Key } from '../util/key';\r\nvar NgbDatepickerKeyMapService = /** @class */ (function () {\r\n    function NgbDatepickerKeyMapService(_service, _calendar) {\r\n        var _this = this;\r\n        this._service = _service;\r\n        this._calendar = _calendar;\r\n        _service.model$.subscribe(function (model) {\r\n            _this._minDate = model.minDate;\r\n            _this._maxDate = model.maxDate;\r\n            _this._firstViewDate = model.firstDate;\r\n            _this._lastViewDate = model.lastDate;\r\n        });\r\n    }\r\n    NgbDatepickerKeyMapService.prototype.processKey = function (event) {\r\n        if (Key[toString(event.which)]) {\r\n            switch (event.which) {\r\n                case Key.PageUp:\r\n                    this._service.focusMove(event.shiftKey ? 'y' : 'm', -1);\r\n                    break;\r\n                case Key.PageDown:\r\n                    this._service.focusMove(event.shiftKey ? 'y' : 'm', 1);\r\n                    break;\r\n                case Key.End:\r\n                    this._service.focus(event.shiftKey ? this._maxDate : this._lastViewDate);\r\n                    break;\r\n                case Key.Home:\r\n                    this._service.focus(event.shiftKey ? this._minDate : this._firstViewDate);\r\n                    break;\r\n                case Key.ArrowLeft:\r\n                    this._service.focusMove('d', -1);\r\n                    break;\r\n                case Key.ArrowUp:\r\n                    this._service.focusMove('d', -this._calendar.getDaysPerWeek());\r\n                    break;\r\n                case Key.ArrowRight:\r\n                    this._service.focusMove('d', 1);\r\n                    break;\r\n                case Key.ArrowDown:\r\n                    this._service.focusMove('d', this._calendar.getDaysPerWeek());\r\n                    break;\r\n                case Key.Enter:\r\n                case Key.Space:\r\n                    this._service.focusSelect();\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    };\r\n    NgbDatepickerKeyMapService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDatepickerKeyMapService.ctorParameters = function () { return [\r\n        { type: NgbDatepickerService, },\r\n        { type: NgbCalendar, },\r\n    ]; };\r\n    return NgbDatepickerKeyMapService;\r\n}());\r\nexport { NgbDatepickerKeyMapService };\r\n//# sourceMappingURL=datepicker-keymap-service.js.map","import { Component, Input, TemplateRef, Output, EventEmitter } from '@angular/core';\r\nimport { NgbDate } from './ngb-date';\r\nimport { NgbDatepickerI18n } from './datepicker-i18n';\r\nvar NgbDatepickerMonthView = /** @class */ (function () {\r\n    function NgbDatepickerMonthView(i18n) {\r\n        this.i18n = i18n;\r\n        this.select = new EventEmitter();\r\n    }\r\n    NgbDatepickerMonthView.prototype.doSelect = function (day) {\r\n        if (!day.context.disabled && !day.hidden) {\r\n            this.select.emit(NgbDate.from(day.date));\r\n        }\r\n    };\r\n    NgbDatepickerMonthView.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-datepicker-month-view',\r\n                    host: { 'role': 'grid' },\r\n                    styles: [\"\\n    :host {\\n      display: block;\\n    }\\n    .ngb-dp-weekday, .ngb-dp-week-number {\\n      line-height: 2rem;\\n      text-align: center;\\n      font-style: italic;\\n    }\\n    .ngb-dp-weekday {\\n      color: #5bc0de;\\n      color: var(--info);\\n    }\\n    .ngb-dp-week {\\n      border-radius: 0.25rem;\\n      display: -ms-flexbox;\\n      display: flex;\\n    }\\n    .ngb-dp-weekdays {\\n      border-bottom: 1px solid rgba(0, 0, 0, 0.125);\\n      border-radius: 0;\\n    }\\n    .ngb-dp-day, .ngb-dp-weekday, .ngb-dp-week-number {\\n      width: 2rem;\\n      height: 2rem;\\n    }\\n    .ngb-dp-day {\\n      cursor: pointer;\\n    }\\n    .ngb-dp-day.disabled, .ngb-dp-day.hidden {\\n      cursor: default;\\n    }\\n  \"],\r\n                    template: \"\\n    <div *ngIf=\\\"showWeekdays\\\" class=\\\"ngb-dp-week ngb-dp-weekdays bg-light\\\">\\n      <div *ngIf=\\\"showWeekNumbers\\\" class=\\\"ngb-dp-weekday ngb-dp-showweek\\\"></div>\\n      <div *ngFor=\\\"let w of month.weekdays\\\" class=\\\"ngb-dp-weekday small\\\">\\n        {{ i18n.getWeekdayShortName(w) }}\\n      </div>\\n    </div>\\n    <ng-template ngFor let-week [ngForOf]=\\\"month.weeks\\\">\\n      <div *ngIf=\\\"!week.collapsed\\\" class=\\\"ngb-dp-week\\\" role=\\\"row\\\">\\n        <div *ngIf=\\\"showWeekNumbers\\\" class=\\\"ngb-dp-week-number small text-muted\\\">{{ week.number }}</div>\\n        <div *ngFor=\\\"let day of week.days\\\" (click)=\\\"doSelect(day)\\\" class=\\\"ngb-dp-day\\\" role=\\\"gridcell\\\"\\n          [class.disabled]=\\\"day.context.disabled\\\"\\n          [tabindex]=\\\"day.tabindex\\\"\\n          [class.hidden]=\\\"day.hidden\\\"\\n          [attr.aria-label]=\\\"day.ariaLabel\\\">\\n          <ng-template [ngIf]=\\\"!day.hidden\\\">\\n            <ng-template [ngTemplateOutlet]=\\\"dayTemplate\\\" [ngTemplateOutletContext]=\\\"day.context\\\"></ng-template>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </ng-template>\\n  \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDatepickerMonthView.ctorParameters = function () { return [\r\n        { type: NgbDatepickerI18n, },\r\n    ]; };\r\n    NgbDatepickerMonthView.propDecorators = {\r\n        \"dayTemplate\": [{ type: Input },],\r\n        \"month\": [{ type: Input },],\r\n        \"showWeekdays\": [{ type: Input },],\r\n        \"showWeekNumbers\": [{ type: Input },],\r\n        \"select\": [{ type: Output },],\r\n    };\r\n    return NgbDatepickerMonthView;\r\n}());\r\nexport { NgbDatepickerMonthView };\r\n//# sourceMappingURL=datepicker-month-view.js.map","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\nimport { NgbDate } from './ngb-date';\r\nimport { toInteger } from '../util/util';\r\nimport { NgbDatepickerI18n } from './datepicker-i18n';\r\nvar NgbDatepickerNavigationSelect = /** @class */ (function () {\r\n    function NgbDatepickerNavigationSelect(i18n) {\r\n        this.i18n = i18n;\r\n        this.select = new EventEmitter();\r\n    }\r\n    NgbDatepickerNavigationSelect.prototype.changeMonth = function (month) { this.select.emit(new NgbDate(this.date.year, toInteger(month), 1)); };\r\n    NgbDatepickerNavigationSelect.prototype.changeYear = function (year) { this.select.emit(new NgbDate(toInteger(year), this.date.month, 1)); };\r\n    NgbDatepickerNavigationSelect.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-datepicker-navigation-select',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    styles: [\"\\n    :host>select {\\n      display: flex;\\n      display: -ms-flexbox;\\n      -ms-flex: 1 1 auto;\\n      width: 100%;\\n      padding: 0 0.5rem;\\n      font-size: 0.875rem;\\n      height: 1.85rem;\\n    }\\n  \"],\r\n                    template: \"\\n    <select\\n      [disabled]=\\\"disabled\\\"\\n      class=\\\"custom-select\\\"\\n      [value]=\\\"date?.month\\\"\\n      (change)=\\\"changeMonth($event.target.value)\\\">\\n        <option *ngFor=\\\"let m of months\\\" [attr.aria-label]=\\\"i18n.getMonthFullName(m)\\\" [value]=\\\"m\\\">{{ i18n.getMonthShortName(m) }}</option>\\n    </select><select\\n      [disabled]=\\\"disabled\\\"\\n      class=\\\"custom-select\\\"\\n      [value]=\\\"date?.year\\\"\\n      (change)=\\\"changeYear($event.target.value)\\\">\\n        <option *ngFor=\\\"let y of years\\\" [value]=\\\"y\\\">{{ y }}</option>\\n    </select>\\n  \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDatepickerNavigationSelect.ctorParameters = function () { return [\r\n        { type: NgbDatepickerI18n, },\r\n    ]; };\r\n    NgbDatepickerNavigationSelect.propDecorators = {\r\n        \"date\": [{ type: Input },],\r\n        \"disabled\": [{ type: Input },],\r\n        \"months\": [{ type: Input },],\r\n        \"years\": [{ type: Input },],\r\n        \"select\": [{ type: Output },],\r\n    };\r\n    return NgbDatepickerNavigationSelect;\r\n}());\r\nexport { NgbDatepickerNavigationSelect };\r\n//# sourceMappingURL=datepicker-navigation-select.js.map","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\nimport { NavigationEvent } from './datepicker-view-model';\r\nimport { NgbDate } from './ngb-date';\r\nimport { NgbDatepickerI18n } from './datepicker-i18n';\r\n// The -ms- and -webkit- element for the CSS can be removed if we are generating the CSS using SASS.\r\nvar NgbDatepickerNavigation = /** @class */ (function () {\r\n    function NgbDatepickerNavigation(i18n) {\r\n        this.i18n = i18n;\r\n        this.navigation = NavigationEvent;\r\n        this.months = [];\r\n        this.navigate = new EventEmitter();\r\n        this.select = new EventEmitter();\r\n    }\r\n    NgbDatepickerNavigation.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-datepicker-navigation',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    styles: [\"\\n    :host {\\n      display: -ms-flexbox;\\n      display: flex;\\n      align-items: center;\\n    }\\n    .ngb-dp-navigation-chevron {\\n      border-style: solid;\\n      border-width: 0.2em 0.2em 0 0;\\n      display: inline-block;\\n      width: 0.75em;\\n      height: 0.75em;\\n      margin-left: 0.25em;\\n      margin-right: 0.15em;\\n      transform: rotate(-135deg);\\n      -ms-transform: rotate(-135deg);\\n    }\\n    .right .ngb-dp-navigation-chevron {\\n      -ms-transform: rotate(45deg);\\n      transform: rotate(45deg);\\n      margin-left: 0.15em;\\n      margin-right: 0.25em;\\n    }\\n    .ngb-dp-arrow {\\n      display: -ms-flexbox;\\n      display: flex;\\n      -ms-flex: 1 1 auto;\\n      flex-grow: 1;\\n      padding-right: 0;\\n      padding-left: 0;\\n      margin: 0;\\n      width: 2rem;\\n      height: 2rem;\\n    }\\n    .ngb-dp-arrow.right {\\n      -ms-flex-pack: end;\\n      justify-content: flex-end;\\n    }\\n    .ngb-dp-arrow-btn {\\n      padding: 0 0.25rem;\\n      margin: 0 0.5rem;\\n      border: none;\\n      background-color: transparent;\\n      z-index: 1;\\n    }\\n    .ngb-dp-arrow-btn:focus {\\n      outline: auto 1px;\\n    }\\n    .ngb-dp-month-name {\\n      font-size: larger;\\n      height: 2rem;\\n      line-height: 2rem;\\n      text-align: center;\\n    }\\n    .ngb-dp-navigation-select {\\n      display: -ms-flexbox;\\n      display: flex;\\n      -ms-flex: 1 1 9rem;\\n      flex-grow: 1;\\n      flex-basis: 9rem;\\n    }\\n  \"],\r\n                    template: \"\\n    <div class=\\\"ngb-dp-arrow\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-link ngb-dp-arrow-btn\\\" (click)=\\\"!!navigate.emit(navigation.PREV)\\\" [disabled]=\\\"prevDisabled\\\"\\n              i18n-aria-label=\\\"@@ngb.datepicker.previous-month\\\" aria-label=\\\"Previous month\\\"\\n              i18n-title=\\\"@@ngb.datepicker.previous-month\\\" title=\\\"Previous month\\\">\\n        <span class=\\\"ngb-dp-navigation-chevron\\\"></span>\\n      </button>\\n    </div>\\n    <ngb-datepicker-navigation-select *ngIf=\\\"showSelect\\\" class=\\\"ngb-dp-navigation-select\\\"\\n      [date]=\\\"date\\\"\\n      [disabled] = \\\"disabled\\\"\\n      [months]=\\\"selectBoxes.months\\\"\\n      [years]=\\\"selectBoxes.years\\\"\\n      (select)=\\\"select.emit($event)\\\">\\n    </ngb-datepicker-navigation-select>\\n\\n    <ng-template *ngIf=\\\"!showSelect\\\" ngFor let-month [ngForOf]=\\\"months\\\" let-i=\\\"index\\\">\\n      <div class=\\\"ngb-dp-arrow\\\" *ngIf=\\\"i > 0\\\"></div>\\n      <div class=\\\"ngb-dp-month-name\\\">\\n        {{ i18n.getMonthFullName(month.number) }} {{ month.year }}\\n      </div>\\n      <div class=\\\"ngb-dp-arrow\\\" *ngIf=\\\"i !== months.length - 1\\\"></div>\\n    </ng-template>\\n    <div class=\\\"ngb-dp-arrow right\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-link ngb-dp-arrow-btn\\\" (click)=\\\"!!navigate.emit(navigation.NEXT)\\\" [disabled]=\\\"nextDisabled\\\"\\n              i18n-aria-label=\\\"@@ngb.datepicker.next-month\\\" aria-label=\\\"Next month\\\"\\n              i18n-title=\\\"@@ngb.datepicker.next-month\\\" title=\\\"Next month\\\">\\n        <span class=\\\"ngb-dp-navigation-chevron\\\"></span>\\n      </button>\\n    </div>\\n    \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDatepickerNavigation.ctorParameters = function () { return [\r\n        { type: NgbDatepickerI18n, },\r\n    ]; };\r\n    NgbDatepickerNavigation.propDecorators = {\r\n        \"date\": [{ type: Input },],\r\n        \"disabled\": [{ type: Input },],\r\n        \"months\": [{ type: Input },],\r\n        \"showSelect\": [{ type: Input },],\r\n        \"prevDisabled\": [{ type: Input },],\r\n        \"nextDisabled\": [{ type: Input },],\r\n        \"selectBoxes\": [{ type: Input },],\r\n        \"navigate\": [{ type: Output },],\r\n        \"select\": [{ type: Output },],\r\n    };\r\n    return NgbDatepickerNavigation;\r\n}());\r\nexport { NgbDatepickerNavigation };\r\n//# sourceMappingURL=datepicker-navigation.js.map","import { NgbCalendar } from './ngb-calendar';\r\nimport { NgbDate } from './ngb-date';\r\nimport { Injectable } from '@angular/core';\r\nimport { isInteger, toInteger } from '../util/util';\r\nimport { Subject } from 'rxjs';\r\nimport { buildMonths, checkDateInRange, checkMinBeforeMax, isChangedDate, isDateSelectable, generateSelectBoxYears, generateSelectBoxMonths, prevMonthDisabled, nextMonthDisabled } from './datepicker-tools';\r\nimport { filter } from 'rxjs/operators';\r\nimport { NgbDatepickerI18n } from './datepicker-i18n';\r\nvar NgbDatepickerService = /** @class */ (function () {\r\n    function NgbDatepickerService(_calendar, _i18n) {\r\n        this._calendar = _calendar;\r\n        this._i18n = _i18n;\r\n        this._model$ = new Subject();\r\n        this._select$ = new Subject();\r\n        this._state = {\r\n            disabled: false,\r\n            displayMonths: 1,\r\n            firstDayOfWeek: 1,\r\n            focusVisible: false,\r\n            months: [],\r\n            navigation: 'select',\r\n            outsideDays: 'visible',\r\n            prevDisabled: false,\r\n            nextDisabled: false,\r\n            selectBoxes: { years: [], months: [] },\r\n            selectedDate: null\r\n        };\r\n    }\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"model$\", {\r\n        get: function () { return this._model$.pipe(filter(function (model) { return model.months.length > 0; })); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"select$\", {\r\n        get: function () { return this._select$.pipe(filter(function (date) { return date !== null; })); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"disabled\", {\r\n        set: function (disabled) {\r\n            if (this._state.disabled !== disabled) {\r\n                this._nextState({ disabled: disabled });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"displayMonths\", {\r\n        set: function (displayMonths) {\r\n            displayMonths = toInteger(displayMonths);\r\n            if (isInteger(displayMonths) && displayMonths > 0 && this._state.displayMonths !== displayMonths) {\r\n                this._nextState({ displayMonths: displayMonths });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"firstDayOfWeek\", {\r\n        set: function (firstDayOfWeek) {\r\n            firstDayOfWeek = toInteger(firstDayOfWeek);\r\n            if (isInteger(firstDayOfWeek) && firstDayOfWeek >= 0 && this._state.firstDayOfWeek !== firstDayOfWeek) {\r\n                this._nextState({ firstDayOfWeek: firstDayOfWeek });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"focusVisible\", {\r\n        set: function (focusVisible) {\r\n            if (this._state.focusVisible !== focusVisible && !this._state.disabled) {\r\n                this._nextState({ focusVisible: focusVisible });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"maxDate\", {\r\n        set: function (date) {\r\n            var maxDate = this.toValidDate(date, null);\r\n            if (isChangedDate(this._state.maxDate, maxDate)) {\r\n                this._nextState({ maxDate: maxDate });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"markDisabled\", {\r\n        set: function (markDisabled) {\r\n            if (this._state.markDisabled !== markDisabled) {\r\n                this._nextState({ markDisabled: markDisabled });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"minDate\", {\r\n        set: function (date) {\r\n            var minDate = this.toValidDate(date, null);\r\n            if (isChangedDate(this._state.minDate, minDate)) {\r\n                this._nextState({ minDate: minDate });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"navigation\", {\r\n        set: function (navigation) {\r\n            if (this._state.navigation !== navigation) {\r\n                this._nextState({ navigation: navigation });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgbDatepickerService.prototype, \"outsideDays\", {\r\n        set: function (outsideDays) {\r\n            if (this._state.outsideDays !== outsideDays) {\r\n                this._nextState({ outsideDays: outsideDays });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NgbDatepickerService.prototype.focus = function (date) {\r\n        if (!this._state.disabled && this._calendar.isValid(date) && isChangedDate(this._state.focusDate, date)) {\r\n            this._nextState({ focusDate: date });\r\n        }\r\n    };\r\n    NgbDatepickerService.prototype.focusMove = function (period, number) {\r\n        this.focus(this._calendar.getNext(this._state.focusDate, period, number));\r\n    };\r\n    NgbDatepickerService.prototype.focusSelect = function () {\r\n        if (isDateSelectable(this._state.focusDate, this._state)) {\r\n            this.select(this._state.focusDate, { emitEvent: true });\r\n        }\r\n    };\r\n    NgbDatepickerService.prototype.open = function (date) {\r\n        var firstDate = this.toValidDate(date, this._calendar.getToday());\r\n        if (!this._state.disabled) {\r\n            this._nextState({ firstDate: firstDate });\r\n        }\r\n    };\r\n    NgbDatepickerService.prototype.select = function (date, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var selectedDate = this.toValidDate(date, null);\r\n        if (!this._state.disabled) {\r\n            if (isChangedDate(this._state.selectedDate, selectedDate)) {\r\n                this._nextState({ selectedDate: selectedDate });\r\n            }\r\n            if (options.emitEvent && isDateSelectable(selectedDate, this._state)) {\r\n                this._select$.next(selectedDate);\r\n            }\r\n        }\r\n    };\r\n    NgbDatepickerService.prototype.toValidDate = function (date, defaultValue) {\r\n        var ngbDate = NgbDate.from(date);\r\n        if (defaultValue === undefined) {\r\n            defaultValue = this._calendar.getToday();\r\n        }\r\n        return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;\r\n    };\r\n    NgbDatepickerService.prototype._nextState = function (patch) {\r\n        var newState = this._updateState(patch);\r\n        this._patchContexts(newState);\r\n        this._state = newState;\r\n        this._model$.next(this._state);\r\n    };\r\n    NgbDatepickerService.prototype._patchContexts = function (state) {\r\n        var months = state.months, displayMonths = state.displayMonths, selectedDate = state.selectedDate, focusDate = state.focusDate, focusVisible = state.focusVisible, disabled = state.disabled, outsideDays = state.outsideDays;\r\n        state.months.forEach(function (month) {\r\n            month.weeks.forEach(function (week) {\r\n                week.days.forEach(function (day) {\r\n                    // patch focus flag\r\n                    if (focusDate) {\r\n                        day.context.focused = focusDate.equals(day.date) && focusVisible;\r\n                    }\r\n                    // calculating tabindex\r\n                    day.tabindex = !disabled && day.date.equals(focusDate) && focusDate.month === month.number ? 0 : -1;\r\n                    // override context disabled\r\n                    if (disabled === true) {\r\n                        day.context.disabled = true;\r\n                    }\r\n                    // patch selection flag\r\n                    if (selectedDate !== undefined) {\r\n                        day.context.selected = selectedDate !== null && selectedDate.equals(day.date);\r\n                    }\r\n                    // visibility\r\n                    if (month.number !== day.date.month) {\r\n                        day.hidden = outsideDays === 'hidden' || outsideDays === 'collapsed' ||\r\n                            (displayMonths > 1 && day.date.after(months[0].firstDate) &&\r\n                                day.date.before(months[displayMonths - 1].lastDate));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n    NgbDatepickerService.prototype._updateState = function (patch) {\r\n        // patching fields\r\n        var state = Object.assign({}, this._state, patch);\r\n        var startDate = state.firstDate;\r\n        // min/max dates changed\r\n        if ('minDate' in patch || 'maxDate' in patch) {\r\n            checkMinBeforeMax(state.minDate, state.maxDate);\r\n            state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\r\n            state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\r\n            startDate = state.focusDate;\r\n        }\r\n        // disabled\r\n        if ('disabled' in patch) {\r\n            state.focusVisible = false;\r\n        }\r\n        // initial rebuild via 'select()'\r\n        if ('selectedDate' in patch && this._state.months.length === 0) {\r\n            startDate = state.selectedDate;\r\n        }\r\n        // focus date changed\r\n        if ('focusDate' in patch) {\r\n            state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\r\n            startDate = state.focusDate;\r\n            // nothing to rebuild if only focus changed and it is still visible\r\n            if (state.months.length !== 0 && !state.focusDate.before(state.firstDate) &&\r\n                !state.focusDate.after(state.lastDate)) {\r\n                return state;\r\n            }\r\n        }\r\n        // first date changed\r\n        if ('firstDate' in patch) {\r\n            state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\r\n            startDate = state.firstDate;\r\n        }\r\n        // rebuilding months\r\n        if (startDate) {\r\n            var forceRebuild = 'firstDayOfWeek' in patch || 'markDisabled' in patch || 'minDate' in patch ||\r\n                'maxDate' in patch || 'disabled' in patch || 'outsideDays' in patch;\r\n            var months = buildMonths(this._calendar, startDate, state, this._i18n, forceRebuild);\r\n            // updating months and boundary dates\r\n            state.months = months;\r\n            state.firstDate = months.length > 0 ? months[0].firstDate : undefined;\r\n            state.lastDate = months.length > 0 ? months[months.length - 1].lastDate : undefined;\r\n            // reset selected date if 'markDisabled' returns true\r\n            if ('selectedDate' in patch && !isDateSelectable(state.selectedDate, state)) {\r\n                state.selectedDate = null;\r\n            }\r\n            // adjusting focus after months were built\r\n            if ('firstDate' in patch) {\r\n                if (state.focusDate === undefined || state.focusDate.before(state.firstDate) ||\r\n                    state.focusDate.after(state.lastDate)) {\r\n                    state.focusDate = startDate;\r\n                }\r\n            }\r\n            // adjusting months/years for the select box navigation\r\n            var yearChanged = !this._state.firstDate || this._state.firstDate.year !== state.firstDate.year;\r\n            var monthChanged = !this._state.firstDate || this._state.firstDate.month !== state.firstDate.month;\r\n            if (state.navigation === 'select') {\r\n                // years ->  boundaries (min/max were changed)\r\n                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.years.length === 0 || yearChanged) {\r\n                    state.selectBoxes.years = generateSelectBoxYears(state.firstDate, state.minDate, state.maxDate);\r\n                }\r\n                // months -> when current year or boundaries change\r\n                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.months.length === 0 || yearChanged) {\r\n                    state.selectBoxes.months =\r\n                        generateSelectBoxMonths(this._calendar, state.firstDate, state.minDate, state.maxDate);\r\n                }\r\n            }\r\n            else {\r\n                state.selectBoxes = { years: [], months: [] };\r\n            }\r\n            // updating navigation arrows -> boundaries change (min/max) or month/year changes\r\n            if ((state.navigation === 'arrows' || state.navigation === 'select') &&\r\n                (monthChanged || yearChanged || 'minDate' in patch || 'maxDate' in patch || 'disabled' in patch)) {\r\n                state.prevDisabled = state.disabled || prevMonthDisabled(this._calendar, state.firstDate, state.minDate);\r\n                state.nextDisabled = state.disabled || nextMonthDisabled(this._calendar, state.lastDate, state.maxDate);\r\n            }\r\n        }\r\n        return state;\r\n    };\r\n    NgbDatepickerService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDatepickerService.ctorParameters = function () { return [\r\n        { type: NgbCalendar, },\r\n        { type: NgbDatepickerI18n, },\r\n    ]; };\r\n    return NgbDatepickerService;\r\n}());\r\nexport { NgbDatepickerService };\r\n//# sourceMappingURL=datepicker-service.js.map","import { NgbDate } from './ngb-date';\r\nimport { isDefined } from '../util/util';\r\nexport function isChangedDate(prev, next) {\r\n    return !dateComparator(prev, next);\r\n}\r\nexport function dateComparator(prev, next) {\r\n    return (!prev && !next) || (!!prev && !!next && prev.equals(next));\r\n}\r\nexport function checkMinBeforeMax(minDate, maxDate) {\r\n    if (maxDate && minDate && maxDate.before(minDate)) {\r\n        throw new Error(\"'maxDate' \" + maxDate + \" should be greater than 'minDate' \" + minDate);\r\n    }\r\n}\r\nexport function checkDateInRange(date, minDate, maxDate) {\r\n    if (date && minDate && date.before(minDate)) {\r\n        return NgbDate.from(minDate);\r\n    }\r\n    if (date && maxDate && date.after(maxDate)) {\r\n        return NgbDate.from(maxDate);\r\n    }\r\n    return date;\r\n}\r\nexport function isDateSelectable(date, state) {\r\n    var minDate = state.minDate, maxDate = state.maxDate, disabled = state.disabled, markDisabled = state.markDisabled;\r\n    // clang-format off\r\n    return !(!isDefined(date) ||\r\n        disabled ||\r\n        (markDisabled && markDisabled(date, { year: date.year, month: date.month })) ||\r\n        (minDate && date.before(minDate)) ||\r\n        (maxDate && date.after(maxDate)));\r\n    // clang-format on\r\n}\r\nexport function generateSelectBoxMonths(calendar, date, minDate, maxDate) {\r\n    if (!date) {\r\n        return [];\r\n    }\r\n    var months = calendar.getMonths();\r\n    if (minDate && date.year === minDate.year) {\r\n        var index = months.findIndex(function (month) { return month === minDate.month; });\r\n        months = months.slice(index);\r\n    }\r\n    if (maxDate && date.year === maxDate.year) {\r\n        var index = months.findIndex(function (month) { return month === maxDate.month; });\r\n        months = months.slice(0, index + 1);\r\n    }\r\n    return months;\r\n}\r\nexport function generateSelectBoxYears(date, minDate, maxDate) {\r\n    if (!date) {\r\n        return [];\r\n    }\r\n    var start = minDate && minDate.year || date.year - 10;\r\n    var end = maxDate && maxDate.year || date.year + 10;\r\n    return Array.from({ length: end - start + 1 }, function (e, i) { return start + i; });\r\n}\r\nexport function nextMonthDisabled(calendar, date, maxDate) {\r\n    return maxDate && calendar.getNext(date, 'm').after(maxDate);\r\n}\r\nexport function prevMonthDisabled(calendar, date, minDate) {\r\n    var prevDate = calendar.getPrev(date, 'm');\r\n    return minDate && (prevDate.year === minDate.year && prevDate.month < minDate.month ||\r\n        prevDate.year < minDate.year && minDate.month === 1);\r\n}\r\nexport function buildMonths(calendar, date, state, i18n, force) {\r\n    var displayMonths = state.displayMonths, months = state.months;\r\n    // move old months to a temporary array\r\n    var monthsToReuse = months.splice(0, months.length);\r\n    // generate new first dates, nullify or reuse months\r\n    var firstDates = Array.from({ length: displayMonths }, function (_, i) {\r\n        var firstDate = calendar.getNext(date, 'm', i);\r\n        months[i] = null;\r\n        if (!force) {\r\n            var reusedIndex = monthsToReuse.findIndex(function (month) { return month.firstDate.equals(firstDate); });\r\n            // move reused month back to months\r\n            if (reusedIndex !== -1) {\r\n                months[i] = monthsToReuse.splice(reusedIndex, 1)[0];\r\n            }\r\n        }\r\n        return firstDate;\r\n    });\r\n    // rebuild nullified months\r\n    firstDates.forEach(function (firstDate, i) {\r\n        if (months[i] === null) {\r\n            months[i] = buildMonth(calendar, firstDate, state, i18n, monthsToReuse.shift() || {});\r\n        }\r\n    });\r\n    return months;\r\n}\r\nexport function buildMonth(calendar, date, state, i18n, month) {\r\n    if (month === void 0) { month = {}; }\r\n    var minDate = state.minDate, maxDate = state.maxDate, firstDayOfWeek = state.firstDayOfWeek, markDisabled = state.markDisabled, outsideDays = state.outsideDays;\r\n    month.firstDate = null;\r\n    month.lastDate = null;\r\n    month.number = date.month;\r\n    month.year = date.year;\r\n    month.weeks = month.weeks || [];\r\n    month.weekdays = month.weekdays || [];\r\n    date = getFirstViewDate(calendar, date, firstDayOfWeek);\r\n    // month has weeks\r\n    for (var week = 0; week < calendar.getWeeksPerMonth(); week++) {\r\n        var weekObject = month.weeks[week];\r\n        if (!weekObject) {\r\n            weekObject = month.weeks[week] = { number: 0, days: [], collapsed: true };\r\n        }\r\n        var days = weekObject.days;\r\n        // week has days\r\n        for (var day = 0; day < calendar.getDaysPerWeek(); day++) {\r\n            if (week === 0) {\r\n                month.weekdays[day] = calendar.getWeekday(date);\r\n            }\r\n            var newDate = new NgbDate(date.year, date.month, date.day);\r\n            var nextDate = calendar.getNext(newDate);\r\n            var ariaLabel = i18n.getDayAriaLabel(newDate);\r\n            // marking date as disabled\r\n            var disabled = !!((minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate)));\r\n            if (!disabled && markDisabled) {\r\n                disabled = markDisabled(newDate, { month: month.number, year: month.year });\r\n            }\r\n            // saving first date of the month\r\n            if (month.firstDate === null && newDate.month === month.number) {\r\n                month.firstDate = newDate;\r\n            }\r\n            // saving last date of the month\r\n            if (newDate.month === month.number && nextDate.month !== month.number) {\r\n                month.lastDate = newDate;\r\n            }\r\n            var dayObject = days[day];\r\n            if (!dayObject) {\r\n                dayObject = days[day] = {};\r\n            }\r\n            dayObject.date = newDate;\r\n            dayObject.context = Object.assign(dayObject.context || {}, {\r\n                date: { year: newDate.year, month: newDate.month, day: newDate.day },\r\n                currentMonth: month.number, disabled: disabled,\r\n                focused: false,\r\n                selected: false\r\n            });\r\n            dayObject.tabindex = -1;\r\n            dayObject.ariaLabel = ariaLabel;\r\n            dayObject.hidden = false;\r\n            date = nextDate;\r\n        }\r\n        weekObject.number = calendar.getWeekNumber(days.map(function (day) { return NgbDate.from(day.date); }), firstDayOfWeek);\r\n        // marking week as collapsed\r\n        weekObject.collapsed = outsideDays === 'collapsed' && days[0].date.month !== month.number &&\r\n            days[days.length - 1].date.month !== month.number;\r\n    }\r\n    return month;\r\n}\r\nexport function getFirstViewDate(calendar, date, firstDayOfWeek) {\r\n    var daysPerWeek = calendar.getDaysPerWeek();\r\n    var firstMonthDate = new NgbDate(date.year, date.month, 1);\r\n    var dayOfWeek = calendar.getWeekday(firstMonthDate) % daysPerWeek;\r\n    return calendar.getPrev(firstMonthDate, 'd', (daysPerWeek + dayOfWeek - firstDayOfWeek) % daysPerWeek);\r\n}\r\n//# sourceMappingURL=datepicker-tools.js.map","// clang-format on\r\n// clang-format on\r\nexport var NavigationEvent;\r\n// clang-format on\r\n(function (NavigationEvent) {\r\n    NavigationEvent[NavigationEvent[\"PREV\"] = 0] = \"PREV\";\r\n    NavigationEvent[NavigationEvent[\"NEXT\"] = 1] = \"NEXT\";\r\n})(NavigationEvent || (NavigationEvent = {}));\r\n//# sourceMappingURL=datepicker-view-model.js.map","import { take } from 'rxjs/operators';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, TemplateRef, forwardRef, EventEmitter, Output, ElementRef, NgZone } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NgbCalendar } from './ngb-calendar';\r\nimport { NgbDate } from './ngb-date';\r\nimport { NgbDatepickerService } from './datepicker-service';\r\nimport { NgbDatepickerKeyMapService } from './datepicker-keymap-service';\r\nimport { NavigationEvent } from './datepicker-view-model';\r\nimport { NgbDatepickerConfig } from './datepicker-config';\r\nimport { NgbDateAdapter } from './adapters/ngb-date-adapter';\r\nimport { NgbDatepickerI18n } from './datepicker-i18n';\r\nimport { isChangedDate } from './datepicker-tools';\r\nvar NGB_DATEPICKER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(function () { return NgbDatepicker; }),\r\n    multi: true\r\n};\r\n/**\r\n * A lightweight and highly configurable datepicker directive\r\n */\r\nvar NgbDatepicker = /** @class */ (function () {\r\n    function NgbDatepicker(_keyMapService, _service, _calendar, i18n, config, _cd, _elementRef, _ngbDateAdapter, _ngZone) {\r\n        var _this = this;\r\n        this._keyMapService = _keyMapService;\r\n        this._service = _service;\r\n        this._calendar = _calendar;\r\n        this.i18n = i18n;\r\n        this._cd = _cd;\r\n        this._elementRef = _elementRef;\r\n        this._ngbDateAdapter = _ngbDateAdapter;\r\n        this._ngZone = _ngZone;\r\n        /**\r\n           * An event fired when navigation happens and currently displayed month changes.\r\n           * See NgbDatepickerNavigateEvent for the payload info.\r\n           */\r\n        this.navigate = new EventEmitter();\r\n        /**\r\n           * An event fired when user selects a date using keyboard or mouse.\r\n           * The payload of the event is currently selected NgbDateStruct.\r\n           */\r\n        this.select = new EventEmitter();\r\n        this.onChange = function (_) { };\r\n        this.onTouched = function () { };\r\n        ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',\r\n            'outsideDays', 'showWeekdays', 'showWeekNumbers', 'startDate']\r\n            .forEach(function (input) { return _this[input] = config[input]; });\r\n        this._selectSubscription = _service.select$.subscribe(function (date) { _this.select.emit(date.toStruct()); });\r\n        this._subscription = _service.model$.subscribe(function (model) {\r\n            var newDate = model.firstDate;\r\n            var oldDate = _this.model ? _this.model.firstDate : null;\r\n            var newSelectedDate = model.selectedDate;\r\n            var oldSelectedDate = _this.model ? _this.model.selectedDate : null;\r\n            var newFocusedDate = model.focusDate;\r\n            var oldFocusedDate = _this.model ? _this.model.focusDate : null;\r\n            _this.model = model;\r\n            // handling selection change\r\n            if (isChangedDate(newSelectedDate, oldSelectedDate)) {\r\n                _this.onTouched();\r\n                _this.onChange(_this._ngbDateAdapter.toModel(newSelectedDate));\r\n            }\r\n            // handling focus change\r\n            if (isChangedDate(newFocusedDate, oldFocusedDate) && oldFocusedDate && model.focusVisible) {\r\n                _this.focus();\r\n            }\r\n            // emitting navigation event if the first month changes\r\n            if (!newDate.equals(oldDate)) {\r\n                _this.navigate.emit({\r\n                    current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,\r\n                    next: { year: newDate.year, month: newDate.month }\r\n                });\r\n            }\r\n            _cd.markForCheck();\r\n        });\r\n    }\r\n    /**\r\n     * Manually focus the focusable day in the datepicker\r\n     */\r\n    /**\r\n       * Manually focus the focusable day in the datepicker\r\n       */\r\n    NgbDatepicker.prototype.focus = /**\r\n       * Manually focus the focusable day in the datepicker\r\n       */\r\n    function () {\r\n        var _this = this;\r\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\r\n            var elementToFocus = _this._elementRef.nativeElement.querySelector('div.ngb-dp-day[tabindex=\"0\"]');\r\n            if (elementToFocus) {\r\n                elementToFocus.focus();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Navigates current view to provided date.\r\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n     * If nothing or invalid date provided calendar will open current month.\r\n     * Use 'startDate' input as an alternative\r\n     */\r\n    /**\r\n       * Navigates current view to provided date.\r\n       * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n       * If nothing or invalid date provided calendar will open current month.\r\n       * Use 'startDate' input as an alternative\r\n       */\r\n    NgbDatepicker.prototype.navigateTo = /**\r\n       * Navigates current view to provided date.\r\n       * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n       * If nothing or invalid date provided calendar will open current month.\r\n       * Use 'startDate' input as an alternative\r\n       */\r\n    function (date) { this._service.open(NgbDate.from(date)); };\r\n    NgbDatepicker.prototype.ngOnDestroy = function () {\r\n        this._subscription.unsubscribe();\r\n        this._selectSubscription.unsubscribe();\r\n    };\r\n    NgbDatepicker.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        if (this.model === undefined) {\r\n            ['displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate', 'outsideDays'].forEach(function (input) { return _this._service[input] = _this[input]; });\r\n            this.navigateTo(this.startDate);\r\n        }\r\n    };\r\n    NgbDatepicker.prototype.ngOnChanges = function (changes) {\r\n        var _this = this;\r\n        ['displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate', 'outsideDays']\r\n            .filter(function (input) { return input in changes; })\r\n            .forEach(function (input) { return _this._service[input] = _this[input]; });\r\n        if ('startDate' in changes) {\r\n            this.navigateTo(this.startDate);\r\n        }\r\n    };\r\n    NgbDatepicker.prototype.onDateSelect = function (date) {\r\n        this._service.focus(date);\r\n        this._service.select(date, { emitEvent: true });\r\n    };\r\n    NgbDatepicker.prototype.onKeyDown = function (event) { this._keyMapService.processKey(event); };\r\n    NgbDatepicker.prototype.onNavigateDateSelect = function (date) { this._service.open(date); };\r\n    NgbDatepicker.prototype.onNavigateEvent = function (event) {\r\n        switch (event) {\r\n            case NavigationEvent.PREV:\r\n                this._service.open(this._calendar.getPrev(this.model.firstDate, 'm', 1));\r\n                break;\r\n            case NavigationEvent.NEXT:\r\n                this._service.open(this._calendar.getNext(this.model.firstDate, 'm', 1));\r\n                break;\r\n        }\r\n    };\r\n    NgbDatepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };\r\n    NgbDatepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\r\n    NgbDatepicker.prototype.setDisabledState = function (isDisabled) { this._service.disabled = isDisabled; };\r\n    NgbDatepicker.prototype.showFocus = function (focusVisible) { this._service.focusVisible = focusVisible; };\r\n    NgbDatepicker.prototype.writeValue = function (value) { this._service.select(NgbDate.from(this._ngbDateAdapter.fromModel(value))); };\r\n    NgbDatepicker.decorators = [\r\n        { type: Component, args: [{\r\n                    exportAs: 'ngbDatepicker',\r\n                    selector: 'ngb-datepicker',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    styles: [\"\\n    :host {\\n      border: 1px solid #dfdfdf;\\n      border-radius: 0.25rem;\\n      display: inline-block;\\n    }\\n    .ngb-dp-month {\\n      pointer-events: none;\\n    }\\n    .ngb-dp-header {\\n      border-bottom: 0;\\n      border-radius: 0.25rem 0.25rem 0 0;\\n      padding-top: 0.25rem;\\n    }\\n    ngb-datepicker-month-view {\\n      pointer-events: auto;\\n    }\\n    .ngb-dp-month-name {\\n      font-size: larger;\\n      height: 2rem;\\n      line-height: 2rem;\\n      text-align: center;\\n    }\\n    /deep/ .ngb-dp-month + .ngb-dp-month > ngb-datepicker-month-view > .ngb-dp-week {\\n      padding-left: 1rem;\\n    }\\n    /deep/ .ngb-dp-month + .ngb-dp-month > .ngb-dp-month-name {\\n      padding-left: 1rem;\\n    }\\n    /deep/ .ngb-dp-month:last-child .ngb-dp-week {\\n      padding-right: .25rem;\\n    }\\n    /deep/ .ngb-dp-month:first-child .ngb-dp-week {\\n      padding-left: .25rem;\\n    }\\n    /deep/ .ngb-dp-month > ngb-datepicker-month-view > .ngb-dp-week:last-child {\\n      padding-bottom: .25rem;\\n    }\\n    .ngb-dp-months {\\n      display: -ms-flexbox;\\n      display: flex;\\n    }\\n  \"],\r\n                    template: \"\\n    <ng-template #dt let-date=\\\"date\\\" let-currentMonth=\\\"currentMonth\\\" let-selected=\\\"selected\\\" let-disabled=\\\"disabled\\\" let-focused=\\\"focused\\\">\\n      <div ngbDatepickerDayView\\n        [date]=\\\"date\\\"\\n        [currentMonth]=\\\"currentMonth\\\"\\n        [selected]=\\\"selected\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [focused]=\\\"focused\\\">\\n      </div>\\n    </ng-template>\\n\\n    <div class=\\\"ngb-dp-header bg-light\\\">\\n      <ngb-datepicker-navigation *ngIf=\\\"navigation !== 'none'\\\"\\n        [date]=\\\"model.firstDate\\\"\\n        [months]=\\\"model.months\\\"\\n        [disabled]=\\\"model.disabled\\\"\\n        [showSelect]=\\\"model.navigation === 'select'\\\"\\n        [prevDisabled]=\\\"model.prevDisabled\\\"\\n        [nextDisabled]=\\\"model.nextDisabled\\\"\\n        [selectBoxes]=\\\"model.selectBoxes\\\"\\n        (navigate)=\\\"onNavigateEvent($event)\\\"\\n        (select)=\\\"onNavigateDateSelect($event)\\\">\\n      </ngb-datepicker-navigation>\\n    </div>\\n\\n    <div class=\\\"ngb-dp-months\\\" (keydown)=\\\"onKeyDown($event)\\\" (focusin)=\\\"showFocus(true)\\\" (focusout)=\\\"showFocus(false)\\\">\\n      <ng-template ngFor let-month [ngForOf]=\\\"model.months\\\" let-i=\\\"index\\\">\\n        <div class=\\\"ngb-dp-month\\\">\\n          <div *ngIf=\\\"navigation === 'none' || (displayMonths > 1 && navigation === 'select')\\\"\\n                class=\\\"ngb-dp-month-name bg-light\\\">\\n            {{ i18n.getMonthFullName(month.number) }} {{ month.year }}\\n          </div>\\n          <ngb-datepicker-month-view\\n            [month]=\\\"month\\\"\\n            [dayTemplate]=\\\"dayTemplate || dt\\\"\\n            [showWeekdays]=\\\"showWeekdays\\\"\\n            [showWeekNumbers]=\\\"showWeekNumbers\\\"\\n            (select)=\\\"onDateSelect($event)\\\">\\n          </ngb-datepicker-month-view>\\n        </div>\\n      </ng-template>\\n    </div>\\n  \",\r\n                    providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NgbDatepickerService, NgbDatepickerKeyMapService]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDatepicker.ctorParameters = function () { return [\r\n        { type: NgbDatepickerKeyMapService, },\r\n        { type: NgbDatepickerService, },\r\n        { type: NgbCalendar, },\r\n        { type: NgbDatepickerI18n, },\r\n        { type: NgbDatepickerConfig, },\r\n        { type: ChangeDetectorRef, },\r\n        { type: ElementRef, },\r\n        { type: NgbDateAdapter, },\r\n        { type: NgZone, },\r\n    ]; };\r\n    NgbDatepicker.propDecorators = {\r\n        \"dayTemplate\": [{ type: Input },],\r\n        \"displayMonths\": [{ type: Input },],\r\n        \"firstDayOfWeek\": [{ type: Input },],\r\n        \"markDisabled\": [{ type: Input },],\r\n        \"maxDate\": [{ type: Input },],\r\n        \"minDate\": [{ type: Input },],\r\n        \"navigation\": [{ type: Input },],\r\n        \"outsideDays\": [{ type: Input },],\r\n        \"showWeekdays\": [{ type: Input },],\r\n        \"showWeekNumbers\": [{ type: Input },],\r\n        \"startDate\": [{ type: Input },],\r\n        \"navigate\": [{ type: Output },],\r\n        \"select\": [{ type: Output },],\r\n    };\r\n    return NgbDatepicker;\r\n}());\r\nexport { NgbDatepicker };\r\n//# sourceMappingURL=datepicker.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule, DatePipe } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgbDatepicker } from './datepicker';\r\nimport { NgbDatepickerMonthView } from './datepicker-month-view';\r\nimport { NgbDatepickerNavigation } from './datepicker-navigation';\r\nimport { NgbInputDatepicker } from './datepicker-input';\r\nimport { NgbDatepickerDayView } from './datepicker-day-view';\r\nimport { NgbDatepickerI18n, NgbDatepickerI18nDefault } from './datepicker-i18n';\r\nimport { NgbCalendar, NgbCalendarGregorian } from './ngb-calendar';\r\nimport { NgbDateParserFormatter, NgbDateISOParserFormatter } from './ngb-date-parser-formatter';\r\nimport { NgbDateAdapter, NgbDateStructAdapter } from './adapters/ngb-date-adapter';\r\nimport { NgbDatepickerNavigationSelect } from './datepicker-navigation-select';\r\nimport { NgbDatepickerConfig } from './datepicker-config';\r\nexport { NgbDatepicker } from './datepicker';\r\nexport { NgbInputDatepicker } from './datepicker-input';\r\nexport { NgbCalendar } from './ngb-calendar';\r\nexport { NgbCalendarIslamicCivil } from './hijri/ngb-calendar-islamic-civil';\r\nexport { NgbCalendarIslamicUmalqura } from './hijri/ngb-calendar-islamic-umalqura';\r\nexport { NgbDatepickerMonthView } from './datepicker-month-view';\r\nexport { NgbDatepickerDayView } from './datepicker-day-view';\r\nexport { NgbDatepickerNavigation } from './datepicker-navigation';\r\nexport { NgbDatepickerNavigationSelect } from './datepicker-navigation-select';\r\nexport { NgbDatepickerConfig } from './datepicker-config';\r\nexport { NgbDatepickerI18n } from './datepicker-i18n';\r\nexport { NgbDateAdapter } from './adapters/ngb-date-adapter';\r\nexport { NgbDateNativeAdapter } from './adapters/ngb-date-native-adapter';\r\nexport { NgbDateParserFormatter } from './ngb-date-parser-formatter';\r\nvar NgbDatepickerModule = /** @class */ (function () {\r\n    function NgbDatepickerModule() {\r\n    }\r\n    NgbDatepickerModule.forRoot = function () {\r\n        return {\r\n            ngModule: NgbDatepickerModule,\r\n            providers: [\r\n                { provide: NgbCalendar, useClass: NgbCalendarGregorian },\r\n                { provide: NgbDatepickerI18n, useClass: NgbDatepickerI18nDefault },\r\n                { provide: NgbDateParserFormatter, useClass: NgbDateISOParserFormatter },\r\n                { provide: NgbDateAdapter, useClass: NgbDateStructAdapter }, NgbDatepickerConfig, DatePipe\r\n            ]\r\n        };\r\n    };\r\n    NgbDatepickerModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    declarations: [\r\n                        NgbDatepicker, NgbDatepickerMonthView, NgbDatepickerNavigation, NgbDatepickerNavigationSelect, NgbDatepickerDayView,\r\n                        NgbInputDatepicker\r\n                    ],\r\n                    exports: [NgbDatepicker, NgbInputDatepicker],\r\n                    imports: [CommonModule, FormsModule],\r\n                    entryComponents: [NgbDatepicker]\r\n                },] },\r\n    ];\r\n    return NgbDatepickerModule;\r\n}());\r\nexport { NgbDatepickerModule };\r\n//# sourceMappingURL=datepicker.module.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { NgbCalendar } from '../ngb-calendar';\r\nimport { Injectable } from '@angular/core';\r\nimport { isNumber } from '../../util/util';\r\nvar NgbCalendarHijri = /** @class */ (function (_super) {\r\n    __extends(NgbCalendarHijri, _super);\r\n    function NgbCalendarHijri() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NgbCalendarHijri.prototype.getDaysPerWeek = function () { return 7; };\r\n    NgbCalendarHijri.prototype.getMonths = function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\r\n    NgbCalendarHijri.prototype.getWeeksPerMonth = function () { return 6; };\r\n    NgbCalendarHijri.prototype.isValid = function (date) {\r\n        return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&\r\n            !isNaN(this.toGregorian(date).getTime());\r\n    };\r\n    NgbCalendarHijri.prototype.setDay = function (date, day) {\r\n        day = +day;\r\n        var mDays = this.getDaysInIslamicMonth(date.month, date.year);\r\n        if (day <= 0) {\r\n            while (day <= 0) {\r\n                date = this.setMonth(date, date.month - 1);\r\n                mDays = this.getDaysInIslamicMonth(date.month, date.year);\r\n                day += mDays;\r\n            }\r\n        }\r\n        else if (day > mDays) {\r\n            while (day > mDays) {\r\n                day -= mDays;\r\n                date = this.setMonth(date, date.month + 1);\r\n                mDays = this.getDaysInIslamicMonth(date.month, date.year);\r\n            }\r\n        }\r\n        date.day = day;\r\n        return date;\r\n    };\r\n    NgbCalendarHijri.prototype.setMonth = function (date, month) {\r\n        month = +month;\r\n        date.year = date.year + Math.floor((month - 1) / 12);\r\n        date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\r\n        return date;\r\n    };\r\n    NgbCalendarHijri.prototype.setYear = function (date, yearValue) {\r\n        date.year = +yearValue;\r\n        return date;\r\n    };\r\n    NgbCalendarHijri.prototype._isIslamicLeapYear = function (year) { return (14 + 11 * year) % 30 < 11; };\r\n    /**\r\n     * Returns the start of Hijri Month.\r\n     * `month` is 0 for Muharram, 1 for Safar, etc.\r\n     * `year` is any Hijri year.\r\n     */\r\n    /**\r\n       * Returns the start of Hijri Month.\r\n       * `month` is 0 for Muharram, 1 for Safar, etc.\r\n       * `year` is any Hijri year.\r\n       */\r\n    NgbCalendarHijri.prototype._getMonthStart = /**\r\n       * Returns the start of Hijri Month.\r\n       * `month` is 0 for Muharram, 1 for Safar, etc.\r\n       * `year` is any Hijri year.\r\n       */\r\n    function (year, month) {\r\n        return Math.ceil(29.5 * month) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0);\r\n    };\r\n    /**\r\n     * Returns the start of Hijri year.\r\n     * `year` is any Hijri year.\r\n     */\r\n    /**\r\n       * Returns the start of Hijri year.\r\n       * `year` is any Hijri year.\r\n       */\r\n    NgbCalendarHijri.prototype._getYearStart = /**\r\n       * Returns the start of Hijri year.\r\n       * `year` is any Hijri year.\r\n       */\r\n    function (year) { return (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0); };\r\n    NgbCalendarHijri.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbCalendarHijri;\r\n}(NgbCalendar));\r\nexport { NgbCalendarHijri };\r\n//# sourceMappingURL=ngb-calendar-hijri.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { NgbCalendarHijri } from './ngb-calendar-hijri';\r\nimport { NgbDate } from '../ngb-date';\r\nimport { Injectable } from '@angular/core';\r\nfunction isGregorianLeapYear(date) {\r\n    var year = date.getFullYear();\r\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\r\n}\r\nfunction mod(a, b) {\r\n    return a - b * Math.floor(a / b);\r\n}\r\n/**\r\n * The civil calendar is one type of Hijri calendars used in islamic countries.\r\n * Uses a fixed cycle of alternating 29- and 30-day months,\r\n * with a leap day added to the last month of 11 out of every 30 years.\r\n * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\r\n * All the calculations here are based on the equations from \"Calendrical Calculations\" By Edward M. Reingold, Nachum\r\n * Dershowitz.\r\n */\r\nvar GREGORIAN_EPOCH = 1721425.5;\r\nvar ISLAMIC_EPOCH = 1948439.5;\r\nvar NgbCalendarIslamicCivil = /** @class */ (function (_super) {\r\n    __extends(NgbCalendarIslamicCivil, _super);\r\n    function NgbCalendarIslamicCivil() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\r\n     * `gdate` is a JS Date to be converted to Hijri.\r\n     */\r\n    /**\r\n       * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\r\n       * `gdate` is a JS Date to be converted to Hijri.\r\n       */\r\n    NgbCalendarIslamicCivil.prototype.fromGregorian = /**\r\n       * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\r\n       * `gdate` is a JS Date to be converted to Hijri.\r\n       */\r\n    function (gdate) {\r\n        var date = new Date(gdate);\r\n        var gYear = date.getFullYear(), gMonth = date.getMonth(), gDay = date.getDate();\r\n        var julianDay = GREGORIAN_EPOCH - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) +\r\n            -Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\r\n            Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear(date) ? -1 : -2) + gDay);\r\n        julianDay = Math.floor(julianDay) + 0.5;\r\n        var days = julianDay - ISLAMIC_EPOCH;\r\n        var hYear = Math.floor((30 * days + 10646) / 10631.0);\r\n        var hMonth = Math.ceil((days - 29 - this._getYearStart(hYear)) / 29.5);\r\n        hMonth = Math.min(hMonth, 11);\r\n        var hDay = Math.ceil(days - this._getMonthStart(hYear, hMonth)) + 1;\r\n        return new NgbDate(hYear, hMonth + 1, hDay);\r\n    };\r\n    /**\r\n     * Returns the equivalent JS date value for a give input islamic(civil) date.\r\n     * `hijriDate` is an islamic(civil) date to be converted to Gregorian.\r\n     */\r\n    /**\r\n       * Returns the equivalent JS date value for a give input islamic(civil) date.\r\n       * `hijriDate` is an islamic(civil) date to be converted to Gregorian.\r\n       */\r\n    NgbCalendarIslamicCivil.prototype.toGregorian = /**\r\n       * Returns the equivalent JS date value for a give input islamic(civil) date.\r\n       * `hijriDate` is an islamic(civil) date to be converted to Gregorian.\r\n       */\r\n    function (hijriDate) {\r\n        var hYear = hijriDate.year;\r\n        var hMonth = hijriDate.month - 1;\r\n        var hDate = hijriDate.day;\r\n        var julianDay = hDate + Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30) + ISLAMIC_EPOCH - 1;\r\n        var wjd = Math.floor(julianDay - 0.5) + 0.5, depoch = wjd - GREGORIAN_EPOCH, quadricent = Math.floor(depoch / 146097), dqc = mod(depoch, 146097), cent = Math.floor(dqc / 36524), dcent = mod(dqc, 36524), quad = Math.floor(dcent / 1461), dquad = mod(dcent, 1461), yindex = Math.floor(dquad / 365);\r\n        var year = quadricent * 400 + cent * 100 + quad * 4 + yindex;\r\n        if (!(cent === 4 || yindex === 4)) {\r\n            year++;\r\n        }\r\n        var gYearStart = GREGORIAN_EPOCH + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\r\n            Math.floor((year - 1) / 400);\r\n        var yearday = wjd - gYearStart;\r\n        var tjd = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\r\n            Math.floor((year - 1) / 400) + Math.floor(739 / 12 + (isGregorianLeapYear(new Date(year, 3, 1)) ? -1 : -2) + 1);\r\n        var leapadj = wjd < tjd ? 0 : isGregorianLeapYear(new Date(year, 3, 1)) ? 1 : 2;\r\n        var month = Math.floor(((yearday + leapadj) * 12 + 373) / 367);\r\n        var tjd2 = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\r\n            Math.floor((year - 1) / 400) +\r\n            Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : isGregorianLeapYear(new Date(year, month - 1, 1)) ? -1 : -2) +\r\n                1);\r\n        var day = wjd - tjd2 + 1;\r\n        return new Date(year, month - 1, day);\r\n    };\r\n    /**\r\n     * Returns the number of days in a specific Hijri month.\r\n     * `month` is 1 for Muharram, 2 for Safar, etc.\r\n     * `year` is any Hijri year.\r\n     */\r\n    /**\r\n       * Returns the number of days in a specific Hijri month.\r\n       * `month` is 1 for Muharram, 2 for Safar, etc.\r\n       * `year` is any Hijri year.\r\n       */\r\n    NgbCalendarIslamicCivil.prototype.getDaysInIslamicMonth = /**\r\n       * Returns the number of days in a specific Hijri month.\r\n       * `month` is 1 for Muharram, 2 for Safar, etc.\r\n       * `year` is any Hijri year.\r\n       */\r\n    function (month, year) {\r\n        year = year + Math.floor(month / 13);\r\n        month = ((month - 1) % 12) + 1;\r\n        var length = 29 + month % 2;\r\n        if (month === 12 && this._isIslamicLeapYear(year)) {\r\n            length++;\r\n        }\r\n        return length;\r\n    };\r\n    NgbCalendarIslamicCivil.prototype.getNext = function (date, period, number) {\r\n        if (period === void 0) { period = 'd'; }\r\n        if (number === void 0) { number = 1; }\r\n        date = NgbDate.from(date);\r\n        switch (period) {\r\n            case 'y':\r\n                date = this.setYear(date, date.year + number);\r\n                date.month = 1;\r\n                date.day = 1;\r\n                return date;\r\n            case 'm':\r\n                date = this.setMonth(date, date.month + number);\r\n                date.day = 1;\r\n                return date;\r\n            case 'd':\r\n                return this.setDay(date, date.day + number);\r\n            default:\r\n                return date;\r\n        }\r\n    };\r\n    NgbCalendarIslamicCivil.prototype.getPrev = function (date, period, number) {\r\n        if (period === void 0) { period = 'd'; }\r\n        if (number === void 0) { number = 1; }\r\n        return this.getNext(date, period, -number);\r\n    };\r\n    NgbCalendarIslamicCivil.prototype.getWeekday = function (date) {\r\n        var day = this.toGregorian(date).getDay();\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        return day === 0 ? 7 : day;\r\n    };\r\n    NgbCalendarIslamicCivil.prototype.getWeekNumber = function (week, firstDayOfWeek) {\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        if (firstDayOfWeek === 7) {\r\n            firstDayOfWeek = 0;\r\n        }\r\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\r\n        var date = week[thursdayIndex];\r\n        var jsDate = this.toGregorian(date);\r\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\r\n        var time = jsDate.getTime();\r\n        var MuhDate = this.toGregorian(new NgbDate(date.year, 1, 1)); // Compare with Muharram 1\r\n        return Math.floor(Math.round((time - MuhDate.getTime()) / 86400000) / 7) + 1;\r\n    };\r\n    NgbCalendarIslamicCivil.prototype.getToday = function () { return this.fromGregorian(new Date()); };\r\n    NgbCalendarIslamicCivil.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbCalendarIslamicCivil;\r\n}(NgbCalendarHijri));\r\nexport { NgbCalendarIslamicCivil };\r\n//# sourceMappingURL=ngb-calendar-islamic-civil.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { NgbCalendarIslamicCivil } from './ngb-calendar-islamic-civil';\r\nimport { NgbCalendarHijri } from './ngb-calendar-hijri';\r\nimport { NgbDate } from '../ngb-date';\r\nimport { Injectable } from '@angular/core';\r\n/**\r\n * Umalqura calendar is one type of Hijri calendars used in islamic countries.\r\n * This Calendar is used by Saudi Arabia for administrative purpose.\r\n * Unlike tabular calendars, the algorithm involves astronomical calculation, but it's still deterministic.\r\n * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\r\n */\r\nvar GREGORIAN_FIRST_DATE = new Date(1882, 10, 12);\r\nvar GREGORIAN_LAST_DATE = new Date(2174, 10, 25);\r\nvar HIJRI_BEGIN = 1300;\r\nvar HIJRI_END = 1600;\r\nvar ONE_DAY = 1000 * 60 * 60 * 24;\r\nvar ISLAMIC_CIVIL = new NgbCalendarIslamicCivil();\r\nvar MONTH_LENGTH = [\r\n    '101010101010', '110101010100', '111011001001', '011011010100', '011011101010',\r\n    '001101101100', '101010101101', '010101010101', '011010101001', '011110010010',\r\n    '101110101001', '010111010100', '101011011010', '010101011100', '110100101101',\r\n    '011010010101', '011101001010', '101101010100', '101101101010', '010110101101',\r\n    '010010101110', '101001001111', '010100010111', '011010001011', '011010100101',\r\n    '101011010101', '001011010110', '100101011011', '010010011101', '101001001101',\r\n    '110100100110', '110110010101', '010110101100', '100110110110', '001010111010',\r\n    '101001011011', '010100101011', '101010010101', '011011001010', '101011101001',\r\n    '001011110100', '100101110110', '001010110110', '100101010110', '101011001010',\r\n    '101110100100', '101111010010', '010111011001', '001011011100', '100101101101',\r\n    '010101001101', '101010100101', '101101010010', '101110100101', '010110110100',\r\n    '100110110110', '010101010111', '001010010111', '010101001011', '011010100011',\r\n    '011101010010', '101101100101', '010101101010', '101010101011', '010100101011',\r\n    '110010010101', '110101001010', '110110100101', '010111001010', '101011010110',\r\n    '100101010111', '010010101011', '100101001011', '101010100101', '101101010010',\r\n    '101101101010', '010101110101', '001001110110', '100010110111', '010001011011',\r\n    '010101010101', '010110101001', '010110110100', '100111011010', '010011011101',\r\n    '001001101110', '100100110110', '101010101010', '110101010100', '110110110010',\r\n    '010111010101', '001011011010', '100101011011', '010010101011', '101001010101',\r\n    '101101001001', '101101100100', '101101110001', '010110110100', '101010110101',\r\n    '101001010101', '110100100101', '111010010010', '111011001001', '011011010100',\r\n    '101011101001', '100101101011', '010010101011', '101010010011', '110101001001',\r\n    '110110100100', '110110110010', '101010111001', '010010111010', '101001011011',\r\n    '010100101011', '101010010101', '101100101010', '101101010101', '010101011100',\r\n    '010010111101', '001000111101', '100100011101', '101010010101', '101101001010',\r\n    '101101011010', '010101101101', '001010110110', '100100111011', '010010011011',\r\n    '011001010101', '011010101001', '011101010100', '101101101010', '010101101100',\r\n    '101010101101', '010101010101', '101100101001', '101110010010', '101110101001',\r\n    '010111010100', '101011011010', '010101011010', '101010101011', '010110010101',\r\n    '011101001001', '011101100100', '101110101010', '010110110101', '001010110110',\r\n    '101001010110', '111001001101', '101100100101', '101101010010', '101101101010',\r\n    '010110101101', '001010101110', '100100101111', '010010010111', '011001001011',\r\n    '011010100101', '011010101100', '101011010110', '010101011101', '010010011101',\r\n    '101001001101', '110100010110', '110110010101', '010110101010', '010110110101',\r\n    '001011011010', '100101011011', '010010101101', '010110010101', '011011001010',\r\n    '011011100100', '101011101010', '010011110101', '001010110110', '100101010110',\r\n    '101010101010', '101101010100', '101111010010', '010111011001', '001011101010',\r\n    '100101101101', '010010101101', '101010010101', '101101001010', '101110100101',\r\n    '010110110010', '100110110101', '010011010110', '101010010111', '010101000111',\r\n    '011010010011', '011101001001', '101101010101', '010101101010', '101001101011',\r\n    '010100101011', '101010001011', '110101000110', '110110100011', '010111001010',\r\n    '101011010110', '010011011011', '001001101011', '100101001011', '101010100101',\r\n    '101101010010', '101101101001', '010101110101', '000101110110', '100010110111',\r\n    '001001011011', '010100101011', '010101100101', '010110110100', '100111011010',\r\n    '010011101101', '000101101101', '100010110110', '101010100110', '110101010010',\r\n    '110110101001', '010111010100', '101011011010', '100101011011', '010010101011',\r\n    '011001010011', '011100101001', '011101100010', '101110101001', '010110110010',\r\n    '101010110101', '010101010101', '101100100101', '110110010010', '111011001001',\r\n    '011011010010', '101011101001', '010101101011', '010010101011', '101001010101',\r\n    '110100101001', '110101010100', '110110101010', '100110110101', '010010111010',\r\n    '101000111011', '010010011011', '101001001101', '101010101010', '101011010101',\r\n    '001011011010', '100101011101', '010001011110', '101000101110', '110010011010',\r\n    '110101010101', '011010110010', '011010111001', '010010111010', '101001011101',\r\n    '010100101101', '101010010101', '101101010010', '101110101000', '101110110100',\r\n    '010110111001', '001011011010', '100101011010', '101101001010', '110110100100',\r\n    '111011010001', '011011101000', '101101101010', '010101101101', '010100110101',\r\n    '011010010101', '110101001010', '110110101000', '110111010100', '011011011010',\r\n    '010101011011', '001010011101', '011000101011', '101100010101', '101101001010',\r\n    '101110010101', '010110101010', '101010101110', '100100101110', '110010001111',\r\n    '010100100111', '011010010101', '011010101010', '101011010110', '010101011101',\r\n    '001010011101'\r\n];\r\nfunction getDaysDiff(date1, date2) {\r\n    var diff = Math.abs(date1.getTime() - date2.getTime());\r\n    return Math.round(diff / ONE_DAY);\r\n}\r\nvar NgbCalendarIslamicUmalqura = /** @class */ (function (_super) {\r\n    __extends(NgbCalendarIslamicUmalqura, _super);\r\n    function NgbCalendarIslamicUmalqura() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n    * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\r\n    * `gdate` is s JS Date to be converted to Hijri.\r\n    */\r\n    /**\r\n      * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\r\n      * `gdate` is s JS Date to be converted to Hijri.\r\n      */\r\n    NgbCalendarIslamicUmalqura.prototype.fromGregorian = /**\r\n      * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\r\n      * `gdate` is s JS Date to be converted to Hijri.\r\n      */\r\n    function (gDate) {\r\n        var hDay = 1, hMonth = 0, hYear = 1300;\r\n        var daysDiff = getDaysDiff(gDate, GREGORIAN_FIRST_DATE);\r\n        if (gDate.getTime() - GREGORIAN_FIRST_DATE.getTime() >= 0 && gDate.getTime() - GREGORIAN_LAST_DATE.getTime() <= 0) {\r\n            var year = 1300;\r\n            for (var i = 0; i < MONTH_LENGTH.length; i++, year++) {\r\n                for (var j = 0; j < 12; j++) {\r\n                    var numOfDays = +MONTH_LENGTH[i][j] + 29;\r\n                    if (daysDiff <= numOfDays) {\r\n                        hDay = daysDiff + 1;\r\n                        if (hDay > numOfDays) {\r\n                            hDay = 1;\r\n                            j++;\r\n                        }\r\n                        if (j > 11) {\r\n                            j = 0;\r\n                            year++;\r\n                        }\r\n                        hMonth = j;\r\n                        hYear = year;\r\n                        return new NgbDate(hYear, hMonth + 1, hDay);\r\n                    }\r\n                    daysDiff = daysDiff - numOfDays;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return ISLAMIC_CIVIL.fromGregorian(gDate);\r\n        }\r\n    };\r\n    /**\r\n    * Converts the current Hijri date to Gregorian.\r\n    */\r\n    /**\r\n      * Converts the current Hijri date to Gregorian.\r\n      */\r\n    NgbCalendarIslamicUmalqura.prototype.toGregorian = /**\r\n      * Converts the current Hijri date to Gregorian.\r\n      */\r\n    function (hijriDate) {\r\n        var hYear = hijriDate.year;\r\n        var hMonth = hijriDate.month - 1;\r\n        var hDay = hijriDate.day;\r\n        var gDate = new Date(GREGORIAN_FIRST_DATE);\r\n        var dayDiff = hDay - 1;\r\n        if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {\r\n            for (var y = 0; y < hYear - HIJRI_BEGIN; y++) {\r\n                for (var m = 0; m < 12; m++) {\r\n                    dayDiff += +MONTH_LENGTH[y][m] + 29;\r\n                }\r\n            }\r\n            for (var m = 0; m < hMonth; m++) {\r\n                dayDiff += +MONTH_LENGTH[hYear - HIJRI_BEGIN][m] + 29;\r\n            }\r\n            gDate.setDate(GREGORIAN_FIRST_DATE.getDate() + dayDiff);\r\n        }\r\n        else {\r\n            gDate = ISLAMIC_CIVIL.toGregorian(hijriDate);\r\n        }\r\n        return gDate;\r\n    };\r\n    /**\r\n    * Returns the number of days in a specific Hijri month.\r\n    * `month` is 1 for Muharram, 2 for Safar, etc.\r\n    * `year` is any Hijri year.\r\n    */\r\n    /**\r\n      * Returns the number of days in a specific Hijri month.\r\n      * `month` is 1 for Muharram, 2 for Safar, etc.\r\n      * `year` is any Hijri year.\r\n      */\r\n    NgbCalendarIslamicUmalqura.prototype.getDaysInIslamicMonth = /**\r\n      * Returns the number of days in a specific Hijri month.\r\n      * `month` is 1 for Muharram, 2 for Safar, etc.\r\n      * `year` is any Hijri year.\r\n      */\r\n    function (month, year) {\r\n        if (year >= HIJRI_BEGIN && year <= HIJRI_END) {\r\n            var pos = year - HIJRI_BEGIN;\r\n            return MONTH_LENGTH[pos].charAt(month - 1) === '1' ? 30 : 29;\r\n        }\r\n        return ISLAMIC_CIVIL.getDaysInIslamicMonth(month, year);\r\n    };\r\n    NgbCalendarIslamicUmalqura.prototype.getNext = function (date, period, number) {\r\n        if (period === void 0) { period = 'd'; }\r\n        if (number === void 0) { number = 1; }\r\n        date = NgbDate.from(date);\r\n        switch (period) {\r\n            case 'y':\r\n                date = this.setYear(date, date.year + number);\r\n                date.month = 1;\r\n                date.day = 1;\r\n                return date;\r\n            case 'm':\r\n                date = this.setMonth(date, date.month + number);\r\n                date.day = 1;\r\n                return date;\r\n            case 'd':\r\n                return this.setDay(date, date.day + number);\r\n            default:\r\n                return date;\r\n        }\r\n    };\r\n    NgbCalendarIslamicUmalqura.prototype.getPrev = function (date, period, number) {\r\n        if (period === void 0) { period = 'd'; }\r\n        if (number === void 0) { number = 1; }\r\n        return this.getNext(date, period, -number);\r\n    };\r\n    NgbCalendarIslamicUmalqura.prototype.getWeekday = function (date) {\r\n        var day = this.toGregorian(date).getDay();\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        return day === 0 ? 7 : day;\r\n    };\r\n    NgbCalendarIslamicUmalqura.prototype.getWeekNumber = function (week, firstDayOfWeek) {\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        if (firstDayOfWeek === 7) {\r\n            firstDayOfWeek = 0;\r\n        }\r\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\r\n        var date = week[thursdayIndex];\r\n        var jsDate = this.toGregorian(date);\r\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\r\n        var time = jsDate.getTime();\r\n        var MuhDate = this.toGregorian(new NgbDate(date.year, 1, 1)); // Compare with Muharram 1\r\n        return Math.floor(Math.round((time - MuhDate.getTime()) / ONE_DAY) / 7) + 1;\r\n    };\r\n    NgbCalendarIslamicUmalqura.prototype.getToday = function () { return this.fromGregorian(new Date()); };\r\n    NgbCalendarIslamicUmalqura.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbCalendarIslamicUmalqura;\r\n}(NgbCalendarHijri));\r\nexport { NgbCalendarIslamicUmalqura };\r\n//# sourceMappingURL=ngb-calendar-islamic-umalqura.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { NgbDate } from './ngb-date';\r\nimport { Injectable } from '@angular/core';\r\nimport { isInteger } from '../util/util';\r\nfunction fromJSDate(jsDate) {\r\n    return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());\r\n}\r\nfunction toJSDate(date) {\r\n    var jsDate = new Date(date.year, date.month - 1, date.day, 12);\r\n    // this is done avoid 30 -> 1930 conversion\r\n    if (!isNaN(jsDate.getTime())) {\r\n        jsDate.setFullYear(date.year);\r\n    }\r\n    return jsDate;\r\n}\r\nvar NgbCalendar = /** @class */ (function () {\r\n    function NgbCalendar() {\r\n    }\r\n    NgbCalendar.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbCalendar;\r\n}());\r\nexport { NgbCalendar };\r\nvar NgbCalendarGregorian = /** @class */ (function (_super) {\r\n    __extends(NgbCalendarGregorian, _super);\r\n    function NgbCalendarGregorian() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NgbCalendarGregorian.prototype.getDaysPerWeek = function () { return 7; };\r\n    NgbCalendarGregorian.prototype.getMonths = function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\r\n    NgbCalendarGregorian.prototype.getWeeksPerMonth = function () { return 6; };\r\n    NgbCalendarGregorian.prototype.getNext = function (date, period, number) {\r\n        if (period === void 0) { period = 'd'; }\r\n        if (number === void 0) { number = 1; }\r\n        var jsDate = toJSDate(date);\r\n        switch (period) {\r\n            case 'y':\r\n                return new NgbDate(date.year + number, 1, 1);\r\n            case 'm':\r\n                jsDate = new Date(date.year, date.month + number - 1, 1, 12);\r\n                break;\r\n            case 'd':\r\n                jsDate.setDate(jsDate.getDate() + number);\r\n                break;\r\n            default:\r\n                return date;\r\n        }\r\n        return fromJSDate(jsDate);\r\n    };\r\n    NgbCalendarGregorian.prototype.getPrev = function (date, period, number) {\r\n        if (period === void 0) { period = 'd'; }\r\n        if (number === void 0) { number = 1; }\r\n        return this.getNext(date, period, -number);\r\n    };\r\n    NgbCalendarGregorian.prototype.getWeekday = function (date) {\r\n        var jsDate = toJSDate(date);\r\n        var day = jsDate.getDay();\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        return day === 0 ? 7 : day;\r\n    };\r\n    NgbCalendarGregorian.prototype.getWeekNumber = function (week, firstDayOfWeek) {\r\n        // in JS Date Sun=0, in ISO 8601 Sun=7\r\n        if (firstDayOfWeek === 7) {\r\n            firstDayOfWeek = 0;\r\n        }\r\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\r\n        var date = week[thursdayIndex];\r\n        var jsDate = toJSDate(date);\r\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\r\n        var time = jsDate.getTime();\r\n        jsDate.setMonth(0); // Compare with Jan 1\r\n        jsDate.setDate(1);\r\n        return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;\r\n    };\r\n    NgbCalendarGregorian.prototype.getToday = function () { return fromJSDate(new Date()); };\r\n    NgbCalendarGregorian.prototype.isValid = function (date) {\r\n        if (!date || !isInteger(date.year) || !isInteger(date.month) || !isInteger(date.day)) {\r\n            return false;\r\n        }\r\n        var jsDate = toJSDate(date);\r\n        return !isNaN(jsDate.getTime()) && jsDate.getFullYear() === date.year && jsDate.getMonth() + 1 === date.month &&\r\n            jsDate.getDate() === date.day;\r\n    };\r\n    NgbCalendarGregorian.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbCalendarGregorian;\r\n}(NgbCalendar));\r\nexport { NgbCalendarGregorian };\r\n//# sourceMappingURL=ngb-calendar.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { padNumber, toInteger, isNumber } from '../util/util';\r\n/**\r\n * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\r\n * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\r\n * to use an alternative format.\r\n */\r\nvar /**\r\n * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\r\n * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\r\n * to use an alternative format.\r\n */\r\nNgbDateParserFormatter = /** @class */ (function () {\r\n    function NgbDateParserFormatter() {\r\n    }\r\n    return NgbDateParserFormatter;\r\n}());\r\n/**\r\n * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\r\n * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\r\n * to use an alternative format.\r\n */\r\nexport { NgbDateParserFormatter };\r\nvar NgbDateISOParserFormatter = /** @class */ (function (_super) {\r\n    __extends(NgbDateISOParserFormatter, _super);\r\n    function NgbDateISOParserFormatter() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NgbDateISOParserFormatter.prototype.parse = function (value) {\r\n        if (value) {\r\n            var dateParts = value.trim().split('-');\r\n            if (dateParts.length === 1 && isNumber(dateParts[0])) {\r\n                return { year: toInteger(dateParts[0]), month: null, day: null };\r\n            }\r\n            else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {\r\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: null };\r\n            }\r\n            else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\r\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: toInteger(dateParts[2]) };\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    NgbDateISOParserFormatter.prototype.format = function (date) {\r\n        return date ?\r\n            date.year + \"-\" + (isNumber(date.month) ? padNumber(date.month) : '') + \"-\" + (isNumber(date.day) ? padNumber(date.day) : '') :\r\n            '';\r\n    };\r\n    return NgbDateISOParserFormatter;\r\n}(NgbDateParserFormatter));\r\nexport { NgbDateISOParserFormatter };\r\n//# sourceMappingURL=ngb-date-parser-formatter.js.map","var NgbDate = /** @class */ (function () {\r\n    function NgbDate(year, month, day) {\r\n        this.year = year;\r\n        this.month = month;\r\n        this.day = day;\r\n    }\r\n    NgbDate.from = function (date) {\r\n        return date ? new NgbDate(date.year, date.month, date.day ? date.day : 1) : null;\r\n    };\r\n    NgbDate.prototype.equals = function (other) {\r\n        return other && this.year === other.year && this.month === other.month && this.day === other.day;\r\n    };\r\n    NgbDate.prototype.before = function (other) {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        if (this.year === other.year) {\r\n            if (this.month === other.month) {\r\n                return this.day === other.day ? false : this.day < other.day;\r\n            }\r\n            else {\r\n                return this.month < other.month;\r\n            }\r\n        }\r\n        else {\r\n            return this.year < other.year;\r\n        }\r\n    };\r\n    NgbDate.prototype.after = function (other) {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        if (this.year === other.year) {\r\n            if (this.month === other.month) {\r\n                return this.day === other.day ? false : this.day > other.day;\r\n            }\r\n            else {\r\n                return this.month > other.month;\r\n            }\r\n        }\r\n        else {\r\n            return this.year > other.year;\r\n        }\r\n    };\r\n    NgbDate.prototype.toStruct = function () { return { year: this.year, month: this.month, day: this.day }; };\r\n    NgbDate.prototype.toString = function () { return this.year + \"-\" + this.month + \"-\" + this.day; };\r\n    return NgbDate;\r\n}());\r\nexport { NgbDate };\r\n//# sourceMappingURL=ngb-date.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbDropdown directive.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the dropdowns used in the application.\r\n */\r\nvar NgbDropdownConfig = /** @class */ (function () {\r\n    function NgbDropdownConfig() {\r\n        this.autoClose = true;\r\n        this.placement = 'bottom-left';\r\n    }\r\n    NgbDropdownConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbDropdownConfig;\r\n}());\r\nexport { NgbDropdownConfig };\r\n//# sourceMappingURL=dropdown-config.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { forwardRef, Inject, Directive, Input, Output, EventEmitter, ElementRef, ContentChild, NgZone, Renderer2, ChangeDetectorRef } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { fromEvent, race } from 'rxjs';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { NgbDropdownConfig } from './dropdown-config';\r\nimport { positionElements } from '../util/positioning';\r\nimport { Key } from '../util/key';\r\n/**\r\n */\r\nvar NgbDropdownMenu = /** @class */ (function () {\r\n    function NgbDropdownMenu(dropdown, _elementRef, _renderer) {\r\n        this.dropdown = dropdown;\r\n        this._elementRef = _elementRef;\r\n        this._renderer = _renderer;\r\n        this.placement = 'bottom';\r\n        this.isOpen = false;\r\n    }\r\n    NgbDropdownMenu.prototype.isEventFrom = function ($event) { return this._elementRef.nativeElement.contains($event.target); };\r\n    NgbDropdownMenu.prototype.position = function (triggerEl, placement) {\r\n        this.applyPlacement(positionElements(triggerEl, this._elementRef.nativeElement, placement));\r\n    };\r\n    NgbDropdownMenu.prototype.applyPlacement = function (_placement) {\r\n        // remove the current placement classes\r\n        this._renderer.removeClass(this._elementRef.nativeElement.parentNode, 'dropup');\r\n        this._renderer.removeClass(this._elementRef.nativeElement.parentNode, 'dropdown');\r\n        this.placement = _placement;\r\n        /**\r\n             * apply the new placement\r\n             * in case of top use up-arrow or down-arrow otherwise\r\n             */\r\n        if (_placement.search('^top') !== -1) {\r\n            this._renderer.addClass(this._elementRef.nativeElement.parentNode, 'dropup');\r\n        }\r\n        else {\r\n            this._renderer.addClass(this._elementRef.nativeElement.parentNode, 'dropdown');\r\n        }\r\n    };\r\n    NgbDropdownMenu.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngbDropdownMenu]',\r\n                    host: { '[class.dropdown-menu]': 'true', '[class.show]': 'dropdown.isOpen()', '[attr.x-placement]': 'placement' }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDropdownMenu.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbDropdown; }),] },] },\r\n        { type: ElementRef, },\r\n        { type: Renderer2, },\r\n    ]; };\r\n    return NgbDropdownMenu;\r\n}());\r\nexport { NgbDropdownMenu };\r\n/**\r\n * Marks an element to which dropdown menu will be anchored. This is a simple version\r\n * of the NgbDropdownToggle directive. It plays the same role as NgbDropdownToggle but\r\n * doesn't listen to click events to toggle dropdown menu thus enabling support for\r\n * events other than click.\r\n *\r\n * @since 1.1.0\r\n */\r\nvar NgbDropdownAnchor = /** @class */ (function () {\r\n    function NgbDropdownAnchor(dropdown, _elementRef) {\r\n        this.dropdown = dropdown;\r\n        this._elementRef = _elementRef;\r\n        this.anchorEl = _elementRef.nativeElement;\r\n    }\r\n    NgbDropdownAnchor.prototype.isEventFrom = function ($event) { return this._elementRef.nativeElement.contains($event.target); };\r\n    NgbDropdownAnchor.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngbDropdownAnchor]',\r\n                    host: { 'class': 'dropdown-toggle', 'aria-haspopup': 'true', '[attr.aria-expanded]': 'dropdown.isOpen()' }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDropdownAnchor.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbDropdown; }),] },] },\r\n        { type: ElementRef, },\r\n    ]; };\r\n    return NgbDropdownAnchor;\r\n}());\r\nexport { NgbDropdownAnchor };\r\n/**\r\n * Allows the dropdown to be toggled via click. This directive is optional: you can use NgbDropdownAnchor as an\r\n * alternative.\r\n */\r\nvar NgbDropdownToggle = /** @class */ (function (_super) {\r\n    __extends(NgbDropdownToggle, _super);\r\n    function NgbDropdownToggle(dropdown, elementRef) {\r\n        return _super.call(this, dropdown, elementRef) || this;\r\n    }\r\n    NgbDropdownToggle.prototype.toggleOpen = function () { this.dropdown.toggle(); };\r\n    NgbDropdownToggle.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngbDropdownToggle]',\r\n                    host: {\r\n                        'class': 'dropdown-toggle',\r\n                        'aria-haspopup': 'true',\r\n                        '[attr.aria-expanded]': 'dropdown.isOpen()',\r\n                        '(click)': 'toggleOpen()'\r\n                    },\r\n                    providers: [{ provide: NgbDropdownAnchor, useExisting: forwardRef(function () { return NgbDropdownToggle; }) }]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDropdownToggle.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbDropdown; }),] },] },\r\n        { type: ElementRef, },\r\n    ]; };\r\n    return NgbDropdownToggle;\r\n}(NgbDropdownAnchor));\r\nexport { NgbDropdownToggle };\r\n/**\r\n * Transforms a node into a dropdown.\r\n */\r\nvar NgbDropdown = /** @class */ (function () {\r\n    function NgbDropdown(_changeDetector, config, _document, _ngZone) {\r\n        var _this = this;\r\n        this._changeDetector = _changeDetector;\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        /**\r\n           *  Defines whether or not the dropdown-menu is open initially.\r\n           */\r\n        this._open = false;\r\n        /**\r\n           *  An event fired when the dropdown is opened or closed.\r\n           *  Event's payload equals whether dropdown is open.\r\n           */\r\n        this.openChange = new EventEmitter();\r\n        this.placement = config.placement;\r\n        this.autoClose = config.autoClose;\r\n        this._zoneSubscription = _ngZone.onStable.subscribe(function () { _this._positionMenu(); });\r\n    }\r\n    NgbDropdown.prototype.ngOnInit = function () {\r\n        if (this._menu) {\r\n            this._menu.applyPlacement(Array.isArray(this.placement) ? (this.placement[0]) : this.placement);\r\n        }\r\n        if (this._open) {\r\n            this._setCloseHandlers();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the dropdown menu is open or not.\r\n     */\r\n    /**\r\n       * Checks if the dropdown menu is open or not.\r\n       */\r\n    NgbDropdown.prototype.isOpen = /**\r\n       * Checks if the dropdown menu is open or not.\r\n       */\r\n    function () { return this._open; };\r\n    /**\r\n     * Opens the dropdown menu of a given navbar or tabbed navigation.\r\n     */\r\n    /**\r\n       * Opens the dropdown menu of a given navbar or tabbed navigation.\r\n       */\r\n    NgbDropdown.prototype.open = /**\r\n       * Opens the dropdown menu of a given navbar or tabbed navigation.\r\n       */\r\n    function () {\r\n        if (!this._open) {\r\n            this._open = true;\r\n            this._positionMenu();\r\n            this.openChange.emit(true);\r\n            this._setCloseHandlers();\r\n        }\r\n    };\r\n    NgbDropdown.prototype._setCloseHandlers = function () {\r\n        var _this = this;\r\n        if (this.autoClose) {\r\n            this._ngZone.runOutsideAngular(function () {\r\n                var escapes$ = fromEvent(_this._document, 'keyup')\r\n                    .pipe(takeUntil(_this.openChange.pipe(filter(function (opened) { return !opened; }))), filter(function (event) { return event.which === Key.Escape; }));\r\n                var clicks$ = fromEvent(_this._document, 'click')\r\n                    .pipe(takeUntil(_this.openChange.pipe(filter(function (opened) { return !opened; }))), filter(function (event) { return _this._shouldCloseFromClick(event); }));\r\n                race([escapes$, clicks$]).subscribe(function () { return _this._ngZone.run(function () { return _this.close(); }); });\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Closes the dropdown menu of a given navbar or tabbed navigation.\r\n     */\r\n    /**\r\n       * Closes the dropdown menu of a given navbar or tabbed navigation.\r\n       */\r\n    NgbDropdown.prototype.close = /**\r\n       * Closes the dropdown menu of a given navbar or tabbed navigation.\r\n       */\r\n    function () {\r\n        if (this._open) {\r\n            this._open = false;\r\n            this.openChange.emit(false);\r\n        }\r\n    };\r\n    /**\r\n     * Toggles the dropdown menu of a given navbar or tabbed navigation.\r\n     */\r\n    /**\r\n       * Toggles the dropdown menu of a given navbar or tabbed navigation.\r\n       */\r\n    NgbDropdown.prototype.toggle = /**\r\n       * Toggles the dropdown menu of a given navbar or tabbed navigation.\r\n       */\r\n    function () {\r\n        if (this.isOpen()) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    };\r\n    NgbDropdown.prototype._shouldCloseFromClick = function (event) {\r\n        if (event.button !== 2 && !this._isEventFromToggle(event)) {\r\n            if (this.autoClose === true) {\r\n                return true;\r\n            }\r\n            else if (this.autoClose === 'inside' && this._isEventFromMenu(event)) {\r\n                return true;\r\n            }\r\n            else if (this.autoClose === 'outside' && !this._isEventFromMenu(event)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    NgbDropdown.prototype.ngOnDestroy = function () { this._zoneSubscription.unsubscribe(); };\r\n    NgbDropdown.prototype._isEventFromToggle = function ($event) { return this._anchor.isEventFrom($event); };\r\n    NgbDropdown.prototype._isEventFromMenu = function ($event) { return this._menu ? this._menu.isEventFrom($event) : false; };\r\n    NgbDropdown.prototype._positionMenu = function () {\r\n        if (this.isOpen() && this._menu) {\r\n            this._menu.position(this._anchor.anchorEl, this.placement);\r\n        }\r\n    };\r\n    NgbDropdown.decorators = [\r\n        { type: Directive, args: [{ selector: '[ngbDropdown]', exportAs: 'ngbDropdown', host: { '[class.show]': 'isOpen()' } },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbDropdown.ctorParameters = function () { return [\r\n        { type: ChangeDetectorRef, },\r\n        { type: NgbDropdownConfig, },\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n        { type: NgZone, },\r\n    ]; };\r\n    NgbDropdown.propDecorators = {\r\n        \"_menu\": [{ type: ContentChild, args: [NgbDropdownMenu,] },],\r\n        \"_anchor\": [{ type: ContentChild, args: [NgbDropdownAnchor,] },],\r\n        \"autoClose\": [{ type: Input },],\r\n        \"_open\": [{ type: Input, args: ['open',] },],\r\n        \"placement\": [{ type: Input },],\r\n        \"openChange\": [{ type: Output },],\r\n    };\r\n    return NgbDropdown;\r\n}());\r\nexport { NgbDropdown };\r\n//# sourceMappingURL=dropdown.js.map","import { NgModule } from '@angular/core';\r\nimport { NgbDropdown, NgbDropdownAnchor, NgbDropdownToggle, NgbDropdownMenu } from './dropdown';\r\nimport { NgbDropdownConfig } from './dropdown-config';\r\nexport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu } from './dropdown';\r\nexport { NgbDropdownConfig } from './dropdown-config';\r\nvar NGB_DROPDOWN_DIRECTIVES = [NgbDropdown, NgbDropdownAnchor, NgbDropdownToggle, NgbDropdownMenu];\r\nvar NgbDropdownModule = /** @class */ (function () {\r\n    function NgbDropdownModule() {\r\n    }\r\n    NgbDropdownModule.forRoot = function () { return { ngModule: NgbDropdownModule, providers: [NgbDropdownConfig] }; };\r\n    NgbDropdownModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: NGB_DROPDOWN_DIRECTIVES, exports: NGB_DROPDOWN_DIRECTIVES },] },\r\n    ];\r\n    return NgbDropdownModule;\r\n}());\r\nexport { NgbDropdownModule };\r\n//# sourceMappingURL=dropdown.module.js.map","import { NgModule } from '@angular/core';\r\nimport { NgbAccordionModule } from './accordion/accordion.module';\r\nimport { NgbAlertModule } from './alert/alert.module';\r\nimport { NgbButtonsModule } from './buttons/buttons.module';\r\nimport { NgbCarouselModule } from './carousel/carousel.module';\r\nimport { NgbCollapseModule } from './collapse/collapse.module';\r\nimport { NgbDatepickerModule } from './datepicker/datepicker.module';\r\nimport { NgbDropdownModule } from './dropdown/dropdown.module';\r\nimport { NgbModalModule } from './modal/modal.module';\r\nimport { NgbPaginationModule } from './pagination/pagination.module';\r\nimport { NgbPopoverModule } from './popover/popover.module';\r\nimport { NgbProgressbarModule } from './progressbar/progressbar.module';\r\nimport { NgbRatingModule } from './rating/rating.module';\r\nimport { NgbTabsetModule } from './tabset/tabset.module';\r\nimport { NgbTimepickerModule } from './timepicker/timepicker.module';\r\nimport { NgbTooltipModule } from './tooltip/tooltip.module';\r\nimport { NgbTypeaheadModule } from './typeahead/typeahead.module';\r\nexport { NgbAccordionModule, NgbAccordionConfig, NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent } from './accordion/accordion.module';\r\nexport { NgbAlertModule, NgbAlertConfig, NgbAlert } from './alert/alert.module';\r\nexport { NgbButtonsModule, NgbCheckBox, NgbRadioGroup } from './buttons/buttons.module';\r\nexport { NgbCarouselModule, NgbCarouselConfig, NgbCarousel, NgbSlide } from './carousel/carousel.module';\r\nexport { NgbCollapseModule, NgbCollapse } from './collapse/collapse.module';\r\nexport { NgbCalendar, NgbCalendarIslamicCivil, NgbCalendarIslamicUmalqura, NgbDatepickerModule, NgbDatepickerI18n, NgbDatepickerConfig, NgbDateParserFormatter, NgbDateAdapter, NgbDateNativeAdapter, NgbDatepicker, NgbInputDatepicker } from './datepicker/datepicker.module';\r\nexport { NgbDropdownModule, NgbDropdownConfig, NgbDropdown } from './dropdown/dropdown.module';\r\nexport { NgbModalModule, NgbModal, NgbActiveModal, NgbModalRef, ModalDismissReasons } from './modal/modal.module';\r\nexport { NgbPaginationModule, NgbPaginationConfig, NgbPagination } from './pagination/pagination.module';\r\nexport { NgbPopoverModule, NgbPopoverConfig, NgbPopover } from './popover/popover.module';\r\nexport { NgbProgressbarModule, NgbProgressbarConfig, NgbProgressbar } from './progressbar/progressbar.module';\r\nexport { NgbRatingModule, NgbRatingConfig, NgbRating } from './rating/rating.module';\r\nexport { NgbTabsetModule, NgbTabsetConfig, NgbTabset, NgbTab, NgbTabContent, NgbTabTitle } from './tabset/tabset.module';\r\nexport { NgbTimepickerModule, NgbTimepickerConfig, NgbTimepicker, NgbTimeAdapter } from './timepicker/timepicker.module';\r\nexport { NgbTooltipModule, NgbTooltipConfig, NgbTooltip } from './tooltip/tooltip.module';\r\nexport { NgbHighlight, NgbTypeaheadModule, NgbTypeaheadConfig, NgbTypeahead } from './typeahead/typeahead.module';\r\nvar NGB_MODULES = [\r\n    NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule,\r\n    NgbDropdownModule, NgbModalModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule, NgbRatingModule,\r\n    NgbTabsetModule, NgbTimepickerModule, NgbTooltipModule, NgbTypeaheadModule\r\n];\r\nvar NgbRootModule = /** @class */ (function () {\r\n    function NgbRootModule() {\r\n    }\r\n    NgbRootModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        NgbAlertModule.forRoot(), NgbButtonsModule.forRoot(), NgbCollapseModule.forRoot(), NgbProgressbarModule.forRoot(),\r\n                        NgbTooltipModule.forRoot(), NgbTypeaheadModule.forRoot(), NgbAccordionModule.forRoot(), NgbCarouselModule.forRoot(),\r\n                        NgbDatepickerModule.forRoot(), NgbDropdownModule.forRoot(), NgbModalModule.forRoot(), NgbPaginationModule.forRoot(),\r\n                        NgbPopoverModule.forRoot(), NgbProgressbarModule.forRoot(), NgbRatingModule.forRoot(), NgbTabsetModule.forRoot(),\r\n                        NgbTimepickerModule.forRoot(), NgbTooltipModule.forRoot()\r\n                    ],\r\n                    exports: NGB_MODULES\r\n                },] },\r\n    ];\r\n    return NgbRootModule;\r\n}());\r\nexport { NgbRootModule };\r\nvar NgbModule = /** @class */ (function () {\r\n    function NgbModule() {\r\n    }\r\n    NgbModule.forRoot = function () { return { ngModule: NgbRootModule }; };\r\n    NgbModule.decorators = [\r\n        { type: NgModule, args: [{ imports: NGB_MODULES, exports: NGB_MODULES },] },\r\n    ];\r\n    return NgbModule;\r\n}());\r\nexport { NgbModule };\r\n//# sourceMappingURL=index.js.map","import { Component, Input } from '@angular/core';\r\nvar NgbModalBackdrop = /** @class */ (function () {\r\n    function NgbModalBackdrop() {\r\n    }\r\n    NgbModalBackdrop.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-modal-backdrop',\r\n                    template: '',\r\n                    host: { '[class]': '\"modal-backdrop fade show\" + (backdropClass ? \" \" + backdropClass : \"\")' }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbModalBackdrop.propDecorators = {\r\n        \"backdropClass\": [{ type: Input },],\r\n    };\r\n    return NgbModalBackdrop;\r\n}());\r\nexport { NgbModalBackdrop };\r\n//# sourceMappingURL=modal-backdrop.js.map","export var ModalDismissReasons;\r\n(function (ModalDismissReasons) {\r\n    ModalDismissReasons[ModalDismissReasons[\"BACKDROP_CLICK\"] = 0] = \"BACKDROP_CLICK\";\r\n    ModalDismissReasons[ModalDismissReasons[\"ESC\"] = 1] = \"ESC\";\r\n})(ModalDismissReasons || (ModalDismissReasons = {}));\r\n//# sourceMappingURL=modal-dismiss-reasons.js.map","/**\r\n * A reference to an active (currently opened) modal. Instances of this class\r\n * can be injected into components passed as modal content.\r\n */\r\nvar /**\r\n * A reference to an active (currently opened) modal. Instances of this class\r\n * can be injected into components passed as modal content.\r\n */\r\nNgbActiveModal = /** @class */ (function () {\r\n    function NgbActiveModal() {\r\n    }\r\n    /**\r\n     * Can be used to close a modal, passing an optional result.\r\n     */\r\n    /**\r\n       * Can be used to close a modal, passing an optional result.\r\n       */\r\n    NgbActiveModal.prototype.close = /**\r\n       * Can be used to close a modal, passing an optional result.\r\n       */\r\n    function (result) { };\r\n    /**\r\n     * Can be used to dismiss a modal, passing an optional reason.\r\n     */\r\n    /**\r\n       * Can be used to dismiss a modal, passing an optional reason.\r\n       */\r\n    NgbActiveModal.prototype.dismiss = /**\r\n       * Can be used to dismiss a modal, passing an optional reason.\r\n       */\r\n    function (reason) { };\r\n    return NgbActiveModal;\r\n}());\r\n/**\r\n * A reference to an active (currently opened) modal. Instances of this class\r\n * can be injected into components passed as modal content.\r\n */\r\nexport { NgbActiveModal };\r\n/**\r\n * A reference to a newly opened modal.\r\n */\r\nvar /**\r\n * A reference to a newly opened modal.\r\n */\r\nNgbModalRef = /** @class */ (function () {\r\n    function NgbModalRef(_windowCmptRef, _contentRef, _backdropCmptRef, _beforeDismiss) {\r\n        var _this = this;\r\n        this._windowCmptRef = _windowCmptRef;\r\n        this._contentRef = _contentRef;\r\n        this._backdropCmptRef = _backdropCmptRef;\r\n        this._beforeDismiss = _beforeDismiss;\r\n        _windowCmptRef.instance.dismissEvent.subscribe(function (reason) { _this.dismiss(reason); });\r\n        this.result = new Promise(function (resolve, reject) {\r\n            _this._resolve = resolve;\r\n            _this._reject = reject;\r\n        });\r\n        this.result.then(null, function () { });\r\n    }\r\n    Object.defineProperty(NgbModalRef.prototype, \"componentInstance\", {\r\n        /**\r\n         * The instance of component used as modal's content.\r\n         * Undefined when a TemplateRef is used as modal's content.\r\n         */\r\n        get: /**\r\n           * The instance of component used as modal's content.\r\n           * Undefined when a TemplateRef is used as modal's content.\r\n           */\r\n        function () {\r\n            if (this._contentRef.componentRef) {\r\n                return this._contentRef.componentRef.instance;\r\n            }\r\n        },\r\n        // only needed to keep TS1.8 compatibility\r\n        set: \r\n        // only needed to keep TS1.8 compatibility\r\n        function (instance) { },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Can be used to close a modal, passing an optional result.\r\n     */\r\n    /**\r\n       * Can be used to close a modal, passing an optional result.\r\n       */\r\n    NgbModalRef.prototype.close = /**\r\n       * Can be used to close a modal, passing an optional result.\r\n       */\r\n    function (result) {\r\n        if (this._windowCmptRef) {\r\n            this._resolve(result);\r\n            this._removeModalElements();\r\n        }\r\n    };\r\n    NgbModalRef.prototype._dismiss = function (reason) {\r\n        this._reject(reason);\r\n        this._removeModalElements();\r\n    };\r\n    /**\r\n     * Can be used to dismiss a modal, passing an optional reason.\r\n     */\r\n    /**\r\n       * Can be used to dismiss a modal, passing an optional reason.\r\n       */\r\n    NgbModalRef.prototype.dismiss = /**\r\n       * Can be used to dismiss a modal, passing an optional reason.\r\n       */\r\n    function (reason) {\r\n        var _this = this;\r\n        if (this._windowCmptRef) {\r\n            if (!this._beforeDismiss) {\r\n                this._dismiss(reason);\r\n            }\r\n            else {\r\n                var dismiss = this._beforeDismiss();\r\n                if (dismiss && dismiss.then) {\r\n                    dismiss.then(function (result) {\r\n                        if (result !== false) {\r\n                            _this._dismiss(reason);\r\n                        }\r\n                    }, function () { });\r\n                }\r\n                else if (dismiss !== false) {\r\n                    this._dismiss(reason);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    NgbModalRef.prototype._removeModalElements = function () {\r\n        var windowNativeEl = this._windowCmptRef.location.nativeElement;\r\n        windowNativeEl.parentNode.removeChild(windowNativeEl);\r\n        this._windowCmptRef.destroy();\r\n        if (this._backdropCmptRef) {\r\n            var backdropNativeEl = this._backdropCmptRef.location.nativeElement;\r\n            backdropNativeEl.parentNode.removeChild(backdropNativeEl);\r\n            this._backdropCmptRef.destroy();\r\n        }\r\n        if (this._contentRef && this._contentRef.viewRef) {\r\n            this._contentRef.viewRef.destroy();\r\n        }\r\n        this._windowCmptRef = null;\r\n        this._backdropCmptRef = null;\r\n        this._contentRef = null;\r\n    };\r\n    return NgbModalRef;\r\n}());\r\n/**\r\n * A reference to a newly opened modal.\r\n */\r\nexport { NgbModalRef };\r\n//# sourceMappingURL=modal-ref.js.map","import { DOCUMENT } from '@angular/common';\r\nimport { ApplicationRef, Injectable, Injector, Inject, ComponentFactoryResolver, TemplateRef } from '@angular/core';\r\nimport { ContentRef } from '../util/popup';\r\nimport { isDefined, isString } from '../util/util';\r\nimport { ScrollBar } from '../util/scrollbar';\r\nimport { NgbModalBackdrop } from './modal-backdrop';\r\nimport { NgbModalWindow } from './modal-window';\r\nimport { NgbActiveModal, NgbModalRef } from './modal-ref';\r\nvar NgbModalStack = /** @class */ (function () {\r\n    function NgbModalStack(_applicationRef, _injector, _componentFactoryResolver, _document, _scrollBar) {\r\n        this._applicationRef = _applicationRef;\r\n        this._injector = _injector;\r\n        this._componentFactoryResolver = _componentFactoryResolver;\r\n        this._document = _document;\r\n        this._scrollBar = _scrollBar;\r\n        this._windowAttributes = ['ariaLabelledBy', 'backdrop', 'centered', 'keyboard', 'size', 'windowClass'];\r\n        this._backdropAttributes = ['backdropClass'];\r\n    }\r\n    NgbModalStack.prototype.open = function (moduleCFR, contentInjector, content, options) {\r\n        var containerEl = isDefined(options.container) ? this._document.querySelector(options.container) : this._document.body;\r\n        var revertPaddingForScrollBar = this._scrollBar.compensate();\r\n        if (!containerEl) {\r\n            throw new Error(\"The specified modal container \\\"\" + (options.container || 'body') + \"\\\" was not found in the DOM.\");\r\n        }\r\n        var activeModal = new NgbActiveModal();\r\n        var contentRef = this._getContentRef(moduleCFR, options.injector || contentInjector, content, activeModal);\r\n        var backdropCmptRef = options.backdrop !== false ? this._attachBackdrop(containerEl) : null;\r\n        var windowCmptRef = this._attachWindowComponent(containerEl, contentRef);\r\n        var ngbModalRef = new NgbModalRef(windowCmptRef, contentRef, backdropCmptRef, options.beforeDismiss);\r\n        ngbModalRef.result.then(revertPaddingForScrollBar, revertPaddingForScrollBar);\r\n        activeModal.close = function (result) { ngbModalRef.close(result); };\r\n        activeModal.dismiss = function (reason) { ngbModalRef.dismiss(reason); };\r\n        this._applyWindowOptions(windowCmptRef.instance, options);\r\n        if (backdropCmptRef && backdropCmptRef.instance) {\r\n            this._applyBackdropOptions(backdropCmptRef.instance, options);\r\n        }\r\n        return ngbModalRef;\r\n    };\r\n    NgbModalStack.prototype._attachBackdrop = function (containerEl) {\r\n        var backdropFactory = this._componentFactoryResolver.resolveComponentFactory(NgbModalBackdrop);\r\n        var backdropCmptRef = backdropFactory.create(this._injector);\r\n        this._applicationRef.attachView(backdropCmptRef.hostView);\r\n        containerEl.appendChild(backdropCmptRef.location.nativeElement);\r\n        return backdropCmptRef;\r\n    };\r\n    NgbModalStack.prototype._attachWindowComponent = function (containerEl, contentRef) {\r\n        var windowFactory = this._componentFactoryResolver.resolveComponentFactory(NgbModalWindow);\r\n        var windowCmptRef = windowFactory.create(this._injector, contentRef.nodes);\r\n        this._applicationRef.attachView(windowCmptRef.hostView);\r\n        containerEl.appendChild(windowCmptRef.location.nativeElement);\r\n        return windowCmptRef;\r\n    };\r\n    NgbModalStack.prototype._applyWindowOptions = function (windowInstance, options) {\r\n        this._windowAttributes.forEach(function (optionName) {\r\n            if (isDefined(options[optionName])) {\r\n                windowInstance[optionName] = options[optionName];\r\n            }\r\n        });\r\n    };\r\n    NgbModalStack.prototype._applyBackdropOptions = function (backdropInstance, options) {\r\n        this._backdropAttributes.forEach(function (optionName) {\r\n            if (isDefined(options[optionName])) {\r\n                backdropInstance[optionName] = options[optionName];\r\n            }\r\n        });\r\n    };\r\n    NgbModalStack.prototype._getContentRef = function (moduleCFR, contentInjector, content, context) {\r\n        if (!content) {\r\n            return new ContentRef([]);\r\n        }\r\n        else if (content instanceof TemplateRef) {\r\n            return this._createFromTemplateRef(content, context);\r\n        }\r\n        else if (isString(content)) {\r\n            return this._createFromString(content);\r\n        }\r\n        else {\r\n            return this._createFromComponent(moduleCFR, contentInjector, content, context);\r\n        }\r\n    };\r\n    NgbModalStack.prototype._createFromTemplateRef = function (content, context) {\r\n        var viewRef = content.createEmbeddedView(context);\r\n        this._applicationRef.attachView(viewRef);\r\n        return new ContentRef([viewRef.rootNodes], viewRef);\r\n    };\r\n    NgbModalStack.prototype._createFromString = function (content) {\r\n        var component = this._document.createTextNode(\"\" + content);\r\n        return new ContentRef([[component]]);\r\n    };\r\n    NgbModalStack.prototype._createFromComponent = function (moduleCFR, contentInjector, content, context) {\r\n        var contentCmptFactory = moduleCFR.resolveComponentFactory(content);\r\n        var modalContentInjector = Injector.create([{ provide: NgbActiveModal, useValue: context }], contentInjector);\r\n        var componentRef = contentCmptFactory.create(modalContentInjector);\r\n        this._applicationRef.attachView(componentRef.hostView);\r\n        return new ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);\r\n    };\r\n    NgbModalStack.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbModalStack.ctorParameters = function () { return [\r\n        { type: ApplicationRef, },\r\n        { type: Injector, },\r\n        { type: ComponentFactoryResolver, },\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n        { type: ScrollBar, },\r\n    ]; };\r\n    return NgbModalStack;\r\n}());\r\nexport { NgbModalStack };\r\n//# sourceMappingURL=modal-stack.js.map","import { DOCUMENT } from '@angular/common';\r\nimport { Component, Output, EventEmitter, Input, Inject, ElementRef, Renderer2 } from '@angular/core';\r\nimport { ModalDismissReasons } from './modal-dismiss-reasons';\r\nimport { ngbFocusTrap } from '../util/focus-trap';\r\nvar NgbModalWindow = /** @class */ (function () {\r\n    function NgbModalWindow(document, _elRef, _renderer) {\r\n        this._elRef = _elRef;\r\n        this._renderer = _renderer;\r\n        this.backdrop = true;\r\n        this.keyboard = true;\r\n        this.dismissEvent = new EventEmitter();\r\n        this._document = document;\r\n        ngbFocusTrap(this._elRef.nativeElement, this.dismissEvent);\r\n    }\r\n    NgbModalWindow.prototype.backdropClick = function ($event) {\r\n        if (this.backdrop === true && this._elRef.nativeElement === $event.target) {\r\n            this.dismiss(ModalDismissReasons.BACKDROP_CLICK);\r\n        }\r\n    };\r\n    NgbModalWindow.prototype.escKey = function ($event) {\r\n        if (this.keyboard && !$event.defaultPrevented) {\r\n            this.dismiss(ModalDismissReasons.ESC);\r\n        }\r\n    };\r\n    NgbModalWindow.prototype.dismiss = function (reason) { this.dismissEvent.emit(reason); };\r\n    NgbModalWindow.prototype.ngOnInit = function () {\r\n        this._elWithFocus = this._document.activeElement;\r\n        this._renderer.addClass(this._document.body, 'modal-open');\r\n    };\r\n    NgbModalWindow.prototype.ngAfterViewInit = function () {\r\n        if (!this._elRef.nativeElement.contains(document.activeElement)) {\r\n            this._elRef.nativeElement['focus'].apply(this._elRef.nativeElement, []);\r\n        }\r\n    };\r\n    NgbModalWindow.prototype.ngOnDestroy = function () {\r\n        var body = this._document.body;\r\n        var elWithFocus = this._elWithFocus;\r\n        var elementToFocus;\r\n        if (elWithFocus && elWithFocus['focus'] && body.contains(elWithFocus)) {\r\n            elementToFocus = elWithFocus;\r\n        }\r\n        else {\r\n            elementToFocus = body;\r\n        }\r\n        elementToFocus['focus'].apply(elementToFocus, []);\r\n        this._elWithFocus = null;\r\n        this._renderer.removeClass(body, 'modal-open');\r\n    };\r\n    NgbModalWindow.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-modal-window',\r\n                    host: {\r\n                        '[class]': '\"modal fade show d-block\" + (windowClass ? \" \" + windowClass : \"\")',\r\n                        'role': 'dialog',\r\n                        'tabindex': '-1',\r\n                        '(keyup.esc)': 'escKey($event)',\r\n                        '(click)': 'backdropClick($event)',\r\n                        '[attr.aria-labelledby]': 'ariaLabelledBy',\r\n                    },\r\n                    template: \"\\n    <div [class]=\\\"'modal-dialog' + (size ? ' modal-' + size : '') + (centered ? ' modal-dialog-centered' : '')\\\" role=\\\"document\\\">\\n        <div class=\\\"modal-content\\\"><ng-content></ng-content></div>\\n    </div>\\n    \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbModalWindow.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n        { type: ElementRef, },\r\n        { type: Renderer2, },\r\n    ]; };\r\n    NgbModalWindow.propDecorators = {\r\n        \"ariaLabelledBy\": [{ type: Input },],\r\n        \"backdrop\": [{ type: Input },],\r\n        \"centered\": [{ type: Input },],\r\n        \"keyboard\": [{ type: Input },],\r\n        \"size\": [{ type: Input },],\r\n        \"windowClass\": [{ type: Input },],\r\n        \"dismissEvent\": [{ type: Output, args: ['dismiss',] },],\r\n    };\r\n    return NgbModalWindow;\r\n}());\r\nexport { NgbModalWindow };\r\n//# sourceMappingURL=modal-window.js.map","import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';\r\nimport { NgbModalStack } from './modal-stack';\r\n/**\r\n * A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to\r\n * the \"open\" method!\r\n */\r\nvar NgbModal = /** @class */ (function () {\r\n    function NgbModal(_moduleCFR, _injector, _modalStack) {\r\n        this._moduleCFR = _moduleCFR;\r\n        this._injector = _injector;\r\n        this._modalStack = _modalStack;\r\n    }\r\n    /**\r\n     * Opens a new modal window with the specified content and using supplied options. Content can be provided\r\n     * as a TemplateRef or a component type. If you pass a component type as content than instances of those\r\n     * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\r\n     * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\r\n     */\r\n    /**\r\n       * Opens a new modal window with the specified content and using supplied options. Content can be provided\r\n       * as a TemplateRef or a component type. If you pass a component type as content than instances of those\r\n       * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\r\n       * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\r\n       */\r\n    NgbModal.prototype.open = /**\r\n       * Opens a new modal window with the specified content and using supplied options. Content can be provided\r\n       * as a TemplateRef or a component type. If you pass a component type as content than instances of those\r\n       * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\r\n       * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\r\n       */\r\n    function (content, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this._modalStack.open(this._moduleCFR, this._injector, content, options);\r\n    };\r\n    NgbModal.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbModal.ctorParameters = function () { return [\r\n        { type: ComponentFactoryResolver, },\r\n        { type: Injector, },\r\n        { type: NgbModalStack, },\r\n    ]; };\r\n    return NgbModal;\r\n}());\r\nexport { NgbModal };\r\n//# sourceMappingURL=modal.js.map","import { NgModule } from '@angular/core';\r\nimport { NgbModalBackdrop } from './modal-backdrop';\r\nimport { NgbModalWindow } from './modal-window';\r\nimport { NgbModalStack } from './modal-stack';\r\nimport { NgbModal } from './modal';\r\nimport { ScrollBar } from '../util/scrollbar';\r\nexport { NgbModal } from './modal';\r\nexport { NgbModalRef, NgbActiveModal } from './modal-ref';\r\nexport { ModalDismissReasons } from './modal-dismiss-reasons';\r\nvar NgbModalModule = /** @class */ (function () {\r\n    function NgbModalModule() {\r\n    }\r\n    NgbModalModule.forRoot = function () {\r\n        return { ngModule: NgbModalModule, providers: [NgbModal, NgbModalStack, ScrollBar] };\r\n    };\r\n    NgbModalModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    declarations: [NgbModalBackdrop, NgbModalWindow],\r\n                    entryComponents: [NgbModalBackdrop, NgbModalWindow],\r\n                    providers: [NgbModal]\r\n                },] },\r\n    ];\r\n    return NgbModalModule;\r\n}());\r\nexport { NgbModalModule };\r\n//# sourceMappingURL=modal.module.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbPagination component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the paginations used in the application.\r\n */\r\nvar NgbPaginationConfig = /** @class */ (function () {\r\n    function NgbPaginationConfig() {\r\n        this.disabled = false;\r\n        this.boundaryLinks = false;\r\n        this.directionLinks = true;\r\n        this.ellipses = true;\r\n        this.maxSize = 0;\r\n        this.pageSize = 10;\r\n        this.rotate = false;\r\n    }\r\n    NgbPaginationConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbPaginationConfig;\r\n}());\r\nexport { NgbPaginationConfig };\r\n//# sourceMappingURL=pagination-config.js.map","import { Component, EventEmitter, Input, Output, ChangeDetectionStrategy } from '@angular/core';\r\nimport { getValueInRange, isNumber } from '../util/util';\r\nimport { NgbPaginationConfig } from './pagination-config';\r\n/**\r\n * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!\r\n */\r\nvar NgbPagination = /** @class */ (function () {\r\n    function NgbPagination(config) {\r\n        this.pageCount = 0;\r\n        this.pages = [];\r\n        /**\r\n           *  Current page. Page numbers start with 1\r\n           */\r\n        this.page = 1;\r\n        /**\r\n           *  An event fired when the page is changed.\r\n           *  Event's payload equals to the newly selected page.\r\n           *  Will fire only if collection size is set and all values are valid.\r\n           *  Page numbers start with 1\r\n           */\r\n        this.pageChange = new EventEmitter(true);\r\n        this.disabled = config.disabled;\r\n        this.boundaryLinks = config.boundaryLinks;\r\n        this.directionLinks = config.directionLinks;\r\n        this.ellipses = config.ellipses;\r\n        this.maxSize = config.maxSize;\r\n        this.pageSize = config.pageSize;\r\n        this.rotate = config.rotate;\r\n        this.size = config.size;\r\n    }\r\n    NgbPagination.prototype.hasPrevious = function () { return this.page > 1; };\r\n    NgbPagination.prototype.hasNext = function () { return this.page < this.pageCount; };\r\n    NgbPagination.prototype.selectPage = function (pageNumber) { this._updatePages(pageNumber); };\r\n    NgbPagination.prototype.ngOnChanges = function (changes) { this._updatePages(this.page); };\r\n    NgbPagination.prototype.isEllipsis = function (pageNumber) { return pageNumber === -1; };\r\n    /**\r\n     * Appends ellipses and first/last page number to the displayed pages\r\n     */\r\n    /**\r\n       * Appends ellipses and first/last page number to the displayed pages\r\n       */\r\n    NgbPagination.prototype._applyEllipses = /**\r\n       * Appends ellipses and first/last page number to the displayed pages\r\n       */\r\n    function (start, end) {\r\n        if (this.ellipses) {\r\n            if (start > 0) {\r\n                if (start > 1) {\r\n                    this.pages.unshift(-1);\r\n                }\r\n                this.pages.unshift(1);\r\n            }\r\n            if (end < this.pageCount) {\r\n                if (end < (this.pageCount - 1)) {\r\n                    this.pages.push(-1);\r\n                }\r\n                this.pages.push(this.pageCount);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Rotates page numbers based on maxSize items visible.\r\n     * Currently selected page stays in the middle:\r\n     *\r\n     * Ex. for selected page = 6:\r\n     * [5,*6*,7] for maxSize = 3\r\n     * [4,5,*6*,7] for maxSize = 4\r\n     */\r\n    /**\r\n       * Rotates page numbers based on maxSize items visible.\r\n       * Currently selected page stays in the middle:\r\n       *\r\n       * Ex. for selected page = 6:\r\n       * [5,*6*,7] for maxSize = 3\r\n       * [4,5,*6*,7] for maxSize = 4\r\n       */\r\n    NgbPagination.prototype._applyRotation = /**\r\n       * Rotates page numbers based on maxSize items visible.\r\n       * Currently selected page stays in the middle:\r\n       *\r\n       * Ex. for selected page = 6:\r\n       * [5,*6*,7] for maxSize = 3\r\n       * [4,5,*6*,7] for maxSize = 4\r\n       */\r\n    function () {\r\n        var start = 0;\r\n        var end = this.pageCount;\r\n        var leftOffset = Math.floor(this.maxSize / 2);\r\n        var rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\r\n        if (this.page <= leftOffset) {\r\n            // very beginning, no rotation -> [0..maxSize]\r\n            end = this.maxSize;\r\n        }\r\n        else if (this.pageCount - this.page < leftOffset) {\r\n            // very end, no rotation -> [len-maxSize..len]\r\n            start = this.pageCount - this.maxSize;\r\n        }\r\n        else {\r\n            // rotate\r\n            start = this.page - leftOffset - 1;\r\n            end = this.page + rightOffset;\r\n        }\r\n        return [start, end];\r\n    };\r\n    /**\r\n     * Paginates page numbers based on maxSize items per page\r\n     */\r\n    /**\r\n       * Paginates page numbers based on maxSize items per page\r\n       */\r\n    NgbPagination.prototype._applyPagination = /**\r\n       * Paginates page numbers based on maxSize items per page\r\n       */\r\n    function () {\r\n        var page = Math.ceil(this.page / this.maxSize) - 1;\r\n        var start = page * this.maxSize;\r\n        var end = start + this.maxSize;\r\n        return [start, end];\r\n    };\r\n    NgbPagination.prototype._setPageInRange = function (newPageNo) {\r\n        var prevPageNo = this.page;\r\n        this.page = getValueInRange(newPageNo, this.pageCount, 1);\r\n        if (this.page !== prevPageNo && isNumber(this.collectionSize)) {\r\n            this.pageChange.emit(this.page);\r\n        }\r\n    };\r\n    NgbPagination.prototype._updatePages = function (newPage) {\r\n        this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\r\n        if (!isNumber(this.pageCount)) {\r\n            this.pageCount = 0;\r\n        }\r\n        // fill-in model needed to render pages\r\n        this.pages.length = 0;\r\n        for (var i = 1; i <= this.pageCount; i++) {\r\n            this.pages.push(i);\r\n        }\r\n        // set page within 1..max range\r\n        this._setPageInRange(newPage);\r\n        // apply maxSize if necessary\r\n        if (this.maxSize > 0 && this.pageCount > this.maxSize) {\r\n            var start = 0;\r\n            var end = this.pageCount;\r\n            // either paginating or rotating page numbers\r\n            if (this.rotate) {\r\n                _a = this._applyRotation(), start = _a[0], end = _a[1];\r\n            }\r\n            else {\r\n                _b = this._applyPagination(), start = _b[0], end = _b[1];\r\n            }\r\n            this.pages = this.pages.slice(start, end);\r\n            // adding ellipses\r\n            this._applyEllipses(start, end);\r\n        }\r\n        var _a, _b;\r\n    };\r\n    NgbPagination.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-pagination',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    host: { 'role': 'navigation' },\r\n                    template: \"\\n    <ul [class]=\\\"'pagination' + (size ? ' pagination-' + size : '')\\\">\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"!hasPrevious() || disabled\\\">\\n        <a aria-label=\\\"First\\\" i18n-aria-label=\\\"@@ngb.pagination.first-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"!!selectPage(1)\\\" [attr.tabindex]=\\\"(hasPrevious() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.first\\\">&laquo;&laquo;</span>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"!hasPrevious() || disabled\\\">\\n        <a aria-label=\\\"Previous\\\" i18n-aria-label=\\\"@@ngb.pagination.previous-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"!!selectPage(page-1)\\\" [attr.tabindex]=\\\"(hasPrevious() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.previous\\\">&laquo;</span>\\n        </a>\\n      </li>\\n      <li *ngFor=\\\"let pageNumber of pages\\\" class=\\\"page-item\\\" [class.active]=\\\"pageNumber === page\\\"\\n        [class.disabled]=\\\"isEllipsis(pageNumber) || disabled\\\">\\n        <a *ngIf=\\\"isEllipsis(pageNumber)\\\" class=\\\"page-link\\\">...</a>\\n        <a *ngIf=\\\"!isEllipsis(pageNumber)\\\" class=\\\"page-link\\\" href (click)=\\\"!!selectPage(pageNumber)\\\">\\n          {{pageNumber}}\\n          <span *ngIf=\\\"pageNumber === page\\\" class=\\\"sr-only\\\">(current)</span>\\n        </a>\\n      </li>\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"!hasNext() || disabled\\\">\\n        <a aria-label=\\\"Next\\\" i18n-aria-label=\\\"@@ngb.pagination.next-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"!!selectPage(page+1)\\\" [attr.tabindex]=\\\"(hasNext() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.next\\\">&raquo;</span>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"!hasNext() || disabled\\\">\\n        <a aria-label=\\\"Last\\\" i18n-aria-label=\\\"@@ngb.pagination.last-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"!!selectPage(pageCount)\\\" [attr.tabindex]=\\\"(hasNext() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.last\\\">&raquo;&raquo;</span>\\n        </a>\\n      </li>\\n    </ul>\\n  \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbPagination.ctorParameters = function () { return [\r\n        { type: NgbPaginationConfig, },\r\n    ]; };\r\n    NgbPagination.propDecorators = {\r\n        \"disabled\": [{ type: Input },],\r\n        \"boundaryLinks\": [{ type: Input },],\r\n        \"directionLinks\": [{ type: Input },],\r\n        \"ellipses\": [{ type: Input },],\r\n        \"rotate\": [{ type: Input },],\r\n        \"collectionSize\": [{ type: Input },],\r\n        \"maxSize\": [{ type: Input },],\r\n        \"page\": [{ type: Input },],\r\n        \"pageSize\": [{ type: Input },],\r\n        \"pageChange\": [{ type: Output },],\r\n        \"size\": [{ type: Input },],\r\n    };\r\n    return NgbPagination;\r\n}());\r\nexport { NgbPagination };\r\n//# sourceMappingURL=pagination.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbPagination } from './pagination';\r\nimport { NgbPaginationConfig } from './pagination-config';\r\nexport { NgbPagination } from './pagination';\r\nexport { NgbPaginationConfig } from './pagination-config';\r\nvar NgbPaginationModule = /** @class */ (function () {\r\n    function NgbPaginationModule() {\r\n    }\r\n    NgbPaginationModule.forRoot = function () { return { ngModule: NgbPaginationModule, providers: [NgbPaginationConfig] }; };\r\n    NgbPaginationModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: [NgbPagination], exports: [NgbPagination], imports: [CommonModule] },] },\r\n    ];\r\n    return NgbPaginationModule;\r\n}());\r\nexport { NgbPaginationModule };\r\n//# sourceMappingURL=pagination.module.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbPopover directive.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the popovers used in the application.\r\n */\r\nvar NgbPopoverConfig = /** @class */ (function () {\r\n    function NgbPopoverConfig() {\r\n        this.placement = 'top';\r\n        this.triggers = 'click';\r\n        this.disablePopover = false;\r\n    }\r\n    NgbPopoverConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbPopoverConfig;\r\n}());\r\nexport { NgbPopoverConfig };\r\n//# sourceMappingURL=popover-config.js.map","import { Component, Directive, Input, Output, EventEmitter, ChangeDetectionStrategy, Injector, Renderer2, ElementRef, ViewContainerRef, ComponentFactoryResolver, NgZone } from '@angular/core';\r\nimport { listenToTriggers } from '../util/triggers';\r\nimport { positionElements } from '../util/positioning';\r\nimport { PopupService } from '../util/popup';\r\nimport { NgbPopoverConfig } from './popover-config';\r\nvar nextId = 0;\r\nvar NgbPopoverWindow = /** @class */ (function () {\r\n    function NgbPopoverWindow(_element, _renderer) {\r\n        this._element = _element;\r\n        this._renderer = _renderer;\r\n        this.placement = 'top';\r\n    }\r\n    NgbPopoverWindow.prototype.applyPlacement = function (_placement) {\r\n        // remove the current placement classes\r\n        this._renderer.removeClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString().split('-')[0]);\r\n        this._renderer.removeClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString());\r\n        // set the new placement classes\r\n        this.placement = _placement;\r\n        // apply the new placement\r\n        this._renderer.addClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString().split('-')[0]);\r\n        this._renderer.addClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString());\r\n    };\r\n    NgbPopoverWindow.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-popover-window',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    host: {\r\n                        '[class]': '\"popover bs-popover-\" + placement.split(\"-\")[0]+\" bs-popover-\" + placement + (popoverClass ? \" \" + popoverClass : \"\")',\r\n                        'role': 'tooltip',\r\n                        '[id]': 'id'\r\n                    },\r\n                    template: \"\\n    <div class=\\\"arrow\\\"></div>\\n    <h3 class=\\\"popover-header\\\">{{title}}</h3><div class=\\\"popover-body\\\"><ng-content></ng-content></div>\",\r\n                    styles: [\"\\n    :host.bs-popover-top .arrow, :host.bs-popover-bottom .arrow {\\n      left: 50%;\\n      margin-left: -5px;\\n    }\\n\\n    :host.bs-popover-top-left .arrow, :host.bs-popover-bottom-left .arrow {\\n      left: 2em;\\n    }\\n\\n    :host.bs-popover-top-right .arrow, :host.bs-popover-bottom-right .arrow {\\n      left: auto;\\n      right: 2em;\\n    }\\n\\n    :host.bs-popover-left .arrow, :host.bs-popover-right .arrow {\\n      top: 50%;\\n      margin-top: -5px;\\n    }\\n\\n    :host.bs-popover-left-top .arrow, :host.bs-popover-right-top .arrow {\\n      top: 0.7em;\\n    }\\n\\n    :host.bs-popover-left-bottom .arrow, :host.bs-popover-right-bottom .arrow {\\n      top: auto;\\n      bottom: 0.7em;\\n    }\\n  \"]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbPopoverWindow.ctorParameters = function () { return [\r\n        { type: ElementRef, },\r\n        { type: Renderer2, },\r\n    ]; };\r\n    NgbPopoverWindow.propDecorators = {\r\n        \"placement\": [{ type: Input },],\r\n        \"title\": [{ type: Input },],\r\n        \"id\": [{ type: Input },],\r\n        \"popoverClass\": [{ type: Input },],\r\n    };\r\n    return NgbPopoverWindow;\r\n}());\r\nexport { NgbPopoverWindow };\r\n/**\r\n * A lightweight, extensible directive for fancy popover creation.\r\n */\r\nvar NgbPopover = /** @class */ (function () {\r\n    function NgbPopover(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {\r\n        var _this = this;\r\n        this._elementRef = _elementRef;\r\n        this._renderer = _renderer;\r\n        /**\r\n           * Emits an event when the popover is shown\r\n           */\r\n        this.shown = new EventEmitter();\r\n        /**\r\n           * Emits an event when the popover is hidden\r\n           */\r\n        this.hidden = new EventEmitter();\r\n        this._ngbPopoverWindowId = \"ngb-popover-\" + nextId++;\r\n        this.placement = config.placement;\r\n        this.triggers = config.triggers;\r\n        this.container = config.container;\r\n        this.disablePopover = config.disablePopover;\r\n        this.popoverClass = config.popoverClass;\r\n        this._popupService = new PopupService(NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);\r\n        this._zoneSubscription = ngZone.onStable.subscribe(function () {\r\n            if (_this._windowRef) {\r\n                _this._windowRef.instance.applyPlacement(positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body'));\r\n            }\r\n        });\r\n    }\r\n    NgbPopover.prototype._isDisabled = function () {\r\n        if (this.disablePopover) {\r\n            return true;\r\n        }\r\n        if (!this.ngbPopover && !this.popoverTitle) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Opens an element’s popover. This is considered a “manual” triggering of the popover.\r\n     * The context is an optional value to be injected into the popover template when it is created.\r\n     */\r\n    /**\r\n       * Opens an element’s popover. This is considered a “manual” triggering of the popover.\r\n       * The context is an optional value to be injected into the popover template when it is created.\r\n       */\r\n    NgbPopover.prototype.open = /**\r\n       * Opens an element’s popover. This is considered a “manual” triggering of the popover.\r\n       * The context is an optional value to be injected into the popover template when it is created.\r\n       */\r\n    function (context) {\r\n        if (!this._windowRef && !this._isDisabled()) {\r\n            this._windowRef = this._popupService.open(this.ngbPopover, context);\r\n            this._windowRef.instance.title = this.popoverTitle;\r\n            this._windowRef.instance.popoverClass = this.popoverClass;\r\n            this._windowRef.instance.id = this._ngbPopoverWindowId;\r\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbPopoverWindowId);\r\n            if (this.container === 'body') {\r\n                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n            }\r\n            // apply styling to set basic css-classes on target element, before going for positioning\r\n            this._windowRef.changeDetectorRef.detectChanges();\r\n            this._windowRef.changeDetectorRef.markForCheck();\r\n            // position popover along the element\r\n            this._windowRef.instance.applyPlacement(positionElements(this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement, this.container === 'body'));\r\n            this.shown.emit();\r\n        }\r\n    };\r\n    /**\r\n     * Closes an element’s popover. This is considered a “manual” triggering of the popover.\r\n     */\r\n    /**\r\n       * Closes an element’s popover. This is considered a “manual” triggering of the popover.\r\n       */\r\n    NgbPopover.prototype.close = /**\r\n       * Closes an element’s popover. This is considered a “manual” triggering of the popover.\r\n       */\r\n    function () {\r\n        if (this._windowRef) {\r\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\r\n            this._popupService.close();\r\n            this._windowRef = null;\r\n            this.hidden.emit();\r\n        }\r\n    };\r\n    /**\r\n     * Toggles an element’s popover. This is considered a “manual” triggering of the popover.\r\n     */\r\n    /**\r\n       * Toggles an element’s popover. This is considered a “manual” triggering of the popover.\r\n       */\r\n    NgbPopover.prototype.toggle = /**\r\n       * Toggles an element’s popover. This is considered a “manual” triggering of the popover.\r\n       */\r\n    function () {\r\n        if (this._windowRef) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether or not the popover is currently being shown\r\n     */\r\n    /**\r\n       * Returns whether or not the popover is currently being shown\r\n       */\r\n    NgbPopover.prototype.isOpen = /**\r\n       * Returns whether or not the popover is currently being shown\r\n       */\r\n    function () { return this._windowRef != null; };\r\n    NgbPopover.prototype.ngOnInit = function () {\r\n        this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));\r\n    };\r\n    NgbPopover.prototype.ngOnChanges = function (changes) {\r\n        // close popover if title and content become empty, or disablePopover set to true\r\n        if ((changes['ngbPopover'] || changes['popoverTitle'] || changes['disablePopover']) && this._isDisabled()) {\r\n            this.close();\r\n        }\r\n    };\r\n    NgbPopover.prototype.ngOnDestroy = function () {\r\n        this.close();\r\n        this._unregisterListenersFn();\r\n        this._zoneSubscription.unsubscribe();\r\n    };\r\n    NgbPopover.decorators = [\r\n        { type: Directive, args: [{ selector: '[ngbPopover]', exportAs: 'ngbPopover' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbPopover.ctorParameters = function () { return [\r\n        { type: ElementRef, },\r\n        { type: Renderer2, },\r\n        { type: Injector, },\r\n        { type: ComponentFactoryResolver, },\r\n        { type: ViewContainerRef, },\r\n        { type: NgbPopoverConfig, },\r\n        { type: NgZone, },\r\n    ]; };\r\n    NgbPopover.propDecorators = {\r\n        \"ngbPopover\": [{ type: Input },],\r\n        \"popoverTitle\": [{ type: Input },],\r\n        \"placement\": [{ type: Input },],\r\n        \"triggers\": [{ type: Input },],\r\n        \"container\": [{ type: Input },],\r\n        \"disablePopover\": [{ type: Input },],\r\n        \"popoverClass\": [{ type: Input },],\r\n        \"shown\": [{ type: Output },],\r\n        \"hidden\": [{ type: Output },],\r\n    };\r\n    return NgbPopover;\r\n}());\r\nexport { NgbPopover };\r\n//# sourceMappingURL=popover.js.map","import { NgModule } from '@angular/core';\r\nimport { NgbPopover, NgbPopoverWindow } from './popover';\r\nimport { NgbPopoverConfig } from './popover-config';\r\nexport { NgbPopover } from './popover';\r\nexport { NgbPopoverConfig } from './popover-config';\r\nvar NgbPopoverModule = /** @class */ (function () {\r\n    function NgbPopoverModule() {\r\n    }\r\n    NgbPopoverModule.forRoot = function () { return { ngModule: NgbPopoverModule, providers: [NgbPopoverConfig] }; };\r\n    NgbPopoverModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: [NgbPopover, NgbPopoverWindow], exports: [NgbPopover], entryComponents: [NgbPopoverWindow] },] },\r\n    ];\r\n    return NgbPopoverModule;\r\n}());\r\nexport { NgbPopoverModule };\r\n//# sourceMappingURL=popover.module.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbProgressbar component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the progress bars used in the application.\r\n */\r\nvar NgbProgressbarConfig = /** @class */ (function () {\r\n    function NgbProgressbarConfig() {\r\n        this.max = 100;\r\n        this.animated = false;\r\n        this.striped = false;\r\n        this.showValue = false;\r\n    }\r\n    NgbProgressbarConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbProgressbarConfig;\r\n}());\r\nexport { NgbProgressbarConfig };\r\n//# sourceMappingURL=progressbar-config.js.map","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\nimport { getValueInRange } from '../util/util';\r\nimport { NgbProgressbarConfig } from './progressbar-config';\r\n/**\r\n * Directive that can be used to provide feedback on the progress of a workflow or an action.\r\n */\r\nvar NgbProgressbar = /** @class */ (function () {\r\n    function NgbProgressbar(config) {\r\n        /**\r\n           * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\r\n           */\r\n        this.value = 0;\r\n        this.max = config.max;\r\n        this.animated = config.animated;\r\n        this.striped = config.striped;\r\n        this.type = config.type;\r\n        this.showValue = config.showValue;\r\n        this.height = config.height;\r\n    }\r\n    NgbProgressbar.prototype.getValue = function () { return getValueInRange(this.value, this.max); };\r\n    NgbProgressbar.prototype.getPercentValue = function () { return 100 * this.getValue() / this.max; };\r\n    NgbProgressbar.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-progressbar',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    template: \"\\n    <div class=\\\"progress\\\" [style.height]=\\\"height\\\">\\n      <div class=\\\"progress-bar{{type ? ' bg-' + type : ''}}{{animated ? ' progress-bar-animated' : ''}}{{striped ?\\n    ' progress-bar-striped' : ''}}\\\" role=\\\"progressbar\\\" [style.width.%]=\\\"getPercentValue()\\\"\\n    [attr.aria-valuenow]=\\\"getValue()\\\" aria-valuemin=\\\"0\\\" [attr.aria-valuemax]=\\\"max\\\">\\n        <span *ngIf=\\\"showValue\\\" i18n=\\\"@@ngb.progressbar.value\\\">{{getPercentValue()}}%</span><ng-content></ng-content>\\n      </div>\\n    </div>\\n  \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbProgressbar.ctorParameters = function () { return [\r\n        { type: NgbProgressbarConfig, },\r\n    ]; };\r\n    NgbProgressbar.propDecorators = {\r\n        \"max\": [{ type: Input },],\r\n        \"animated\": [{ type: Input },],\r\n        \"striped\": [{ type: Input },],\r\n        \"showValue\": [{ type: Input },],\r\n        \"type\": [{ type: Input },],\r\n        \"value\": [{ type: Input },],\r\n        \"height\": [{ type: Input },],\r\n    };\r\n    return NgbProgressbar;\r\n}());\r\nexport { NgbProgressbar };\r\n//# sourceMappingURL=progressbar.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbProgressbar } from './progressbar';\r\nimport { NgbProgressbarConfig } from './progressbar-config';\r\nexport { NgbProgressbar } from './progressbar';\r\nexport { NgbProgressbarConfig } from './progressbar-config';\r\nvar NgbProgressbarModule = /** @class */ (function () {\r\n    function NgbProgressbarModule() {\r\n    }\r\n    NgbProgressbarModule.forRoot = function () { return { ngModule: NgbProgressbarModule, providers: [NgbProgressbarConfig] }; };\r\n    NgbProgressbarModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: [NgbProgressbar], exports: [NgbProgressbar], imports: [CommonModule] },] },\r\n    ];\r\n    return NgbProgressbarModule;\r\n}());\r\nexport { NgbProgressbarModule };\r\n//# sourceMappingURL=progressbar.module.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbRating component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the ratings used in the application.\r\n */\r\nvar NgbRatingConfig = /** @class */ (function () {\r\n    function NgbRatingConfig() {\r\n        this.max = 10;\r\n        this.readonly = false;\r\n        this.resettable = false;\r\n    }\r\n    NgbRatingConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbRatingConfig;\r\n}());\r\nexport { NgbRatingConfig };\r\n//# sourceMappingURL=rating-config.js.map","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, TemplateRef, ContentChild, forwardRef, ChangeDetectorRef } from '@angular/core';\r\nimport { NgbRatingConfig } from './rating-config';\r\nimport { toString, getValueInRange } from '../util/util';\r\nimport { Key } from '../util/key';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nvar NGB_RATING_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(function () { return NgbRating; }),\r\n    multi: true\r\n};\r\n/**\r\n * Rating directive that will take care of visualising a star rating bar.\r\n */\r\nvar NgbRating = /** @class */ (function () {\r\n    function NgbRating(config, _changeDetectorRef) {\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this.contexts = [];\r\n        this.disabled = false;\r\n        /**\r\n           * An event fired when a user is hovering over a given rating.\r\n           * Event's payload equals to the rating being hovered over.\r\n           */\r\n        this.hover = new EventEmitter();\r\n        /**\r\n           * An event fired when a user stops hovering over a given rating.\r\n           * Event's payload equals to the rating of the last item being hovered over.\r\n           */\r\n        this.leave = new EventEmitter();\r\n        /**\r\n           * An event fired when a user selects a new rating.\r\n           * Event's payload equals to the newly selected rating.\r\n           */\r\n        this.rateChange = new EventEmitter(true);\r\n        this.onChange = function (_) { };\r\n        this.onTouched = function () { };\r\n        this.max = config.max;\r\n        this.readonly = config.readonly;\r\n    }\r\n    NgbRating.prototype.ariaValueText = function () { return this.nextRate + \" out of \" + this.max; };\r\n    NgbRating.prototype.enter = function (value) {\r\n        if (!this.readonly && !this.disabled) {\r\n            this._updateState(value);\r\n        }\r\n        this.hover.emit(value);\r\n    };\r\n    NgbRating.prototype.handleBlur = function () { this.onTouched(); };\r\n    NgbRating.prototype.handleClick = function (value) { this.update(this.resettable && this.rate === value ? 0 : value); };\r\n    NgbRating.prototype.handleKeyDown = function (event) {\r\n        if (Key[toString(event.which)]) {\r\n            event.preventDefault();\r\n            switch (event.which) {\r\n                case Key.ArrowDown:\r\n                case Key.ArrowLeft:\r\n                    this.update(this.rate - 1);\r\n                    break;\r\n                case Key.ArrowUp:\r\n                case Key.ArrowRight:\r\n                    this.update(this.rate + 1);\r\n                    break;\r\n                case Key.Home:\r\n                    this.update(0);\r\n                    break;\r\n                case Key.End:\r\n                    this.update(this.max);\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    NgbRating.prototype.ngOnChanges = function (changes) {\r\n        if (changes['rate']) {\r\n            this.update(this.rate);\r\n        }\r\n    };\r\n    NgbRating.prototype.ngOnInit = function () {\r\n        this.contexts = Array.from({ length: this.max }, function (v, k) { return ({ fill: 0, index: k }); });\r\n        this._updateState(this.rate);\r\n    };\r\n    NgbRating.prototype.registerOnChange = function (fn) { this.onChange = fn; };\r\n    NgbRating.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\r\n    NgbRating.prototype.reset = function () {\r\n        this.leave.emit(this.nextRate);\r\n        this._updateState(this.rate);\r\n    };\r\n    NgbRating.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };\r\n    NgbRating.prototype.update = function (value, internalChange) {\r\n        if (internalChange === void 0) { internalChange = true; }\r\n        var newRate = getValueInRange(value, this.max, 0);\r\n        if (!this.readonly && !this.disabled && this.rate !== newRate) {\r\n            this.rate = newRate;\r\n            this.rateChange.emit(this.rate);\r\n        }\r\n        if (internalChange) {\r\n            this.onChange(this.rate);\r\n            this.onTouched();\r\n        }\r\n        this._updateState(this.rate);\r\n    };\r\n    NgbRating.prototype.writeValue = function (value) {\r\n        this.update(value, false);\r\n        this._changeDetectorRef.markForCheck();\r\n    };\r\n    NgbRating.prototype._getFillValue = function (index) {\r\n        var diff = this.nextRate - index;\r\n        if (diff >= 1) {\r\n            return 100;\r\n        }\r\n        if (diff < 1 && diff > 0) {\r\n            return Number.parseInt((diff * 100).toFixed(2));\r\n        }\r\n        return 0;\r\n    };\r\n    NgbRating.prototype._updateState = function (nextValue) {\r\n        var _this = this;\r\n        this.nextRate = nextValue;\r\n        this.contexts.forEach(function (context, index) { return context.fill = _this._getFillValue(index); });\r\n    };\r\n    NgbRating.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-rating',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    host: {\r\n                        'class': 'd-inline-flex',\r\n                        'tabindex': '0',\r\n                        'role': 'slider',\r\n                        'aria-valuemin': '0',\r\n                        '[attr.aria-valuemax]': 'max',\r\n                        '[attr.aria-valuenow]': 'nextRate',\r\n                        '[attr.aria-valuetext]': 'ariaValueText()',\r\n                        '[attr.aria-disabled]': 'readonly ? true : null',\r\n                        '(blur)': 'handleBlur()',\r\n                        '(keydown)': 'handleKeyDown($event)',\r\n                        '(mouseleave)': 'reset()'\r\n                    },\r\n                    template: \"\\n    <ng-template #t let-fill=\\\"fill\\\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"contexts\\\" let-index=\\\"index\\\">\\n      <span class=\\\"sr-only\\\">({{ index < nextRate ? '*' : ' ' }})</span>\\n      <span (mouseenter)=\\\"enter(index + 1)\\\" (click)=\\\"handleClick(index + 1)\\\" [style.cursor]=\\\"readonly || disabled ? 'default' : 'pointer'\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"starTemplate || t\\\" [ngTemplateOutletContext]=\\\"contexts[index]\\\"></ng-template>\\n      </span>\\n    </ng-template>\\n  \",\r\n                    providers: [NGB_RATING_VALUE_ACCESSOR]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbRating.ctorParameters = function () { return [\r\n        { type: NgbRatingConfig, },\r\n        { type: ChangeDetectorRef, },\r\n    ]; };\r\n    NgbRating.propDecorators = {\r\n        \"max\": [{ type: Input },],\r\n        \"rate\": [{ type: Input },],\r\n        \"readonly\": [{ type: Input },],\r\n        \"resettable\": [{ type: Input },],\r\n        \"starTemplate\": [{ type: Input }, { type: ContentChild, args: [TemplateRef,] },],\r\n        \"hover\": [{ type: Output },],\r\n        \"leave\": [{ type: Output },],\r\n        \"rateChange\": [{ type: Output },],\r\n    };\r\n    return NgbRating;\r\n}());\r\nexport { NgbRating };\r\n//# sourceMappingURL=rating.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbRatingConfig } from './rating-config';\r\nimport { NgbRating } from './rating';\r\nexport { NgbRating } from './rating';\r\nexport { NgbRatingConfig } from './rating-config';\r\nvar NgbRatingModule = /** @class */ (function () {\r\n    function NgbRatingModule() {\r\n    }\r\n    NgbRatingModule.forRoot = function () { return { ngModule: NgbRatingModule, providers: [NgbRatingConfig] }; };\r\n    NgbRatingModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: [NgbRating], exports: [NgbRating], imports: [CommonModule] },] },\r\n    ];\r\n    return NgbRatingModule;\r\n}());\r\nexport { NgbRatingModule };\r\n//# sourceMappingURL=rating.module.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbTabset component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the tabsets used in the application.\r\n */\r\nvar NgbTabsetConfig = /** @class */ (function () {\r\n    function NgbTabsetConfig() {\r\n        this.justify = 'start';\r\n        this.orientation = 'horizontal';\r\n        this.type = 'tabs';\r\n    }\r\n    NgbTabsetConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbTabsetConfig;\r\n}());\r\nexport { NgbTabsetConfig };\r\n//# sourceMappingURL=tabset-config.js.map","import { Component, Input, ContentChildren, QueryList, Directive, TemplateRef, Output, EventEmitter } from '@angular/core';\r\nimport { NgbTabsetConfig } from './tabset-config';\r\nvar nextId = 0;\r\n/**\r\n * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.\r\n */\r\nvar NgbTabTitle = /** @class */ (function () {\r\n    function NgbTabTitle(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n    NgbTabTitle.decorators = [\r\n        { type: Directive, args: [{ selector: 'ng-template[ngbTabTitle]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbTabTitle.ctorParameters = function () { return [\r\n        { type: TemplateRef, },\r\n    ]; };\r\n    return NgbTabTitle;\r\n}());\r\nexport { NgbTabTitle };\r\n/**\r\n * This directive must be used to wrap content to be displayed in a tab.\r\n */\r\nvar NgbTabContent = /** @class */ (function () {\r\n    function NgbTabContent(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n    NgbTabContent.decorators = [\r\n        { type: Directive, args: [{ selector: 'ng-template[ngbTabContent]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbTabContent.ctorParameters = function () { return [\r\n        { type: TemplateRef, },\r\n    ]; };\r\n    return NgbTabContent;\r\n}());\r\nexport { NgbTabContent };\r\n/**\r\n * A directive representing an individual tab.\r\n */\r\nvar NgbTab = /** @class */ (function () {\r\n    function NgbTab() {\r\n        /**\r\n           * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\r\n           */\r\n        this.id = \"ngb-tab-\" + nextId++;\r\n        /**\r\n           * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\r\n           */\r\n        this.disabled = false;\r\n    }\r\n    NgbTab.prototype.ngAfterContentChecked = function () {\r\n        // We are using @ContentChildren instead of @ContantChild as in the Angular version being used\r\n        // only @ContentChildren allows us to specify the {descendants: false} option.\r\n        // Without {descendants: false} we are hitting bugs described in:\r\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\r\n        this.titleTpl = this.titleTpls.first;\r\n        this.contentTpl = this.contentTpls.first;\r\n    };\r\n    NgbTab.decorators = [\r\n        { type: Directive, args: [{ selector: 'ngb-tab' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbTab.propDecorators = {\r\n        \"id\": [{ type: Input },],\r\n        \"title\": [{ type: Input },],\r\n        \"disabled\": [{ type: Input },],\r\n        \"titleTpls\": [{ type: ContentChildren, args: [NgbTabTitle, { descendants: false },] },],\r\n        \"contentTpls\": [{ type: ContentChildren, args: [NgbTabContent, { descendants: false },] },],\r\n    };\r\n    return NgbTab;\r\n}());\r\nexport { NgbTab };\r\n/**\r\n * A component that makes it easy to create tabbed interface.\r\n */\r\nvar NgbTabset = /** @class */ (function () {\r\n    function NgbTabset(config) {\r\n        /**\r\n           * Whether the closed tabs should be hidden without destroying them\r\n           */\r\n        this.destroyOnHide = true;\r\n        /**\r\n           * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\r\n           */\r\n        this.tabChange = new EventEmitter();\r\n        this.type = config.type;\r\n        this.justify = config.justify;\r\n        this.orientation = config.orientation;\r\n    }\r\n    Object.defineProperty(NgbTabset.prototype, \"justify\", {\r\n        set: /**\r\n           * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or\r\n           * 'justified'\r\n           * The default value is 'start'.\r\n           */\r\n        function (className) {\r\n            if (className === 'fill' || className === 'justified') {\r\n                this.justifyClass = \"nav-\" + className;\r\n            }\r\n            else {\r\n                this.justifyClass = \"justify-content-\" + className;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Selects the tab with the given id and shows its associated pane.\r\n     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\r\n     */\r\n    /**\r\n       * Selects the tab with the given id and shows its associated pane.\r\n       * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\r\n       */\r\n    NgbTabset.prototype.select = /**\r\n       * Selects the tab with the given id and shows its associated pane.\r\n       * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\r\n       */\r\n    function (tabId) {\r\n        var selectedTab = this._getTabById(tabId);\r\n        if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {\r\n            var defaultPrevented_1 = false;\r\n            this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: function () { defaultPrevented_1 = true; } });\r\n            if (!defaultPrevented_1) {\r\n                this.activeId = selectedTab.id;\r\n            }\r\n        }\r\n    };\r\n    NgbTabset.prototype.ngAfterContentChecked = function () {\r\n        // auto-correct activeId that might have been set incorrectly as input\r\n        var activeTab = this._getTabById(this.activeId);\r\n        this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);\r\n    };\r\n    NgbTabset.prototype._getTabById = function (id) {\r\n        var tabsWithId = this.tabs.filter(function (tab) { return tab.id === id; });\r\n        return tabsWithId.length ? tabsWithId[0] : null;\r\n    };\r\n    NgbTabset.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-tabset',\r\n                    exportAs: 'ngbTabset',\r\n                    template: \"\\n    <ul [class]=\\\"'nav nav-' + type + (orientation == 'horizontal'?  ' ' + justifyClass : ' flex-column')\\\" role=\\\"tablist\\\">\\n      <li class=\\\"nav-item\\\" *ngFor=\\\"let tab of tabs\\\">\\n        <a [id]=\\\"tab.id\\\" class=\\\"nav-link\\\" [class.active]=\\\"tab.id === activeId\\\" [class.disabled]=\\\"tab.disabled\\\"\\n          href (click)=\\\"!!select(tab.id)\\\" role=\\\"tab\\\" [attr.tabindex]=\\\"(tab.disabled ? '-1': undefined)\\\"\\n          [attr.aria-controls]=\\\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\\\"\\n          [attr.aria-expanded]=\\\"tab.id === activeId\\\" [attr.aria-disabled]=\\\"tab.disabled\\\">\\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\\\"tab.titleTpl?.templateRef\\\"></ng-template>\\n        </a>\\n      </li>\\n    </ul>\\n    <div class=\\\"tab-content\\\">\\n      <ng-template ngFor let-tab [ngForOf]=\\\"tabs\\\">\\n        <div\\n          class=\\\"tab-pane {{tab.id === activeId ? 'active' : null}}\\\"\\n          *ngIf=\\\"!destroyOnHide || tab.id === activeId\\\"\\n          role=\\\"tabpanel\\\"\\n          [attr.aria-labelledby]=\\\"tab.id\\\" id=\\\"{{tab.id}}-panel\\\"\\n          [attr.aria-expanded]=\\\"tab.id === activeId\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tab.contentTpl?.templateRef\\\"></ng-template>\\n        </div>\\n      </ng-template>\\n    </div>\\n  \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbTabset.ctorParameters = function () { return [\r\n        { type: NgbTabsetConfig, },\r\n    ]; };\r\n    NgbTabset.propDecorators = {\r\n        \"tabs\": [{ type: ContentChildren, args: [NgbTab,] },],\r\n        \"activeId\": [{ type: Input },],\r\n        \"destroyOnHide\": [{ type: Input },],\r\n        \"justify\": [{ type: Input },],\r\n        \"orientation\": [{ type: Input },],\r\n        \"type\": [{ type: Input },],\r\n        \"tabChange\": [{ type: Output },],\r\n    };\r\n    return NgbTabset;\r\n}());\r\nexport { NgbTabset };\r\n//# sourceMappingURL=tabset.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbTabset, NgbTab, NgbTabContent, NgbTabTitle } from './tabset';\r\nimport { NgbTabsetConfig } from './tabset-config';\r\nexport { NgbTabset, NgbTab, NgbTabContent, NgbTabTitle } from './tabset';\r\nexport { NgbTabsetConfig } from './tabset-config';\r\nvar NGB_TABSET_DIRECTIVES = [NgbTabset, NgbTab, NgbTabContent, NgbTabTitle];\r\nvar NgbTabsetModule = /** @class */ (function () {\r\n    function NgbTabsetModule() {\r\n    }\r\n    NgbTabsetModule.forRoot = function () { return { ngModule: NgbTabsetModule, providers: [NgbTabsetConfig] }; };\r\n    NgbTabsetModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [CommonModule] },] },\r\n    ];\r\n    return NgbTabsetModule;\r\n}());\r\nexport { NgbTabsetModule };\r\n//# sourceMappingURL=tabset.module.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Injectable } from '@angular/core';\r\nimport { isInteger } from '../util/util';\r\n/**\r\n * Abstract type serving as a DI token for the service converting from your application Time model to internal\r\n * NgbTimeStruct model.\r\n * A default implementation converting from and to NgbTimeStruct is provided for retro-compatibility,\r\n * but you can provide another implementation to use an alternative format, ie for using with native Date Object.\r\n *\r\n * @since 2.2.0\r\n */\r\nvar NgbTimeAdapter = /** @class */ (function () {\r\n    function NgbTimeAdapter() {\r\n    }\r\n    NgbTimeAdapter.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbTimeAdapter;\r\n}());\r\nexport { NgbTimeAdapter };\r\nvar NgbTimeStructAdapter = /** @class */ (function (_super) {\r\n    __extends(NgbTimeStructAdapter, _super);\r\n    function NgbTimeStructAdapter() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n     * @param  {NgbTimeStruct} value\r\n     * @return {NgbTimeStruct}\r\n     */\r\n    /**\r\n       * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n       * @param  {NgbTimeStruct} value\r\n       * @return {NgbTimeStruct}\r\n       */\r\n    NgbTimeStructAdapter.prototype.fromModel = /**\r\n       * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n       * @param  {NgbTimeStruct} value\r\n       * @return {NgbTimeStruct}\r\n       */\r\n    function (time) {\r\n        return (time && isInteger(time.hour) && isInteger(time.minute)) ?\r\n            { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\r\n            null;\r\n    };\r\n    /**\r\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n     * @param  {NgbTimeStruct} value\r\n     * @return {NgbTimeStruct}\r\n     */\r\n    /**\r\n       * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n       * @param  {NgbTimeStruct} value\r\n       * @return {NgbTimeStruct}\r\n       */\r\n    NgbTimeStructAdapter.prototype.toModel = /**\r\n       * Converts a NgbTimeStruct value into NgbTimeStruct value\r\n       * @param  {NgbTimeStruct} value\r\n       * @return {NgbTimeStruct}\r\n       */\r\n    function (time) {\r\n        return (time && isInteger(time.hour) && isInteger(time.minute)) ?\r\n            { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\r\n            null;\r\n    };\r\n    NgbTimeStructAdapter.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbTimeStructAdapter;\r\n}(NgbTimeAdapter));\r\nexport { NgbTimeStructAdapter };\r\n//# sourceMappingURL=ngb-time-adapter.js.map","import { isNumber, toInteger } from '../util/util';\r\nvar NgbTime = /** @class */ (function () {\r\n    function NgbTime(hour, minute, second) {\r\n        this.hour = toInteger(hour);\r\n        this.minute = toInteger(minute);\r\n        this.second = toInteger(second);\r\n    }\r\n    NgbTime.prototype.changeHour = function (step) {\r\n        if (step === void 0) { step = 1; }\r\n        this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step);\r\n    };\r\n    NgbTime.prototype.updateHour = function (hour) {\r\n        if (isNumber(hour)) {\r\n            this.hour = (hour < 0 ? 24 + hour : hour) % 24;\r\n        }\r\n        else {\r\n            this.hour = NaN;\r\n        }\r\n    };\r\n    NgbTime.prototype.changeMinute = function (step) {\r\n        if (step === void 0) { step = 1; }\r\n        this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step);\r\n    };\r\n    NgbTime.prototype.updateMinute = function (minute) {\r\n        if (isNumber(minute)) {\r\n            this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;\r\n            this.changeHour(Math.floor(minute / 60));\r\n        }\r\n        else {\r\n            this.minute = NaN;\r\n        }\r\n    };\r\n    NgbTime.prototype.changeSecond = function (step) {\r\n        if (step === void 0) { step = 1; }\r\n        this.updateSecond((isNaN(this.second) ? 0 : this.second) + step);\r\n    };\r\n    NgbTime.prototype.updateSecond = function (second) {\r\n        if (isNumber(second)) {\r\n            this.second = second < 0 ? 60 + second % 60 : second % 60;\r\n            this.changeMinute(Math.floor(second / 60));\r\n        }\r\n        else {\r\n            this.second = NaN;\r\n        }\r\n    };\r\n    NgbTime.prototype.isValid = function (checkSecs) {\r\n        if (checkSecs === void 0) { checkSecs = true; }\r\n        return isNumber(this.hour) && isNumber(this.minute) && (checkSecs ? isNumber(this.second) : true);\r\n    };\r\n    NgbTime.prototype.toString = function () { return (this.hour || 0) + \":\" + (this.minute || 0) + \":\" + (this.second || 0); };\r\n    return NgbTime;\r\n}());\r\nexport { NgbTime };\r\n//# sourceMappingURL=ngb-time.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbTimepicker component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the timepickers used in the application.\r\n */\r\nvar NgbTimepickerConfig = /** @class */ (function () {\r\n    function NgbTimepickerConfig() {\r\n        this.meridian = false;\r\n        this.spinners = true;\r\n        this.seconds = false;\r\n        this.hourStep = 1;\r\n        this.minuteStep = 1;\r\n        this.secondStep = 1;\r\n        this.disabled = false;\r\n        this.readonlyInputs = false;\r\n        this.size = 'medium';\r\n    }\r\n    NgbTimepickerConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbTimepickerConfig;\r\n}());\r\nexport { NgbTimepickerConfig };\r\n//# sourceMappingURL=timepicker-config.js.map","import { Component, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { isNumber, padNumber, toInteger } from '../util/util';\r\nimport { NgbTime } from './ngb-time';\r\nimport { NgbTimepickerConfig } from './timepicker-config';\r\nimport { NgbTimeAdapter } from './ngb-time-adapter';\r\nvar NGB_TIMEPICKER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(function () { return NgbTimepicker; }),\r\n    multi: true\r\n};\r\n/**\r\n * A lightweight & configurable timepicker directive.\r\n */\r\nvar NgbTimepicker = /** @class */ (function () {\r\n    function NgbTimepicker(config, _ngbTimeAdapter) {\r\n        this._ngbTimeAdapter = _ngbTimeAdapter;\r\n        this.onChange = function (_) { };\r\n        this.onTouched = function () { };\r\n        this.meridian = config.meridian;\r\n        this.spinners = config.spinners;\r\n        this.seconds = config.seconds;\r\n        this.hourStep = config.hourStep;\r\n        this.minuteStep = config.minuteStep;\r\n        this.secondStep = config.secondStep;\r\n        this.disabled = config.disabled;\r\n        this.readonlyInputs = config.readonlyInputs;\r\n        this.size = config.size;\r\n    }\r\n    NgbTimepicker.prototype.writeValue = function (value) {\r\n        var structValue = this._ngbTimeAdapter.fromModel(value);\r\n        this.model = structValue ? new NgbTime(structValue.hour, structValue.minute, structValue.second) : new NgbTime();\r\n        if (!this.seconds && (!structValue || !isNumber(structValue.second))) {\r\n            this.model.second = 0;\r\n        }\r\n    };\r\n    NgbTimepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };\r\n    NgbTimepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\r\n    NgbTimepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };\r\n    NgbTimepicker.prototype.changeHour = function (step) {\r\n        this.model.changeHour(step);\r\n        this.propagateModelChange();\r\n    };\r\n    NgbTimepicker.prototype.changeMinute = function (step) {\r\n        this.model.changeMinute(step);\r\n        this.propagateModelChange();\r\n    };\r\n    NgbTimepicker.prototype.changeSecond = function (step) {\r\n        this.model.changeSecond(step);\r\n        this.propagateModelChange();\r\n    };\r\n    NgbTimepicker.prototype.updateHour = function (newVal) {\r\n        var isPM = this.model.hour >= 12;\r\n        var enteredHour = toInteger(newVal);\r\n        if (this.meridian && (isPM && enteredHour < 12 || !isPM && enteredHour === 12)) {\r\n            this.model.updateHour(enteredHour + 12);\r\n        }\r\n        else {\r\n            this.model.updateHour(enteredHour);\r\n        }\r\n        this.propagateModelChange();\r\n    };\r\n    NgbTimepicker.prototype.updateMinute = function (newVal) {\r\n        this.model.updateMinute(toInteger(newVal));\r\n        this.propagateModelChange();\r\n    };\r\n    NgbTimepicker.prototype.updateSecond = function (newVal) {\r\n        this.model.updateSecond(toInteger(newVal));\r\n        this.propagateModelChange();\r\n    };\r\n    NgbTimepicker.prototype.toggleMeridian = function () {\r\n        if (this.meridian) {\r\n            this.changeHour(12);\r\n        }\r\n    };\r\n    NgbTimepicker.prototype.formatHour = function (value) {\r\n        if (isNumber(value)) {\r\n            if (this.meridian) {\r\n                return padNumber(value % 12 === 0 ? 12 : value % 12);\r\n            }\r\n            else {\r\n                return padNumber(value % 24);\r\n            }\r\n        }\r\n        else {\r\n            return padNumber(NaN);\r\n        }\r\n    };\r\n    NgbTimepicker.prototype.formatMinSec = function (value) { return padNumber(value); };\r\n    NgbTimepicker.prototype.setFormControlSize = function () { return { 'form-control-sm': this.size === 'small', 'form-control-lg': this.size === 'large' }; };\r\n    NgbTimepicker.prototype.setButtonSize = function () { return { 'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large' }; };\r\n    NgbTimepicker.prototype.ngOnChanges = function (changes) {\r\n        if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {\r\n            this.model.second = 0;\r\n            this.propagateModelChange(false);\r\n        }\r\n    };\r\n    NgbTimepicker.prototype.propagateModelChange = function (touched) {\r\n        if (touched === void 0) { touched = true; }\r\n        if (touched) {\r\n            this.onTouched();\r\n        }\r\n        if (this.model.isValid(this.seconds)) {\r\n            this.onChange(this._ngbTimeAdapter.toModel({ hour: this.model.hour, minute: this.model.minute, second: this.model.second }));\r\n        }\r\n        else {\r\n            this.onChange(this._ngbTimeAdapter.toModel(null));\r\n        }\r\n    };\r\n    NgbTimepicker.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-timepicker',\r\n                    styles: [\"\\n\\n    :host {\\n      font-size: 1rem;\\n    }\\n\\n    .ngb-tp {\\n      display: -ms-flexbox;\\n      display: flex;\\n      -ms-flex-align: center;\\n      align-items: center;\\n    }\\n\\n    .ngb-tp-input-container {\\n      width: 4em;\\n    }\\n\\n    .ngb-tp-hour, .ngb-tp-minute, .ngb-tp-second, .ngb-tp-meridian {\\n      display: -ms-flexbox;\\n      display: flex;\\n      -ms-flex-direction: column;\\n      flex-direction: column;\\n      -ms-flex-align: center;\\n      align-items: center;\\n      -ms-flex-pack: distribute;\\n      justify-content: space-around;\\n    }\\n\\n    .ngb-tp-spacer {\\n      width: 1em;\\n      text-align: center;\\n    }\\n\\n    .chevron::before {\\n      border-style: solid;\\n      border-width: 0.29em 0.29em 0 0;\\n      content: '';\\n      display: inline-block;\\n      height: 0.69em;\\n      left: 0.05em;\\n      position: relative;\\n      top: 0.15em;\\n      transform: rotate(-45deg);\\n      -webkit-transform: rotate(-45deg);\\n      -ms-transform: rotate(-45deg);\\n      vertical-align: middle;\\n      width: 0.71em;\\n    }\\n\\n    .chevron.bottom:before {\\n      top: -.3em;\\n      -webkit-transform: rotate(135deg);\\n      -ms-transform: rotate(135deg);\\n      transform: rotate(135deg);\\n    }\\n\\n    input {\\n      text-align: center;\\n    }\\n  \"],\r\n                    template: \"\\n    <fieldset [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n      <div class=\\\"ngb-tp\\\">\\n        <div class=\\\"ngb-tp-input-container ngb-tp-hour\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeHour(hourStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-hours\\\">Increment hours</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngClass]=\\\"setFormControlSize()\\\" maxlength=\\\"2\\\"\\n            placeholder=\\\"HH\\\" i18n-placeholder=\\\"@@ngb.timepicker.HH\\\"\\n            [value]=\\\"formatHour(model?.hour)\\\" (change)=\\\"updateHour($event.target.value)\\\"\\n            [readonly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Hours\\\" i18n-aria-label=\\\"@@ngb.timepicker.hours\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeHour(-hourStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.decrement-hours\\\">Decrement hours</span>\\n          </button>\\n        </div>\\n        <div class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div class=\\\"ngb-tp-input-container ngb-tp-minute\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeMinute(minuteStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-minutes\\\">Increment minutes</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngClass]=\\\"setFormControlSize()\\\" maxlength=\\\"2\\\"\\n            placeholder=\\\"MM\\\" i18n-placeholder=\\\"@@ngb.timepicker.MM\\\"\\n            [value]=\\\"formatMinSec(model?.minute)\\\" (change)=\\\"updateMinute($event.target.value)\\\"\\n            [readonly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Minutes\\\" i18n-aria-label=\\\"@@ngb.timepicker.minutes\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeMinute(-minuteStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\"  i18n=\\\"@@ngb.timepicker.decrement-minutes\\\">Decrement minutes</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-input-container ngb-tp-second\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeSecond(secondStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-seconds\\\">Increment seconds</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [ngClass]=\\\"setFormControlSize()\\\" maxlength=\\\"2\\\"\\n            placeholder=\\\"SS\\\" i18n-placeholder=\\\"@@ngb.timepicker.SS\\\"\\n            [value]=\\\"formatMinSec(model?.second)\\\" (change)=\\\"updateSecond($event.target.value)\\\"\\n            [readonly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Seconds\\\" i18n-aria-label=\\\"@@ngb.timepicker.seconds\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" class=\\\"btn btn-link\\\" [ngClass]=\\\"setButtonSize()\\\" (click)=\\\"changeSecond(-secondStep)\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.decrement-seconds\\\">Decrement seconds</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-spacer\\\"></div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-meridian\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" [ngClass]=\\\"setButtonSize()\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\"\\n                  (click)=\\\"toggleMeridian()\\\">\\n            <ng-container *ngIf=\\\"model?.hour >= 12; else am\\\" i18n=\\\"@@ngb.timepicker.PM\\\">PM</ng-container>\\n            <ng-template #am i18n=\\\"@@ngb.timepicker.AM\\\">AM</ng-template>\\n          </button>\\n        </div>\\n      </div>\\n    </fieldset>\\n  \",\r\n                    providers: [NGB_TIMEPICKER_VALUE_ACCESSOR]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbTimepicker.ctorParameters = function () { return [\r\n        { type: NgbTimepickerConfig, },\r\n        { type: NgbTimeAdapter, },\r\n    ]; };\r\n    NgbTimepicker.propDecorators = {\r\n        \"meridian\": [{ type: Input },],\r\n        \"spinners\": [{ type: Input },],\r\n        \"seconds\": [{ type: Input },],\r\n        \"hourStep\": [{ type: Input },],\r\n        \"minuteStep\": [{ type: Input },],\r\n        \"secondStep\": [{ type: Input },],\r\n        \"readonlyInputs\": [{ type: Input },],\r\n        \"size\": [{ type: Input },],\r\n    };\r\n    return NgbTimepicker;\r\n}());\r\nexport { NgbTimepicker };\r\n//# sourceMappingURL=timepicker.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbTimepicker } from './timepicker';\r\nimport { NgbTimepickerConfig } from './timepicker-config';\r\nimport { NgbTimeAdapter, NgbTimeStructAdapter } from './ngb-time-adapter';\r\nexport { NgbTimepicker } from './timepicker';\r\nexport { NgbTimepickerConfig } from './timepicker-config';\r\nexport { NgbTimeAdapter } from './ngb-time-adapter';\r\nvar NgbTimepickerModule = /** @class */ (function () {\r\n    function NgbTimepickerModule() {\r\n    }\r\n    NgbTimepickerModule.forRoot = function () {\r\n        return {\r\n            ngModule: NgbTimepickerModule,\r\n            providers: [NgbTimepickerConfig, { provide: NgbTimeAdapter, useClass: NgbTimeStructAdapter }]\r\n        };\r\n    };\r\n    NgbTimepickerModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: [NgbTimepicker], exports: [NgbTimepicker], imports: [CommonModule] },] },\r\n    ];\r\n    return NgbTimepickerModule;\r\n}());\r\nexport { NgbTimepickerModule };\r\n//# sourceMappingURL=timepicker.module.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbTooltip directive.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the tooltips used in the application.\r\n */\r\nvar NgbTooltipConfig = /** @class */ (function () {\r\n    function NgbTooltipConfig() {\r\n        this.placement = 'top';\r\n        this.triggers = 'hover';\r\n        this.disableTooltip = false;\r\n    }\r\n    NgbTooltipConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbTooltipConfig;\r\n}());\r\nexport { NgbTooltipConfig };\r\n//# sourceMappingURL=tooltip-config.js.map","import { Component, Directive, Input, Output, EventEmitter, ChangeDetectionStrategy, Injector, Renderer2, ElementRef, ViewContainerRef, ComponentFactoryResolver, NgZone } from '@angular/core';\r\nimport { listenToTriggers } from '../util/triggers';\r\nimport { positionElements } from '../util/positioning';\r\nimport { PopupService } from '../util/popup';\r\nimport { NgbTooltipConfig } from './tooltip-config';\r\nvar nextId = 0;\r\nvar NgbTooltipWindow = /** @class */ (function () {\r\n    function NgbTooltipWindow(_element, _renderer) {\r\n        this._element = _element;\r\n        this._renderer = _renderer;\r\n        this.placement = 'top';\r\n    }\r\n    NgbTooltipWindow.prototype.applyPlacement = function (_placement) {\r\n        // remove the current placement classes\r\n        this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\r\n        this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\r\n        // set the new placement classes\r\n        this.placement = _placement;\r\n        // apply the new placement\r\n        this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\r\n        this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\r\n    };\r\n    NgbTooltipWindow.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-tooltip-window',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    host: {\r\n                        '[class]': '\"tooltip show bs-tooltip-\" + placement.split(\"-\")[0]+\" bs-tooltip-\" + placement',\r\n                        'role': 'tooltip',\r\n                        '[id]': 'id'\r\n                    },\r\n                    template: \"<div class=\\\"arrow\\\"></div><div class=\\\"tooltip-inner\\\"><ng-content></ng-content></div>\",\r\n                    styles: [\"\\n    :host.bs-tooltip-top .arrow, :host.bs-tooltip-bottom .arrow {\\n      left: calc(50% - 0.4rem);\\n    }\\n\\n    :host.bs-tooltip-top-left .arrow, :host.bs-tooltip-bottom-left .arrow {\\n      left: 1em;\\n    }\\n\\n    :host.bs-tooltip-top-right .arrow, :host.bs-tooltip-bottom-right .arrow {\\n      left: auto;\\n      right: 0.8rem;\\n    }\\n\\n    :host.bs-tooltip-left .arrow, :host.bs-tooltip-right .arrow {\\n      top: calc(50% - 0.4rem);\\n    }\\n\\n    :host.bs-tooltip-left-top .arrow, :host.bs-tooltip-right-top .arrow {\\n      top: 0.4rem;\\n    }\\n\\n    :host.bs-tooltip-left-bottom .arrow, :host.bs-tooltip-right-bottom .arrow {\\n      top: auto;\\n      bottom: 0.4rem;\\n    }\\n  \"]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbTooltipWindow.ctorParameters = function () { return [\r\n        { type: ElementRef, },\r\n        { type: Renderer2, },\r\n    ]; };\r\n    NgbTooltipWindow.propDecorators = {\r\n        \"placement\": [{ type: Input },],\r\n        \"id\": [{ type: Input },],\r\n    };\r\n    return NgbTooltipWindow;\r\n}());\r\nexport { NgbTooltipWindow };\r\n/**\r\n * A lightweight, extensible directive for fancy tooltip creation.\r\n */\r\nvar NgbTooltip = /** @class */ (function () {\r\n    function NgbTooltip(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {\r\n        var _this = this;\r\n        this._elementRef = _elementRef;\r\n        this._renderer = _renderer;\r\n        /**\r\n           * Emits an event when the tooltip is shown\r\n           */\r\n        this.shown = new EventEmitter();\r\n        /**\r\n           * Emits an event when the tooltip is hidden\r\n           */\r\n        this.hidden = new EventEmitter();\r\n        this._ngbTooltipWindowId = \"ngb-tooltip-\" + nextId++;\r\n        this.placement = config.placement;\r\n        this.triggers = config.triggers;\r\n        this.container = config.container;\r\n        this.disableTooltip = config.disableTooltip;\r\n        this._popupService = new PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);\r\n        this._zoneSubscription = ngZone.onStable.subscribe(function () {\r\n            if (_this._windowRef) {\r\n                _this._windowRef.instance.applyPlacement(positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body'));\r\n            }\r\n        });\r\n    }\r\n    Object.defineProperty(NgbTooltip.prototype, \"ngbTooltip\", {\r\n        get: function () { return this._ngbTooltip; },\r\n        set: /**\r\n           * Content to be displayed as tooltip. If falsy, the tooltip won't open.\r\n           */\r\n        function (value) {\r\n            this._ngbTooltip = value;\r\n            if (!value && this._windowRef) {\r\n                this.close();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n     * The context is an optional value to be injected into the tooltip template when it is created.\r\n     */\r\n    /**\r\n       * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n       * The context is an optional value to be injected into the tooltip template when it is created.\r\n       */\r\n    NgbTooltip.prototype.open = /**\r\n       * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n       * The context is an optional value to be injected into the tooltip template when it is created.\r\n       */\r\n    function (context) {\r\n        if (!this._windowRef && this._ngbTooltip && !this.disableTooltip) {\r\n            this._windowRef = this._popupService.open(this._ngbTooltip, context);\r\n            this._windowRef.instance.id = this._ngbTooltipWindowId;\r\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbTooltipWindowId);\r\n            if (this.container === 'body') {\r\n                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n            }\r\n            this._windowRef.instance.placement = Array.isArray(this.placement) ? this.placement[0] : this.placement;\r\n            // apply styling to set basic css-classes on target element, before going for positioning\r\n            this._windowRef.changeDetectorRef.detectChanges();\r\n            this._windowRef.changeDetectorRef.markForCheck();\r\n            // position tooltip along the element\r\n            this._windowRef.instance.applyPlacement(positionElements(this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement, this.container === 'body'));\r\n            this.shown.emit();\r\n        }\r\n    };\r\n    /**\r\n     * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n     */\r\n    /**\r\n       * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n       */\r\n    NgbTooltip.prototype.close = /**\r\n       * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n       */\r\n    function () {\r\n        if (this._windowRef != null) {\r\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\r\n            this._popupService.close();\r\n            this._windowRef = null;\r\n            this.hidden.emit();\r\n        }\r\n    };\r\n    /**\r\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n     */\r\n    /**\r\n       * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n       */\r\n    NgbTooltip.prototype.toggle = /**\r\n       * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n       */\r\n    function () {\r\n        if (this._windowRef) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether or not the tooltip is currently being shown\r\n     */\r\n    /**\r\n       * Returns whether or not the tooltip is currently being shown\r\n       */\r\n    NgbTooltip.prototype.isOpen = /**\r\n       * Returns whether or not the tooltip is currently being shown\r\n       */\r\n    function () { return this._windowRef != null; };\r\n    NgbTooltip.prototype.ngOnInit = function () {\r\n        this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));\r\n    };\r\n    NgbTooltip.prototype.ngOnDestroy = function () {\r\n        this.close();\r\n        // This check is needed as it might happen that ngOnDestroy is called before ngOnInit\r\n        // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199\r\n        if (this._unregisterListenersFn) {\r\n            this._unregisterListenersFn();\r\n        }\r\n        this._zoneSubscription.unsubscribe();\r\n    };\r\n    NgbTooltip.decorators = [\r\n        { type: Directive, args: [{ selector: '[ngbTooltip]', exportAs: 'ngbTooltip' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbTooltip.ctorParameters = function () { return [\r\n        { type: ElementRef, },\r\n        { type: Renderer2, },\r\n        { type: Injector, },\r\n        { type: ComponentFactoryResolver, },\r\n        { type: ViewContainerRef, },\r\n        { type: NgbTooltipConfig, },\r\n        { type: NgZone, },\r\n    ]; };\r\n    NgbTooltip.propDecorators = {\r\n        \"placement\": [{ type: Input },],\r\n        \"triggers\": [{ type: Input },],\r\n        \"container\": [{ type: Input },],\r\n        \"disableTooltip\": [{ type: Input },],\r\n        \"shown\": [{ type: Output },],\r\n        \"hidden\": [{ type: Output },],\r\n        \"ngbTooltip\": [{ type: Input },],\r\n    };\r\n    return NgbTooltip;\r\n}());\r\nexport { NgbTooltip };\r\n//# sourceMappingURL=tooltip.js.map","import { NgModule } from '@angular/core';\r\nimport { NgbTooltip, NgbTooltipWindow } from './tooltip';\r\nimport { NgbTooltipConfig } from './tooltip-config';\r\nexport { NgbTooltipConfig } from './tooltip-config';\r\nexport { NgbTooltip } from './tooltip';\r\nvar NgbTooltipModule = /** @class */ (function () {\r\n    function NgbTooltipModule() {\r\n    }\r\n    NgbTooltipModule.forRoot = function () { return { ngModule: NgbTooltipModule, providers: [NgbTooltipConfig] }; };\r\n    NgbTooltipModule.decorators = [\r\n        { type: NgModule, args: [{ declarations: [NgbTooltip, NgbTooltipWindow], exports: [NgbTooltip], entryComponents: [NgbTooltipWindow] },] },\r\n    ];\r\n    return NgbTooltipModule;\r\n}());\r\nexport { NgbTooltipModule };\r\n//# sourceMappingURL=tooltip.module.js.map","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\nimport { regExpEscape, toString } from '../util/util';\r\nvar NgbHighlight = /** @class */ (function () {\r\n    function NgbHighlight() {\r\n        this.highlightClass = 'ngb-highlight';\r\n    }\r\n    NgbHighlight.prototype.ngOnChanges = function (changes) {\r\n        var resultStr = toString(this.result);\r\n        var resultLC = resultStr.toLowerCase();\r\n        var termLC = toString(this.term).toLowerCase();\r\n        var currentIdx = 0;\r\n        if (termLC.length > 0) {\r\n            this.parts = resultLC.split(new RegExp(\"(\" + regExpEscape(termLC) + \")\")).map(function (part) {\r\n                var originalPart = resultStr.substr(currentIdx, part.length);\r\n                currentIdx += part.length;\r\n                return originalPart;\r\n            });\r\n        }\r\n        else {\r\n            this.parts = [resultStr];\r\n        }\r\n    };\r\n    NgbHighlight.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-highlight',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    template: \"<ng-template ngFor [ngForOf]=\\\"parts\\\" let-part let-isOdd=\\\"odd\\\">\" +\r\n                        \"<span *ngIf=\\\"isOdd\\\" class=\\\"{{highlightClass}}\\\">{{part}}</span><ng-template [ngIf]=\\\"!isOdd\\\">{{part}}</ng-template>\" +\r\n                        \"</ng-template>\",\r\n                    // template needs to be formatted in a certain way so we don't add empty text nodes\r\n                    styles: [\"\\n    .ngb-highlight {\\n      font-weight: bold;\\n    }\\n  \"]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbHighlight.propDecorators = {\r\n        \"highlightClass\": [{ type: Input },],\r\n        \"result\": [{ type: Input },],\r\n        \"term\": [{ type: Input },],\r\n    };\r\n    return NgbHighlight;\r\n}());\r\nexport { NgbHighlight };\r\n//# sourceMappingURL=highlight.js.map","import { Injectable } from '@angular/core';\r\n/**\r\n * Configuration service for the NgbTypeahead component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the typeaheads used in the application.\r\n */\r\nvar NgbTypeaheadConfig = /** @class */ (function () {\r\n    function NgbTypeaheadConfig() {\r\n        this.editable = true;\r\n        this.focusFirst = true;\r\n        this.showHint = false;\r\n        this.placement = 'bottom-left';\r\n    }\r\n    NgbTypeaheadConfig.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return NgbTypeaheadConfig;\r\n}());\r\nexport { NgbTypeaheadConfig };\r\n//# sourceMappingURL=typeahead-config.js.map","import { Component, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\r\nimport { toString } from '../util/util';\r\nvar NgbTypeaheadWindow = /** @class */ (function () {\r\n    function NgbTypeaheadWindow() {\r\n        this.activeIdx = 0;\r\n        /**\r\n           * Flag indicating if the first row should be active initially\r\n           */\r\n        this.focusFirst = true;\r\n        /**\r\n           * A function used to format a given result before display. This function should return a formatted string without any\r\n           * HTML markup\r\n           */\r\n        this.formatter = toString;\r\n        /**\r\n           * Event raised when user selects a particular result row\r\n           */\r\n        this.selectEvent = new EventEmitter();\r\n        this.activeChangeEvent = new EventEmitter();\r\n    }\r\n    NgbTypeaheadWindow.prototype.hasActive = function () { return this.activeIdx > -1 && this.activeIdx < this.results.length; };\r\n    NgbTypeaheadWindow.prototype.getActive = function () { return this.results[this.activeIdx]; };\r\n    NgbTypeaheadWindow.prototype.markActive = function (activeIdx) {\r\n        this.activeIdx = activeIdx;\r\n        this._activeChanged();\r\n    };\r\n    NgbTypeaheadWindow.prototype.next = function () {\r\n        if (this.activeIdx === this.results.length - 1) {\r\n            this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\r\n        }\r\n        else {\r\n            this.activeIdx++;\r\n        }\r\n        this._activeChanged();\r\n    };\r\n    NgbTypeaheadWindow.prototype.prev = function () {\r\n        if (this.activeIdx < 0) {\r\n            this.activeIdx = this.results.length - 1;\r\n        }\r\n        else if (this.activeIdx === 0) {\r\n            this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\r\n        }\r\n        else {\r\n            this.activeIdx--;\r\n        }\r\n        this._activeChanged();\r\n    };\r\n    NgbTypeaheadWindow.prototype.resetActive = function () {\r\n        this.activeIdx = this.focusFirst ? 0 : -1;\r\n        this._activeChanged();\r\n    };\r\n    NgbTypeaheadWindow.prototype.select = function (item) { this.selectEvent.emit(item); };\r\n    NgbTypeaheadWindow.prototype.ngOnInit = function () { this.resetActive(); };\r\n    NgbTypeaheadWindow.prototype._activeChanged = function () {\r\n        this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\r\n    };\r\n    NgbTypeaheadWindow.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngb-typeahead-window',\r\n                    exportAs: 'ngbTypeaheadWindow',\r\n                    host: { 'class': 'dropdown-menu show', 'role': 'listbox', '[id]': 'id' },\r\n                    template: \"\\n    <ng-template #rt let-result=\\\"result\\\" let-term=\\\"term\\\" let-formatter=\\\"formatter\\\">\\n      <ngb-highlight [result]=\\\"formatter(result)\\\" [term]=\\\"term\\\"></ngb-highlight>\\n    </ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"results\\\" let-result let-idx=\\\"index\\\">\\n      <button type=\\\"button\\\" class=\\\"dropdown-item\\\" role=\\\"option\\\"\\n        [id]=\\\"id + '-' + idx\\\"\\n        [class.active]=\\\"idx === activeIdx\\\"\\n        (mouseenter)=\\\"markActive(idx)\\\"\\n        (click)=\\\"select(result)\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"resultTemplate || rt\\\"\\n          [ngTemplateOutletContext]=\\\"{result: result, term: term, formatter: formatter}\\\"></ng-template>\\n      </button>\\n    </ng-template>\\n  \"\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbTypeaheadWindow.propDecorators = {\r\n        \"id\": [{ type: Input },],\r\n        \"focusFirst\": [{ type: Input },],\r\n        \"results\": [{ type: Input },],\r\n        \"term\": [{ type: Input },],\r\n        \"formatter\": [{ type: Input },],\r\n        \"resultTemplate\": [{ type: Input },],\r\n        \"selectEvent\": [{ type: Output, args: ['select',] },],\r\n        \"activeChangeEvent\": [{ type: Output, args: ['activeChange',] },],\r\n    };\r\n    return NgbTypeaheadWindow;\r\n}());\r\nexport { NgbTypeaheadWindow };\r\n//# sourceMappingURL=typeahead-window.js.map","import { ComponentFactoryResolver, Directive, ElementRef, EventEmitter, forwardRef, Injector, Input, NgZone, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BehaviorSubject, fromEvent } from 'rxjs';\r\nimport { positionElements } from '../util/positioning';\r\nimport { NgbTypeaheadWindow } from './typeahead-window';\r\nimport { PopupService } from '../util/popup';\r\nimport { toString, isDefined } from '../util/util';\r\nimport { Key } from '../util/key';\r\nimport { Live } from '../util/accessibility/live';\r\nimport { NgbTypeaheadConfig } from './typeahead-config';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nvar NGB_TYPEAHEAD_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(function () { return NgbTypeahead; }),\r\n    multi: true\r\n};\r\nvar nextWindowId = 0;\r\n/**\r\n * NgbTypeahead directive provides a simple way of creating powerful typeaheads from any text input\r\n */\r\nvar NgbTypeahead = /** @class */ (function () {\r\n    function NgbTypeahead(_elementRef, _viewContainerRef, _renderer, _injector, componentFactoryResolver, config, ngZone, _live) {\r\n        var _this = this;\r\n        this._elementRef = _elementRef;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._renderer = _renderer;\r\n        this._injector = _injector;\r\n        this._live = _live;\r\n        /**\r\n           * Value for the configurable autocomplete attribute.\r\n           * Defaults to 'off' to disable the native browser autocomplete, but this standard value does not seem\r\n           * to be always correctly taken into account.\r\n           *\r\n           * @since 2.1.0\r\n           */\r\n        this.autocomplete = 'off';\r\n        /** Placement of a typeahead accepts:\r\n           *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\r\n           *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\r\n           * and array of above values.\r\n          */\r\n        this.placement = 'bottom-left';\r\n        /**\r\n           * An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent.\r\n           */\r\n        this.selectItem = new EventEmitter();\r\n        this.popupId = \"ngb-typeahead-\" + nextWindowId++;\r\n        this._onTouched = function () { };\r\n        this._onChange = function (_) { };\r\n        this.container = config.container;\r\n        this.editable = config.editable;\r\n        this.focusFirst = config.focusFirst;\r\n        this.showHint = config.showHint;\r\n        this.placement = config.placement;\r\n        this._valueChanges = fromEvent(_elementRef.nativeElement, 'input')\r\n            .pipe(map(function ($event) { return $event.target.value; }));\r\n        this._resubscribeTypeahead = new BehaviorSubject(null);\r\n        this._popupService = new PopupService(NgbTypeaheadWindow, _injector, _viewContainerRef, _renderer, componentFactoryResolver);\r\n        this._zoneSubscription = ngZone.onStable.subscribe(function () {\r\n            if (_this.isPopupOpen()) {\r\n                positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');\r\n            }\r\n        });\r\n    }\r\n    NgbTypeahead.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        var inputValues$ = this._valueChanges.pipe(tap(function (value) {\r\n            _this._inputValueBackup = value;\r\n            if (_this.editable) {\r\n                _this._onChange(value);\r\n            }\r\n        }));\r\n        var results$ = inputValues$.pipe(this.ngbTypeahead);\r\n        var processedResults$ = results$.pipe(tap(function () {\r\n            if (!_this.editable) {\r\n                _this._onChange(undefined);\r\n            }\r\n        }));\r\n        var userInput$ = this._resubscribeTypeahead.pipe(switchMap(function () { return processedResults$; }));\r\n        this._subscription = this._subscribeToUserInput(userInput$);\r\n    };\r\n    NgbTypeahead.prototype.ngOnDestroy = function () {\r\n        this._closePopup();\r\n        this._unsubscribeFromUserInput();\r\n        this._zoneSubscription.unsubscribe();\r\n    };\r\n    NgbTypeahead.prototype.registerOnChange = function (fn) { this._onChange = fn; };\r\n    NgbTypeahead.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };\r\n    NgbTypeahead.prototype.writeValue = function (value) { this._writeInputValue(this._formatItemForInput(value)); };\r\n    NgbTypeahead.prototype.setDisabledState = function (isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    };\r\n    NgbTypeahead.prototype.onDocumentClick = function (event) {\r\n        if (event.target !== this._elementRef.nativeElement) {\r\n            this.dismissPopup();\r\n        }\r\n    };\r\n    /**\r\n     * Dismisses typeahead popup window\r\n     */\r\n    /**\r\n       * Dismisses typeahead popup window\r\n       */\r\n    NgbTypeahead.prototype.dismissPopup = /**\r\n       * Dismisses typeahead popup window\r\n       */\r\n    function () {\r\n        if (this.isPopupOpen()) {\r\n            this._closePopup();\r\n            this._writeInputValue(this._inputValueBackup);\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if the typeahead popup window is displayed\r\n     */\r\n    /**\r\n       * Returns true if the typeahead popup window is displayed\r\n       */\r\n    NgbTypeahead.prototype.isPopupOpen = /**\r\n       * Returns true if the typeahead popup window is displayed\r\n       */\r\n    function () { return this._windowRef != null; };\r\n    NgbTypeahead.prototype.handleBlur = function () {\r\n        this._resubscribeTypeahead.next(null);\r\n        this._onTouched();\r\n    };\r\n    NgbTypeahead.prototype.handleKeyDown = function (event) {\r\n        if (!this.isPopupOpen()) {\r\n            return;\r\n        }\r\n        if (Key[toString(event.which)]) {\r\n            switch (event.which) {\r\n                case Key.ArrowDown:\r\n                    event.preventDefault();\r\n                    this._windowRef.instance.next();\r\n                    this._showHint();\r\n                    break;\r\n                case Key.ArrowUp:\r\n                    event.preventDefault();\r\n                    this._windowRef.instance.prev();\r\n                    this._showHint();\r\n                    break;\r\n                case Key.Enter:\r\n                case Key.Tab:\r\n                    var result = this._windowRef.instance.getActive();\r\n                    if (isDefined(result)) {\r\n                        event.preventDefault();\r\n                        event.stopPropagation();\r\n                        this._selectResult(result);\r\n                    }\r\n                    this._closePopup();\r\n                    break;\r\n                case Key.Escape:\r\n                    event.preventDefault();\r\n                    this._resubscribeTypeahead.next(null);\r\n                    this.dismissPopup();\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    NgbTypeahead.prototype._openPopup = function () {\r\n        var _this = this;\r\n        if (!this.isPopupOpen()) {\r\n            this._inputValueBackup = this._elementRef.nativeElement.value;\r\n            this._windowRef = this._popupService.open();\r\n            this._windowRef.instance.id = this.popupId;\r\n            this._windowRef.instance.selectEvent.subscribe(function (result) { return _this._selectResultClosePopup(result); });\r\n            this._windowRef.instance.activeChangeEvent.subscribe(function (activeId) { return _this.activeDescendant = activeId; });\r\n            if (this.container === 'body') {\r\n                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\r\n            }\r\n        }\r\n    };\r\n    NgbTypeahead.prototype._closePopup = function () {\r\n        this._popupService.close();\r\n        this._windowRef = null;\r\n        this.activeDescendant = undefined;\r\n    };\r\n    NgbTypeahead.prototype._selectResult = function (result) {\r\n        var defaultPrevented = false;\r\n        this.selectItem.emit({ item: result, preventDefault: function () { defaultPrevented = true; } });\r\n        this._resubscribeTypeahead.next(null);\r\n        if (!defaultPrevented) {\r\n            this.writeValue(result);\r\n            this._onChange(result);\r\n        }\r\n    };\r\n    NgbTypeahead.prototype._selectResultClosePopup = function (result) {\r\n        this._selectResult(result);\r\n        this._closePopup();\r\n    };\r\n    NgbTypeahead.prototype._showHint = function () {\r\n        if (this.showHint && this._windowRef.instance.hasActive() && this._inputValueBackup != null) {\r\n            var userInputLowerCase = this._inputValueBackup.toLowerCase();\r\n            var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());\r\n            if (userInputLowerCase === formattedVal.substr(0, this._inputValueBackup.length).toLowerCase()) {\r\n                this._writeInputValue(this._inputValueBackup + formattedVal.substr(this._inputValueBackup.length));\r\n                this._elementRef.nativeElement['setSelectionRange'].apply(this._elementRef.nativeElement, [this._inputValueBackup.length, formattedVal.length]);\r\n            }\r\n            else {\r\n                this.writeValue(this._windowRef.instance.getActive());\r\n            }\r\n        }\r\n    };\r\n    NgbTypeahead.prototype._formatItemForInput = function (item) {\r\n        return item != null && this.inputFormatter ? this.inputFormatter(item) : toString(item);\r\n    };\r\n    NgbTypeahead.prototype._writeInputValue = function (value) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', toString(value));\r\n    };\r\n    NgbTypeahead.prototype._subscribeToUserInput = function (userInput$) {\r\n        var _this = this;\r\n        return userInput$.subscribe(function (results) {\r\n            if (!results || results.length === 0) {\r\n                _this._closePopup();\r\n            }\r\n            else {\r\n                _this._openPopup();\r\n                _this._windowRef.instance.focusFirst = _this.focusFirst;\r\n                _this._windowRef.instance.results = results;\r\n                _this._windowRef.instance.term = _this._elementRef.nativeElement.value;\r\n                if (_this.resultFormatter) {\r\n                    _this._windowRef.instance.formatter = _this.resultFormatter;\r\n                }\r\n                if (_this.resultTemplate) {\r\n                    _this._windowRef.instance.resultTemplate = _this.resultTemplate;\r\n                }\r\n                _this._windowRef.instance.resetActive();\r\n                // The observable stream we are subscribing to might have async steps\r\n                // and if a component containing typeahead is using the OnPush strategy\r\n                // the change detection turn wouldn't be invoked automatically.\r\n                // The observable stream we are subscribing to might have async steps\r\n                // and if a component containing typeahead is using the OnPush strategy\r\n                // the change detection turn wouldn't be invoked automatically.\r\n                _this._windowRef.changeDetectorRef.detectChanges();\r\n                _this._showHint();\r\n            }\r\n            // live announcer\r\n            var count = results ? results.length : 0;\r\n            _this._live.say(count === 0 ? 'No results available' : count + \" result\" + (count === 1 ? '' : 's') + \" available\");\r\n        });\r\n    };\r\n    NgbTypeahead.prototype._unsubscribeFromUserInput = function () {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n        }\r\n        this._subscription = null;\r\n    };\r\n    NgbTypeahead.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'input[ngbTypeahead]',\r\n                    exportAs: 'ngbTypeahead',\r\n                    host: {\r\n                        '(blur)': 'handleBlur()',\r\n                        '[class.open]': 'isPopupOpen()',\r\n                        '(document:click)': 'onDocumentClick($event)',\r\n                        '(keydown)': 'handleKeyDown($event)',\r\n                        '[autocomplete]': 'autocomplete',\r\n                        'autocapitalize': 'off',\r\n                        'autocorrect': 'off',\r\n                        'role': 'combobox',\r\n                        'aria-multiline': 'false',\r\n                        '[attr.aria-autocomplete]': 'showHint ? \"both\" : \"list\"',\r\n                        '[attr.aria-activedescendant]': 'activeDescendant',\r\n                        '[attr.aria-owns]': 'isPopupOpen() ? popupId : null',\r\n                        '[attr.aria-expanded]': 'isPopupOpen()'\r\n                    },\r\n                    providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgbTypeahead.ctorParameters = function () { return [\r\n        { type: ElementRef, },\r\n        { type: ViewContainerRef, },\r\n        { type: Renderer2, },\r\n        { type: Injector, },\r\n        { type: ComponentFactoryResolver, },\r\n        { type: NgbTypeaheadConfig, },\r\n        { type: NgZone, },\r\n        { type: Live, },\r\n    ]; };\r\n    NgbTypeahead.propDecorators = {\r\n        \"autocomplete\": [{ type: Input },],\r\n        \"container\": [{ type: Input },],\r\n        \"editable\": [{ type: Input },],\r\n        \"focusFirst\": [{ type: Input },],\r\n        \"inputFormatter\": [{ type: Input },],\r\n        \"ngbTypeahead\": [{ type: Input },],\r\n        \"resultFormatter\": [{ type: Input },],\r\n        \"resultTemplate\": [{ type: Input },],\r\n        \"showHint\": [{ type: Input },],\r\n        \"placement\": [{ type: Input },],\r\n        \"selectItem\": [{ type: Output },],\r\n    };\r\n    return NgbTypeahead;\r\n}());\r\nexport { NgbTypeahead };\r\n//# sourceMappingURL=typeahead.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbHighlight } from './highlight';\r\nimport { NgbTypeaheadWindow } from './typeahead-window';\r\nimport { NgbTypeahead } from './typeahead';\r\nimport { NgbTypeaheadConfig } from './typeahead-config';\r\nimport { Live, ARIA_LIVE_DELAY, DEFAULT_ARIA_LIVE_DELAY } from './../util/accessibility/live';\r\nexport { NgbHighlight } from './highlight';\r\nexport { NgbTypeaheadWindow } from './typeahead-window';\r\nexport { NgbTypeaheadConfig } from './typeahead-config';\r\nexport { NgbTypeahead } from './typeahead';\r\nvar NgbTypeaheadModule = /** @class */ (function () {\r\n    function NgbTypeaheadModule() {\r\n    }\r\n    NgbTypeaheadModule.forRoot = function () {\r\n        return {\r\n            ngModule: NgbTypeaheadModule,\r\n            providers: [Live, NgbTypeaheadConfig, { provide: ARIA_LIVE_DELAY, useValue: DEFAULT_ARIA_LIVE_DELAY }]\r\n        };\r\n    };\r\n    NgbTypeaheadModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    declarations: [NgbTypeahead, NgbHighlight, NgbTypeaheadWindow],\r\n                    exports: [NgbTypeahead, NgbHighlight],\r\n                    imports: [CommonModule],\r\n                    entryComponents: [NgbTypeaheadWindow]\r\n                },] },\r\n    ];\r\n    return NgbTypeaheadModule;\r\n}());\r\nexport { NgbTypeaheadModule };\r\n//# sourceMappingURL=typeahead.module.js.map","import { Injectable, Inject, InjectionToken } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nexport var ARIA_LIVE_DELAY = new InjectionToken('live announcer delay');\r\nexport var DEFAULT_ARIA_LIVE_DELAY = 100;\r\nfunction getLiveElement(document, lazyCreate) {\r\n    if (lazyCreate === void 0) { lazyCreate = false; }\r\n    var element = document.body.querySelector('#ngb-live');\r\n    if (element == null && lazyCreate) {\r\n        element = document.createElement('div');\r\n        element.setAttribute('id', 'ngb-live');\r\n        element.setAttribute('aria-live', 'polite');\r\n        element.setAttribute('aria-atomic', 'true');\r\n        element.classList.add('sr-only');\r\n        document.body.appendChild(element);\r\n    }\r\n    return element;\r\n}\r\nvar Live = /** @class */ (function () {\r\n    function Live(_document, _delay) {\r\n        this._document = _document;\r\n        this._delay = _delay;\r\n    }\r\n    Live.prototype.ngOnDestroy = function () {\r\n        var element = getLiveElement(this._document);\r\n        if (element) {\r\n            element.parentElement.removeChild(element);\r\n        }\r\n    };\r\n    Live.prototype.say = function (message) {\r\n        var element = getLiveElement(this._document, true);\r\n        var delay = this._delay;\r\n        element.textContent = '';\r\n        var setText = function () { return element.textContent = message; };\r\n        if (delay === null) {\r\n            setText();\r\n        }\r\n        else {\r\n            setTimeout(setText, delay);\r\n        }\r\n    };\r\n    Live.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    Live.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n        { type: undefined, decorators: [{ type: Inject, args: [ARIA_LIVE_DELAY,] },] },\r\n    ]; };\r\n    return Live;\r\n}());\r\nexport { Live };\r\n//# sourceMappingURL=live.js.map","import { fromEvent } from 'rxjs';\r\nimport { filter, map, takeUntil, withLatestFrom } from 'rxjs/operators';\r\nimport { Key } from '../util/key';\r\nvar FOCUSABLE_ELEMENTS_SELECTOR = [\r\n    'a[href]', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])',\r\n    'textarea:not([disabled])', '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])'\r\n].join(', ');\r\n/**\r\n * Returns first and last focusable elements inside of a given element based on specific CSS selector\r\n */\r\nfunction getFocusableBoundaryElements(element) {\r\n    var list = element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);\r\n    return [list[0], list[list.length - 1]];\r\n}\r\n/**\r\n * Function that enforces browser focus to be trapped inside a DOM element.\r\n *\r\n * Works only for clicks inside the element and navigation with 'Tab', ignoring clicks outside of the element\r\n *\r\n * @param element The element around which focus will be trapped inside\r\n * @param stopFocusTrap$ The observable stream. When completed the focus trap will clean up listeners\r\n * and free internal resources\r\n */\r\nexport var ngbFocusTrap = function (element, stopFocusTrap$) {\r\n    // last focused element\r\n    var lastFocusedElement$ = fromEvent(element, 'focusin').pipe(takeUntil(stopFocusTrap$), map(function (e) { return e.target; }));\r\n    // 'tab' / 'shift+tab' stream\r\n    fromEvent(element, 'keydown')\r\n        .pipe(takeUntil(stopFocusTrap$), filter(function (e) { return e.which === Key.Tab; }), withLatestFrom(lastFocusedElement$))\r\n        .subscribe(function (_a) {\r\n        var tabEvent = _a[0], focusedElement = _a[1];\r\n        var _b = getFocusableBoundaryElements(element), first = _b[0], last = _b[1];\r\n        if (focusedElement === first && tabEvent.shiftKey) {\r\n            last.focus();\r\n            tabEvent.preventDefault();\r\n        }\r\n        if (focusedElement === last && !tabEvent.shiftKey) {\r\n            first.focus();\r\n            tabEvent.preventDefault();\r\n        }\r\n    });\r\n    // inside click\r\n    fromEvent(element, 'click')\r\n        .pipe(takeUntil(stopFocusTrap$), withLatestFrom(lastFocusedElement$), map(function (arr) { return arr[1]; }))\r\n        .subscribe(function (lastFocusedElement) { return lastFocusedElement.focus(); });\r\n};\r\n//# sourceMappingURL=focus-trap.js.map","export var Key;\r\n(function (Key) {\r\n    Key[Key[\"Tab\"] = 9] = \"Tab\";\r\n    Key[Key[\"Enter\"] = 13] = \"Enter\";\r\n    Key[Key[\"Escape\"] = 27] = \"Escape\";\r\n    Key[Key[\"Space\"] = 32] = \"Space\";\r\n    Key[Key[\"PageUp\"] = 33] = \"PageUp\";\r\n    Key[Key[\"PageDown\"] = 34] = \"PageDown\";\r\n    Key[Key[\"End\"] = 35] = \"End\";\r\n    Key[Key[\"Home\"] = 36] = \"Home\";\r\n    Key[Key[\"ArrowLeft\"] = 37] = \"ArrowLeft\";\r\n    Key[Key[\"ArrowUp\"] = 38] = \"ArrowUp\";\r\n    Key[Key[\"ArrowRight\"] = 39] = \"ArrowRight\";\r\n    Key[Key[\"ArrowDown\"] = 40] = \"ArrowDown\";\r\n})(Key || (Key = {}));\r\n//# sourceMappingURL=key.js.map","import { TemplateRef } from '@angular/core';\r\nvar ContentRef = /** @class */ (function () {\r\n    function ContentRef(nodes, viewRef, componentRef) {\r\n        this.nodes = nodes;\r\n        this.viewRef = viewRef;\r\n        this.componentRef = componentRef;\r\n    }\r\n    return ContentRef;\r\n}());\r\nexport { ContentRef };\r\nvar PopupService = /** @class */ (function () {\r\n    function PopupService(_type, _injector, _viewContainerRef, _renderer, _componentFactoryResolver) {\r\n        this._type = _type;\r\n        this._injector = _injector;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._renderer = _renderer;\r\n        this._componentFactoryResolver = _componentFactoryResolver;\r\n    }\r\n    PopupService.prototype.open = function (content, context) {\r\n        if (!this._windowRef) {\r\n            this._contentRef = this._getContentRef(content, context);\r\n            this._windowRef = this._viewContainerRef.createComponent(this._componentFactoryResolver.resolveComponentFactory(this._type), 0, this._injector, this._contentRef.nodes);\r\n        }\r\n        return this._windowRef;\r\n    };\r\n    PopupService.prototype.close = function () {\r\n        if (this._windowRef) {\r\n            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\r\n            this._windowRef = null;\r\n            if (this._contentRef.viewRef) {\r\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\r\n                this._contentRef = null;\r\n            }\r\n        }\r\n    };\r\n    PopupService.prototype._getContentRef = function (content, context) {\r\n        if (!content) {\r\n            return new ContentRef([]);\r\n        }\r\n        else if (content instanceof TemplateRef) {\r\n            var viewRef = this._viewContainerRef.createEmbeddedView(content, context);\r\n            return new ContentRef([viewRef.rootNodes], viewRef);\r\n        }\r\n        else {\r\n            return new ContentRef([[this._renderer.createText(\"\" + content)]]);\r\n        }\r\n    };\r\n    return PopupService;\r\n}());\r\nexport { PopupService };\r\n//# sourceMappingURL=popup.js.map","// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\nvar \r\n// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\nPositioning = /** @class */ (function () {\r\n    function Positioning() {\r\n    }\r\n    Positioning.prototype.getAllStyles = function (element) { return window.getComputedStyle(element); };\r\n    Positioning.prototype.getStyle = function (element, prop) { return this.getAllStyles(element)[prop]; };\r\n    Positioning.prototype.isStaticPositioned = function (element) {\r\n        return (this.getStyle(element, 'position') || 'static') === 'static';\r\n    };\r\n    Positioning.prototype.offsetParent = function (element) {\r\n        var offsetParentEl = element.offsetParent || document.documentElement;\r\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\r\n            offsetParentEl = offsetParentEl.offsetParent;\r\n        }\r\n        return offsetParentEl || document.documentElement;\r\n    };\r\n    Positioning.prototype.position = function (element, round) {\r\n        if (round === void 0) { round = true; }\r\n        var elPosition;\r\n        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\r\n        if (this.getStyle(element, 'position') === 'fixed') {\r\n            elPosition = element.getBoundingClientRect();\r\n        }\r\n        else {\r\n            var offsetParentEl = this.offsetParent(element);\r\n            elPosition = this.offset(element, false);\r\n            if (offsetParentEl !== document.documentElement) {\r\n                parentOffset = this.offset(offsetParentEl, false);\r\n            }\r\n            parentOffset.top += offsetParentEl.clientTop;\r\n            parentOffset.left += offsetParentEl.clientLeft;\r\n        }\r\n        elPosition.top -= parentOffset.top;\r\n        elPosition.bottom -= parentOffset.top;\r\n        elPosition.left -= parentOffset.left;\r\n        elPosition.right -= parentOffset.left;\r\n        if (round) {\r\n            elPosition.top = Math.round(elPosition.top);\r\n            elPosition.bottom = Math.round(elPosition.bottom);\r\n            elPosition.left = Math.round(elPosition.left);\r\n            elPosition.right = Math.round(elPosition.right);\r\n        }\r\n        return elPosition;\r\n    };\r\n    Positioning.prototype.offset = function (element, round) {\r\n        if (round === void 0) { round = true; }\r\n        var elBcr = element.getBoundingClientRect();\r\n        var viewportOffset = {\r\n            top: window.pageYOffset - document.documentElement.clientTop,\r\n            left: window.pageXOffset - document.documentElement.clientLeft\r\n        };\r\n        var elOffset = {\r\n            height: elBcr.height || element.offsetHeight,\r\n            width: elBcr.width || element.offsetWidth,\r\n            top: elBcr.top + viewportOffset.top,\r\n            bottom: elBcr.bottom + viewportOffset.top,\r\n            left: elBcr.left + viewportOffset.left,\r\n            right: elBcr.right + viewportOffset.left\r\n        };\r\n        if (round) {\r\n            elOffset.height = Math.round(elOffset.height);\r\n            elOffset.width = Math.round(elOffset.width);\r\n            elOffset.top = Math.round(elOffset.top);\r\n            elOffset.bottom = Math.round(elOffset.bottom);\r\n            elOffset.left = Math.round(elOffset.left);\r\n            elOffset.right = Math.round(elOffset.right);\r\n        }\r\n        return elOffset;\r\n    };\r\n    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {\r\n        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\r\n        var targetElStyles = this.getAllStyles(targetElement);\r\n        var targetElBCR = targetElement.getBoundingClientRect();\r\n        var placementPrimary = placement.split('-')[0] || 'top';\r\n        var placementSecondary = placement.split('-')[1] || 'center';\r\n        var targetElPosition = {\r\n            'height': targetElBCR.height || targetElement.offsetHeight,\r\n            'width': targetElBCR.width || targetElement.offsetWidth,\r\n            'top': 0,\r\n            'bottom': targetElBCR.height || targetElement.offsetHeight,\r\n            'left': 0,\r\n            'right': targetElBCR.width || targetElement.offsetWidth\r\n        };\r\n        switch (placementPrimary) {\r\n            case 'top':\r\n                targetElPosition.top =\r\n                    hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));\r\n                break;\r\n            case 'bottom':\r\n                targetElPosition.top = hostElPosition.top + hostElPosition.height;\r\n                break;\r\n            case 'left':\r\n                targetElPosition.left =\r\n                    hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\r\n                break;\r\n            case 'right':\r\n                targetElPosition.left = hostElPosition.left + hostElPosition.width;\r\n                break;\r\n        }\r\n        switch (placementSecondary) {\r\n            case 'top':\r\n                targetElPosition.top = hostElPosition.top;\r\n                break;\r\n            case 'bottom':\r\n                targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\r\n                break;\r\n            case 'left':\r\n                targetElPosition.left = hostElPosition.left;\r\n                break;\r\n            case 'right':\r\n                targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\r\n                break;\r\n            case 'center':\r\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\r\n                    targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;\r\n                }\r\n                else {\r\n                    targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;\r\n                }\r\n                break;\r\n        }\r\n        targetElPosition.top = Math.round(targetElPosition.top);\r\n        targetElPosition.bottom = Math.round(targetElPosition.bottom);\r\n        targetElPosition.left = Math.round(targetElPosition.left);\r\n        targetElPosition.right = Math.round(targetElPosition.right);\r\n        return targetElPosition;\r\n    };\r\n    // get the availble placements of the target element in the viewport dependeing on the host element\r\n    // get the availble placements of the target element in the viewport dependeing on the host element\r\n    Positioning.prototype.getAvailablePlacements = \r\n    // get the availble placements of the target element in the viewport dependeing on the host element\r\n    function (hostElement, targetElement) {\r\n        var availablePlacements = [];\r\n        var hostElemClientRect = hostElement.getBoundingClientRect();\r\n        var targetElemClientRect = targetElement.getBoundingClientRect();\r\n        var html = document.documentElement;\r\n        var windowHeight = window.innerHeight || html.clientHeight;\r\n        var windowWidth = window.innerWidth || html.clientWidth;\r\n        var hostElemClientRectHorCenter = hostElemClientRect.left + hostElemClientRect.width / 2;\r\n        var hostElemClientRectVerCenter = hostElemClientRect.top + hostElemClientRect.height / 2;\r\n        // left: check if target width can be placed between host left and viewport start and also height of target is\r\n        // inside viewport\r\n        if (targetElemClientRect.width < hostElemClientRect.left) {\r\n            // check for left only\r\n            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&\r\n                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {\r\n                availablePlacements.splice(availablePlacements.length, 1, 'left');\r\n            }\r\n            // check for left-top and left-bottom\r\n            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'left', availablePlacements);\r\n        }\r\n        // top: target height is less than host top\r\n        if (targetElemClientRect.height < hostElemClientRect.top) {\r\n            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&\r\n                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {\r\n                availablePlacements.splice(availablePlacements.length, 1, 'top');\r\n            }\r\n            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'top', availablePlacements);\r\n        }\r\n        // right: check if target width can be placed between host right and viewport end and also height of target is\r\n        // inside viewport\r\n        if (windowWidth - hostElemClientRect.right > targetElemClientRect.width) {\r\n            // check for right only\r\n            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&\r\n                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {\r\n                availablePlacements.splice(availablePlacements.length, 1, 'right');\r\n            }\r\n            // check for right-top and right-bottom\r\n            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'right', availablePlacements);\r\n        }\r\n        // bottom: check if there is enough space between host bottom and viewport end for target height\r\n        if (windowHeight - hostElemClientRect.bottom > targetElemClientRect.height) {\r\n            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&\r\n                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {\r\n                availablePlacements.splice(availablePlacements.length, 1, 'bottom');\r\n            }\r\n            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'bottom', availablePlacements);\r\n        }\r\n        return availablePlacements;\r\n    };\r\n    /**\r\n     * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom\r\n     * primaryplacement: left|right\r\n     * availablePlacementArr: array in which available placemets to be set\r\n     */\r\n    /**\r\n       * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom\r\n       * primaryplacement: left|right\r\n       * availablePlacementArr: array in which available placemets to be set\r\n       */\r\n    Positioning.prototype.setSecondaryPlacementForLeftRight = /**\r\n       * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom\r\n       * primaryplacement: left|right\r\n       * availablePlacementArr: array in which available placemets to be set\r\n       */\r\n    function (hostElemClientRect, targetElemClientRect, primaryPlacement, availablePlacementArr) {\r\n        var html = document.documentElement;\r\n        // check for left-bottom\r\n        if (targetElemClientRect.height <= hostElemClientRect.bottom) {\r\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-bottom');\r\n        }\r\n        if ((window.innerHeight || html.clientHeight) - hostElemClientRect.top >= targetElemClientRect.height) {\r\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-top');\r\n        }\r\n    };\r\n    /**\r\n     * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right\r\n     * primaryplacement: top|bottom\r\n     * availablePlacementArr: array in which available placemets to be set\r\n     */\r\n    /**\r\n       * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right\r\n       * primaryplacement: top|bottom\r\n       * availablePlacementArr: array in which available placemets to be set\r\n       */\r\n    Positioning.prototype.setSecondaryPlacementForTopBottom = /**\r\n       * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right\r\n       * primaryplacement: top|bottom\r\n       * availablePlacementArr: array in which available placemets to be set\r\n       */\r\n    function (hostElemClientRect, targetElemClientRect, primaryPlacement, availablePlacementArr) {\r\n        var html = document.documentElement;\r\n        // check for left-bottom\r\n        if ((window.innerWidth || html.clientWidth) - hostElemClientRect.left >= targetElemClientRect.width) {\r\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-left');\r\n        }\r\n        if (targetElemClientRect.width <= hostElemClientRect.right) {\r\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-right');\r\n        }\r\n    };\r\n    return Positioning;\r\n}());\r\n// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\nexport { Positioning };\r\nvar positionService = new Positioning();\r\n/*\r\n * Accept the placement array and applies the appropriate placement dependent on the viewport.\r\n * Returns the applied placement.\r\n * In case of auto placement, placements are selected in order\r\n *   'top', 'bottom', 'left', 'right',\r\n *   'top-left', 'top-right',\r\n *   'bottom-left', 'bottom-right',\r\n *   'left-top', 'left-bottom',\r\n *   'right-top', 'right-bottom'.\r\n * */\r\nexport function positionElements(hostElement, targetElement, placement, appendToBody) {\r\n    var placementVals = Array.isArray(placement) ? placement : [placement];\r\n    // replace auto placement with other placements\r\n    var hasAuto = placementVals.findIndex(function (val) { return val === 'auto'; });\r\n    if (hasAuto >= 0) {\r\n        ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top',\r\n            'left-bottom', 'right-top', 'right-bottom',\r\n        ].forEach(function (obj) {\r\n            if (placementVals.find(function (val) { return val.search('^' + obj) !== -1; }) == null) {\r\n                placementVals.splice(hasAuto++, 1, obj);\r\n            }\r\n        });\r\n    }\r\n    // coordinates where to position\r\n    var topVal = 0, leftVal = 0;\r\n    var appliedPlacement;\r\n    // get available placements\r\n    var availablePlacements = positionService.getAvailablePlacements(hostElement, targetElement);\r\n    var _loop_1 = function (item, index) {\r\n        // check if passed placement is present in the available placement or otherwise apply the last placement in the\r\n        // passed placement list\r\n        if ((availablePlacements.find(function (val) { return val === item; }) != null) || (placementVals.length === index + 1)) {\r\n            appliedPlacement = item;\r\n            var pos = positionService.positionElements(hostElement, targetElement, item, appendToBody);\r\n            topVal = pos.top;\r\n            leftVal = pos.left;\r\n            return \"break\";\r\n        }\r\n    };\r\n    // iterate over all the passed placements\r\n    for (var _i = 0, _a = toItemIndexes(placementVals); _i < _a.length; _i++) {\r\n        var _b = _a[_i], item = _b.item, index = _b.index;\r\n        var state_1 = _loop_1(item, index);\r\n        if (state_1 === \"break\")\r\n            break;\r\n    }\r\n    targetElement.style.top = topVal + \"px\";\r\n    targetElement.style.left = leftVal + \"px\";\r\n    return appliedPlacement;\r\n}\r\n// function to get index and item of an array\r\nfunction toItemIndexes(a) {\r\n    return a.map(function (item, index) { return ({ item: item, index: index }); });\r\n}\r\n//# sourceMappingURL=positioning.js.map","import { Injectable, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nvar noop = function () { };\r\nvar ɵ0 = noop;\r\n/**\r\n * Utility to handle the scrollbar.\r\n *\r\n * It allows to compensate the lack of a vertical scrollbar by adding an\r\n * equivalent padding on the right of the body, and to remove this compensation.\r\n */\r\nvar ScrollBar = /** @class */ (function () {\r\n    function ScrollBar(_document) {\r\n        this._document = _document;\r\n    }\r\n    /**\r\n     * Detects if a scrollbar is present and if yes, already compensates for its\r\n     * removal by adding an equivalent padding on the right of the body.\r\n     *\r\n     * @return a callback used to revert the compensation (noop if there was none,\r\n     * otherwise a function removing the padding)\r\n     */\r\n    /**\r\n       * Detects if a scrollbar is present and if yes, already compensates for its\r\n       * removal by adding an equivalent padding on the right of the body.\r\n       *\r\n       * @return a callback used to revert the compensation (noop if there was none,\r\n       * otherwise a function removing the padding)\r\n       */\r\n    ScrollBar.prototype.compensate = /**\r\n       * Detects if a scrollbar is present and if yes, already compensates for its\r\n       * removal by adding an equivalent padding on the right of the body.\r\n       *\r\n       * @return a callback used to revert the compensation (noop if there was none,\r\n       * otherwise a function removing the padding)\r\n       */\r\n    function () { return !this._isPresent() ? noop : this._adjustBody(this._getWidth()); };\r\n    /**\r\n     * Adds a padding of the given width on the right of the body.\r\n     *\r\n     * @return a callback used to revert the padding to its previous value\r\n     */\r\n    /**\r\n       * Adds a padding of the given width on the right of the body.\r\n       *\r\n       * @return a callback used to revert the padding to its previous value\r\n       */\r\n    ScrollBar.prototype._adjustBody = /**\r\n       * Adds a padding of the given width on the right of the body.\r\n       *\r\n       * @return a callback used to revert the padding to its previous value\r\n       */\r\n    function (width) {\r\n        var body = this._document.body;\r\n        var userSetPadding = body.style.paddingRight;\r\n        var paddingAmount = parseFloat(window.getComputedStyle(body)['padding-right']);\r\n        body.style['padding-right'] = paddingAmount + width + \"px\";\r\n        return function () { return body.style['padding-right'] = userSetPadding; };\r\n    };\r\n    /**\r\n     * Tells whether a scrollbar is currently present on the body.\r\n     *\r\n     * @return true if scrollbar is present, false otherwise\r\n     */\r\n    /**\r\n       * Tells whether a scrollbar is currently present on the body.\r\n       *\r\n       * @return true if scrollbar is present, false otherwise\r\n       */\r\n    ScrollBar.prototype._isPresent = /**\r\n       * Tells whether a scrollbar is currently present on the body.\r\n       *\r\n       * @return true if scrollbar is present, false otherwise\r\n       */\r\n    function () {\r\n        var rect = this._document.body.getBoundingClientRect();\r\n        return rect.left + rect.right < window.innerWidth;\r\n    };\r\n    /**\r\n     * Calculates and returns the width of a scrollbar.\r\n     *\r\n     * @return the width of a scrollbar on this page\r\n     */\r\n    /**\r\n       * Calculates and returns the width of a scrollbar.\r\n       *\r\n       * @return the width of a scrollbar on this page\r\n       */\r\n    ScrollBar.prototype._getWidth = /**\r\n       * Calculates and returns the width of a scrollbar.\r\n       *\r\n       * @return the width of a scrollbar on this page\r\n       */\r\n    function () {\r\n        var measurer = this._document.createElement('div');\r\n        measurer.className = 'modal-scrollbar-measure';\r\n        var body = this._document.body;\r\n        body.appendChild(measurer);\r\n        var width = measurer.getBoundingClientRect().width - measurer.clientWidth;\r\n        body.removeChild(measurer);\r\n        return width;\r\n    };\r\n    ScrollBar.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    ScrollBar.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n    ]; };\r\n    return ScrollBar;\r\n}());\r\nexport { ScrollBar };\r\nexport { ɵ0 };\r\n//# sourceMappingURL=scrollbar.js.map","var Trigger = /** @class */ (function () {\r\n    function Trigger(open, close) {\r\n        this.open = open;\r\n        this.close = close;\r\n        if (!close) {\r\n            this.close = open;\r\n        }\r\n    }\r\n    Trigger.prototype.isManual = function () { return this.open === 'manual' || this.close === 'manual'; };\r\n    return Trigger;\r\n}());\r\nexport { Trigger };\r\nvar DEFAULT_ALIASES = {\r\n    'hover': ['mouseenter', 'mouseleave']\r\n};\r\nexport function parseTriggers(triggers, aliases) {\r\n    if (aliases === void 0) { aliases = DEFAULT_ALIASES; }\r\n    var trimmedTriggers = (triggers || '').trim();\r\n    if (trimmedTriggers.length === 0) {\r\n        return [];\r\n    }\r\n    var parsedTriggers = trimmedTriggers.split(/\\s+/).map(function (trigger) { return trigger.split(':'); }).map(function (triggerPair) {\r\n        var alias = aliases[triggerPair[0]] || triggerPair;\r\n        return new Trigger(alias[0], alias[1]);\r\n    });\r\n    var manualTriggers = parsedTriggers.filter(function (triggerPair) { return triggerPair.isManual(); });\r\n    if (manualTriggers.length > 1) {\r\n        throw 'Triggers parse error: only one manual trigger is allowed';\r\n    }\r\n    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\r\n        throw 'Triggers parse error: manual trigger can\\'t be mixed with other triggers';\r\n    }\r\n    return parsedTriggers;\r\n}\r\nvar noopFn = function () { };\r\nvar ɵ0 = noopFn;\r\nexport function listenToTriggers(renderer, nativeElement, triggers, openFn, closeFn, toggleFn) {\r\n    var parsedTriggers = parseTriggers(triggers);\r\n    var listeners = [];\r\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\r\n        return noopFn;\r\n    }\r\n    parsedTriggers.forEach(function (trigger) {\r\n        if (trigger.open === trigger.close) {\r\n            listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));\r\n        }\r\n        else {\r\n            listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));\r\n        }\r\n    });\r\n    return function () { listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); }); };\r\n}\r\nexport { ɵ0 };\r\n//# sourceMappingURL=triggers.js.map","export function toInteger(value) {\r\n    return parseInt(\"\" + value, 10);\r\n}\r\nexport function toString(value) {\r\n    return (value !== undefined && value !== null) ? \"\" + value : '';\r\n}\r\nexport function getValueInRange(value, max, min) {\r\n    if (min === void 0) { min = 0; }\r\n    return Math.max(Math.min(value, max), min);\r\n}\r\nexport function isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nexport function isNumber(value) {\r\n    return !isNaN(toInteger(value));\r\n}\r\nexport function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n}\r\nexport function isDefined(value) {\r\n    return value !== undefined && value !== null;\r\n}\r\nexport function padNumber(value) {\r\n    if (isNumber(value)) {\r\n        return (\"0\" + value).slice(-2);\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\nexport function regExpEscape(text) {\r\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n//# sourceMappingURL=util.js.map"],"sourceRoot":""}